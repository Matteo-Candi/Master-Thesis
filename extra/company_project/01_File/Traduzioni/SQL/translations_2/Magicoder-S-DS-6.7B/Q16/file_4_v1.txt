You are an expert in translating code from SQL to PySpark error-free, maintaining all functionality; the code is commented but not exaplined; do not use spark.sql() function and define properly columns; PySpark code is more efficient than SQL one while keeping it readable and concise. 

@@Instruction 
Translate the following code from SQL to PySpark:
MERGE INTO ddwh01_dw.TM_DESC_DESCRIPTION TARGET USING
  (SELECT 'MAKT' DESC_CD_TABLE ,
                 'Material' DESC_CD_TABLE_DESC ,
                            MATNR DESC_CD_CODE ,
                            SPRAS DESC_CD_LANGUAGE ,
                            1 DESC_CD_POSITION ,
                            MAKTX DESC_CD_DESCRIPTION1 ,
                            MAKTG DESC_CD_DESCRIPTION2 ,
                            NULL DESC_CD_DETAIL1 ,
                                 NULL DESC_CD_DETAIL2 ,
                                      NULL DESC_CD_DETAIL3 ,
                                           'WW GPP' DESC_CD_SOURCE_SYSTEM
   FROM ddwh00_sa.TS_MAKT0001_WW_GPP SA
   UNION ALL SELECT 'EQKT' DESC_CD_TABLE ,
                           'Equipment' DESC_CD_TABLE_DESC ,
                                       EQUNR DESC_CD_CODE ,
                                       SPRAS DESC_CD_LANGUAGE ,
                                       1 DESC_CD_POSITION ,
                                       EQKTX DESC_CD_DESCRIPTION1 ,
                                       EQKTU DESC_CD_DESCRIPTION2 ,
                                       KZLTX DESC_CD_DETAIL1 ,
                                       TXASP DESC_CD_DETAIL2 ,
                                       TO_CHAR(TEXTCHANGEDDATETIME) DESC_CD_DETAIL3 ,
                                       'WW GPP' DESC_CD_SOURCE_SYSTEM
   FROM ddwh00_sa.TS_EQKT0001_WW_GPP SA2
   UNION ALL SELECT 'T005T' DESC_CD_TABLE ,
                            'Country' DESC_CD_TABLE_DESC ,
                                      LAND1 DESC_CD_CODE ,
                                      SPRAS DESC_CD_LANGUAGE ,
                                      1 DESC_CD_POSITION ,
                                      LANDX DESC_CD_DESCRIPTION1 ,
                                      LANDX50 DESC_CD_DESCRIPTION2 ,
                                      PRQ_SPREGT DESC_CD_DETAIL1 ,
                                      NATIO DESC_CD_DETAIL2 ,
                                      NATIO50 DESC_CD_DETAIL3 ,
                                      'WW GPP' DESC_CD_SOURCE_SYSTEM
   FROM ddwh00_sa.TS_T0050002_WW_GPP SA3
   UNION ALL SELECT 'T023T' DESC_CD_TABLE ,
                            'Commodity' DESC_CD_TABLE_DESC ,
                                        MATKL DESC_CD_CODE ,
                                        SPRAS DESC_CD_LANGUAGE ,
                                        1 DESC_CD_POSITION ,
                                        WGBEZ DESC_CD_DESCRIPTION1 ,
                                        WGBEZ60 DESC_CD_DESCRIPTION2 ,
                                        NULL DESC_CD_DETAIL1 ,
                                             NULL DESC_CD_DETAIL2 ,
                                                  NULL DESC_CD_DETAIL3 ,
                                                       'WW GPP' DESC_CD_SOURCE_SYSTEM
   FROM ddwh00_sa.TS_T0230002_WW_GPP SA4
   UNION ALL SELECT 'T052U' DESC_CD_TABLE ,
                            'Payment Condition' DESC_CD_TABLE_DESC ,
                                                CONCAT(ZTERM, NVL(ZTAGG, -1)) DESC_CD_CODE ,
                                                SPRAS DESC_CD_LANGUAGE ,
                                                1 DESC_CD_POSITION ,
                                                TEXT1 DESC_CD_DESCRIPTION1 ,
                                                NULL DESC_CD_DESCRIPTION2 ,
                                                     NULL DESC_CD_DETAIL1 ,
                                                          NULL DESC_CD_DETAIL2 ,
                                                               NULL DESC_CD_DETAIL3 ,
                                                                    'WW GPP' DESC_CD_SOURCE_SYSTEM
   FROM ddwh00_sa.TS_T0520002_WW_GPP SA5
   UNION ALL SELECT 'TINCT' DESC_CD_TABLE ,
                            'Incoterms' DESC_CD_TABLE_DESC ,
                                        INCO1 DESC_CD_CODE ,
                                        SPRAS DESC_CD_LANGUAGE ,
                                        1 DESC_CD_POSITION ,
                                        BEZEI DESC_CD_DESCRIPTION1 ,
                                        NULL DESC_CD_DESCRIPTION2 ,
                                             NULL DESC_CD_DETAIL1 ,
                                                  NULL DESC_CD_DETAIL2 ,
                                                       NULL DESC_CD_DETAIL3 ,
                                                            'WW GPP' DESC_CD_SOURCE_SYSTEM
   FROM ddwh00_sa.TS_TINC0002_WW_GPP SA6
   UNION ALL SELECT 'SWOR' DESC_CD_TABLE ,
                           'Hierarchy Material Group' DESC_CD_TABLE_DESC ,
                                                      TO_CHAR(CLINT) DESC_CD_CODE ,
                                                      SPRAS DESC_CD_LANGUAGE ,
                                                      KLPOS DESC_CD_POSITION ,
                                                      KSCHL DESC_CD_DESCRIPTION1 ,
                                                      KSCHG DESC_CD_DESCRIPTION2 ,
                                                      NULL DESC_CD_DETAIL1 ,
                                                           NULL DESC_CD_DETAIL2 ,
                                                                NULL DESC_CD_DETAIL3 ,
                                                                     'WW GPP' DESC_CD_SOURCE_SYSTEM
   FROM ddwh00_sa.TS_SWOR00001_WW_GPP SA7 MINUS SELECT DESC_CD_TABLE ,
                                                       DESC_CD_TABLE_DESC ,
                                                       DESC_CD_CODE ,
                                                       DESC_CD_LANGUAGE ,
                                                       DESC_CD_POSITION ,
                                                       DESC_CD_DESCRIPTION1 ,
                                                       DESC_CD_DESCRIPTION2 ,
                                                       DESC_CD_DETAIL1 ,
                                                       DESC_CD_DETAIL2 ,
                                                       DESC_CD_DETAIL3 ,
                                                       DESC_CD_SOURCE_SYSTEM
   FROM ddwh01_dw.TM_DESC_DESCRIPTION DW) SA ON (TARGET.DESC_CD_TABLE = SA.DESC_CD_TABLE
                                                 AND TARGET.DESC_CD_CODE = SA.DESC_CD_CODE
                                                 AND TARGET.DESC_CD_LANGUAGE = SA.DESC_CD_LANGUAGE
                                                 AND NVL(TARGET.DESC_CD_POSITION, -1) = NVL(SA.DESC_CD_POSITION, -1)) WHEN MATCHED THEN
UPDATE
SET TARGET.DESC_CD_DESCRIPTION1 = SA.DESC_CD_DESCRIPTION1 ,
    TARGET.DESC_CD_DESCRIPTION2 = SA.DESC_CD_DESCRIPTION2 ,
    TARGET.DESC_CD_DETAIL1 = SA.DESC_CD_DETAIL1 ,
    TARGET.DESC_CD_DETAIL2 = SA.DESC_CD_DETAIL2 ,
    TARGET.DESC_CD_DETAIL3 = SA.DESC_CD_DETAIL3 ,
    TARGET.DESC_DT_LAST_MODIFY = SYSDATE ,
    TARGET.DESC_ID_BATCH_LAST_MODIFY = NVL(p_ELT_ID_BATCH, n_ELT_ID_JOB_LOG) WHEN NOT MATCHED THEN
INSERT (DESC_ID_TABLE ,
        DESC_CD_TABLE ,
        DESC_CD_TABLE_DESC ,
        DESC_CD_CODE ,
        DESC_CD_LANGUAGE ,
        DESC_CD_POSITION ,
        DESC_CD_DESCRIPTION1 ,
        DESC_CD_DESCRIPTION2 ,
        DESC_CD_DETAIL1 ,
        DESC_CD_DETAIL2 ,
        DESC_CD_DETAIL3 ,
        DESC_CD_SOURCE_SYSTEM ,
        DESC_DT_INSERT ,
        DESC_DT_LAST_MODIFY ,
        DESC_ID_BATCH_ID ,
        DESC_ID_BATCH_LAST_MODIFY ,
        DESC_DT_START_VALIDITY ,
        DESC_DT_END_VALIDITY)
VALUES (DDWH01_DW.SEQ_TM_DESC.NEXTVAL , SA.DESC_CD_TABLE , SA.DESC_CD_TABLE_DESC , SA.DESC_CD_CODE , SA.DESC_CD_LANGUAGE , SA.DESC_CD_POSITION , SA.DESC_CD_DESCRIPTION1 , SA.DESC_CD_DESCRIPTION2 , SA.DESC_CD_DETAIL1 , SA.DESC_CD_DETAIL2 , SA.DESC_CD_DETAIL3 , SA.DESC_CD_SOURCE_SYSTEM , SYSDATE , SYSDATE , NVL(p_ELT_ID_BATCH, n_ELT_ID_JOB_LOG) , NVL(p_ELT_ID_BATCH, n_ELT_ID_JOB_LOG) , TO_DATE('01/01/1900', 'DD/MM/YYYY') , TO_DATE('31/12/9999', 'DD/MM/YYYY') ); 
@@Response
PySpark does not support MERGE INTO statement directly, so you'll need to use the UPDATE and INSERT INTO statements separately. Here's how you can translate the SQL code into PySpark:

```python
from pyspark.sql import functions as F
from pyspark.sql.window import Window

# Define the window function
window = Window.partitionBy("DESC_CD_TABLE", "DESC_CD_CODE", "DESC_CD_LANGUAGE")

# Define the dataframes
sa_df = # your SA dataframe
dw_df = # your DW dataframe

# Update the target dataframe
updated_df = dw_df.join(sa_df, ["DESC_CD_TABLE", "DESC_CD_CODE", "DESC_CD_LANGUAGE", "DESC_CD_POSITION"], "left_anti")
updated_df = updated_df.withColumn("DESC_DT_LAST_MODIFY", F.current_timestamp())
updated_df = updated_df.withColumn("DESC_ID_BATCH_LAST_MODIFY", F.lit(p_ELT_ID_BATCH if p_ELT_ID_BATCH is not None else n_ELT_ID_JOB_LOG))
updated_df = updated_df.join(sa_df, ["DESC_CD_TABLE", "DESC_CD_CODE", "DESC_CD_LANGUAGE", "DESC_CD_POSITION"], "left")
updated_df = updated_df.withColumn("DESC_ID_TABLE", F.nextval(DDWH01_DW.SEQ_TM_DESC))
updated_df = updated_df.withColumn("DESC_DT_INSERT", F.current_timestamp())
updated_df = updated_df.withColumn("DESC_ID_BATCH_ID", F.lit(p_ELT_ID_BATCH if p_ELT_ID_BATCH is not None else n_ELT_ID_JOB_LOG))
updated_df = updated_df.withColumn("DESC_DT_START_VALIDITY", F.lit("1900-01-01"))
updated_df = updated_df.withColumn("DESC_DT_END_VALIDITY", F.lit("9999-12-31"))
updated_df = updated_df.drop("DESC_CD_POSITION")

# Insert the new dataframe
insert_df = sa_df.join(dw_df, ["DESC_CD_TABLE", "DESC_CD_CODE", "DESC_CD_LANGUAGE", "DESC_CD_POSITION"], "left_anti")
insert_df = insert_df.withColumn("DESC_ID_TABLE", F.nextval(DDWH01_DW.SEQ_TM_DESC))
insert_df = insert_df.withColumn("DESC_DT_INSERT", F.current_timestamp())
insert_df = insert_df.withColumn("DESC_DT_LAST_MODIFY", F.current_timestamp())
insert_df = insert_df.withColumn("DESC_ID_BATCH_ID", F.lit(p_ELT_ID_BATCH if p_ELT_ID_BATCH is not None else n_ELT_ID_JOB_LOG))
insert_df = insert_df.withColumn("DESC_ID_BATCH_LAST_MODIFY", F.lit(p_ELT_ID_BATCH if p_ELT_ID_BATCH is not None else n_ELT_ID_JOB_LOG))
insert_df = insert_df.withColumn("DESC_DT_START_VALIDITY", F.lit("1900-01-01"))
insert_df = insert_df.withColumn("DESC_DT_END_VALIDITY", F.lit("9999-12-31"))
insert_df = insert_df.drop("DESC_CD_POSITION")

# Write to the target table
updated_df.write.mode("overwrite").insertInto("ddwh01_dw.TM_DESC_DESCRIPTION")
insert_df.write.mode("overwrite").insertInto("ddwh01_dw.TM_DESC_DESCRIPTION")
```

Please replace `# your SA dataframe` and `# your DW dataframe` with your actual dataframes.

Note: This code assumes that you have defined the sequence `DDWH01_DW.SEQ_TM_DESC` and that `p_ELT_ID_BATCH` and `n_ELT_ID_JOB_LOG` are defined.