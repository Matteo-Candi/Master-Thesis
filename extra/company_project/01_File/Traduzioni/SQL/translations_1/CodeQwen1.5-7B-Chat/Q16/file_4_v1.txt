system
You are an expert in translating code from SQL to PySpark. Translate anyway at the best that you can. Return just the code with comments. Do not explain the code.
user
Translate the following code from SQL to PySpark:
MERGE INTO ddwh01_dw.TM_DESC_DESCRIPTION TARGET USING
  (SELECT 'MAKT' DESC_CD_TABLE ,
                 'Material' DESC_CD_TABLE_DESC ,
                            MATNR DESC_CD_CODE ,
                            SPRAS DESC_CD_LANGUAGE ,
                            1 DESC_CD_POSITION ,
                            MAKTX DESC_CD_DESCRIPTION1 ,
                            MAKTG DESC_CD_DESCRIPTION2 ,
                            NULL DESC_CD_DETAIL1 ,
                                 NULL DESC_CD_DETAIL2 ,
                                      NULL DESC_CD_DETAIL3 ,
                                           'WW GPP' DESC_CD_SOURCE_SYSTEM
   FROM ddwh00_sa.TS_MAKT0001_WW_GPP SA
   UNION ALL SELECT 'EQKT' DESC_CD_TABLE ,
                           'Equipment' DESC_CD_TABLE_DESC ,
                                       EQUNR DESC_CD_CODE ,
                                       SPRAS DESC_CD_LANGUAGE ,
                                       1 DESC_CD_POSITION ,
                                       EQKTX DESC_CD_DESCRIPTION1 ,
                                       EQKTU DESC_CD_DESCRIPTION2 ,
                                       KZLTX DESC_CD_DETAIL1 ,
                                       TXASP DESC_CD_DETAIL2 ,
                                       TO_CHAR(TEXTCHANGEDDATETIME) DESC_CD_DETAIL3 ,
                                       'WW GPP' DESC_CD_SOURCE_SYSTEM
   FROM ddwh00_sa.TS_EQKT0001_WW_GPP SA2
   UNION ALL SELECT 'T005T' DESC_CD_TABLE ,
                            'Country' DESC_CD_TABLE_DESC ,
                                      LAND1 DESC_CD_CODE ,
                                      SPRAS DESC_CD_LANGUAGE ,
                                      1 DESC_CD_POSITION ,
                                      LANDX DESC_CD_DESCRIPTION1 ,
                                      LANDX50 DESC_CD_DESCRIPTION2 ,
                                      PRQ_SPREGT DESC_CD_DETAIL1 ,
                                      NATIO DESC_CD_DETAIL2 ,
                                      NATIO50 DESC_CD_DETAIL3 ,
                                      'WW GPP' DESC_CD_SOURCE_SYSTEM
   FROM ddwh00_sa.TS_T0050002_WW_GPP SA3
   UNION ALL SELECT 'T023T' DESC_CD_TABLE ,
                            'Commodity' DESC_CD_TABLE_DESC ,
                                        MATKL DESC_CD_CODE ,
                                        SPRAS DESC_CD_LANGUAGE ,
                                        1 DESC_CD_POSITION ,
                                        WGBEZ DESC_CD_DESCRIPTION1 ,
                                        WGBEZ60 DESC_CD_DESCRIPTION2 ,
                                        NULL DESC_CD_DETAIL1 ,
                                             NULL DESC_CD_DETAIL2 ,
                                                  NULL DESC_CD_DETAIL3 ,
                                                       'WW GPP' DESC_CD_SOURCE_SYSTEM
   FROM ddwh00_sa.TS_T0230002_WW_GPP SA4
   UNION ALL SELECT 'T052U' DESC_CD_TABLE ,
                            'Payment Condition' DESC_CD_TABLE_DESC ,
                                                CONCAT(ZTERM, NVL(ZTAGG, -1)) DESC_CD_CODE ,
                                                SPRAS DESC_CD_LANGUAGE ,
                                                1 DESC_CD_POSITION ,
                                                TEXT1 DESC_CD_DESCRIPTION1 ,
                                                NULL DESC_CD_DESCRIPTION2 ,
                                                     NULL DESC_CD_DETAIL1 ,
                                                          NULL DESC_CD_DETAIL2 ,
                                                               NULL DESC_CD_DETAIL3 ,
                                                                    'WW GPP' DESC_CD_SOURCE_SYSTEM
   FROM ddwh00_sa.TS_T0520002_WW_GPP SA5
   UNION ALL SELECT 'TINCT' DESC_CD_TABLE ,
                            'Incoterms' DESC_CD_TABLE_DESC ,
                                        INCO1 DESC_CD_CODE ,
                                        SPRAS DESC_CD_LANGUAGE ,
                                        1 DESC_CD_POSITION ,
                                        BEZEI DESC_CD_DESCRIPTION1 ,
                                        NULL DESC_CD_DESCRIPTION2 ,
                                             NULL DESC_CD_DETAIL1 ,
                                                  NULL DESC_CD_DETAIL2 ,
                                                       NULL DESC_CD_DETAIL3 ,
                                                            'WW GPP' DESC_CD_SOURCE_SYSTEM
   FROM ddwh00_sa.TS_TINC0002_WW_GPP SA6
   UNION ALL SELECT 'SWOR' DESC_CD_TABLE ,
                           'Hierarchy Material Group' DESC_CD_TABLE_DESC ,
                                                      TO_CHAR(CLINT) DESC_CD_CODE ,
                                                      SPRAS DESC_CD_LANGUAGE ,
                                                      KLPOS DESC_CD_POSITION ,
                                                      KSCHL DESC_CD_DESCRIPTION1 ,
                                                      KSCHG DESC_CD_DESCRIPTION2 ,
                                                      NULL DESC_CD_DETAIL1 ,
                                                           NULL DESC_CD_DETAIL2 ,
                                                                NULL DESC_CD_DETAIL3 ,
                                                                     'WW GPP' DESC_CD_SOURCE_SYSTEM
   FROM ddwh00_sa.TS_SWOR00001_WW_GPP SA7 MINUS SELECT DESC_CD_TABLE ,
                                                       DESC_CD_TABLE_DESC ,
                                                       DESC_CD_CODE ,
                                                       DESC_CD_LANGUAGE ,
                                                       DESC_CD_POSITION ,
                                                       DESC_CD_DESCRIPTION1 ,
                                                       DESC_CD_DESCRIPTION2 ,
                                                       DESC_CD_DETAIL1 ,
                                                       DESC_CD_DETAIL2 ,
                                                       DESC_CD_DETAIL3 ,
                                                       DESC_CD_SOURCE_SYSTEM
   FROM ddwh01_dw.TM_DESC_DESCRIPTION DW) SA ON (TARGET.DESC_CD_TABLE = SA.DESC_CD_TABLE
                                                 AND TARGET.DESC_CD_CODE = SA.DESC_CD_CODE
                                                 AND TARGET.DESC_CD_LANGUAGE = SA.DESC_CD_LANGUAGE
                                                 AND NVL(TARGET.DESC_CD_POSITION, -1) = NVL(SA.DESC_CD_POSITION, -1)) WHEN MATCHED THEN
UPDATE
SET TARGET.DESC_CD_DESCRIPTION1 = SA.DESC_CD_DESCRIPTION1 ,
    TARGET.DESC_CD_DESCRIPTION2 = SA.DESC_CD_DESCRIPTION2 ,
    TARGET.DESC_CD_DETAIL1 = SA.DESC_CD_DETAIL1 ,
    TARGET.DESC_CD_DETAIL2 = SA.DESC_CD_DETAIL2 ,
    TARGET.DESC_CD_DETAIL3 = SA.DESC_CD_DETAIL3 ,
    TARGET.DESC_DT_LAST_MODIFY = SYSDATE ,
    TARGET.DESC_ID_BATCH_LAST_MODIFY = NVL(p_ELT_ID_BATCH, n_ELT_ID_JOB_LOG) WHEN NOT MATCHED THEN
INSERT (DESC_ID_TABLE ,
        DESC_CD_TABLE ,
        DESC_CD_TABLE_DESC ,
        DESC_CD_CODE ,
        DESC_CD_LANGUAGE ,
        DESC_CD_POSITION ,
        DESC_CD_DESCRIPTION1 ,
        DESC_CD_DESCRIPTION2 ,
        DESC_CD_DETAIL1 ,
        DESC_CD_DETAIL2 ,
        DESC_CD_DETAIL3 ,
        DESC_CD_SOURCE_SYSTEM ,
        DESC_DT_INSERT ,
        DESC_DT_LAST_MODIFY ,
        DESC_ID_BATCH_ID ,
        DESC_ID_BATCH_LAST_MODIFY ,
        DESC_DT_START_VALIDITY ,
        DESC_DT_END_VALIDITY)
VALUES (DDWH01_DW.SEQ_TM_DESC.NEXTVAL , SA.DESC_CD_TABLE , SA.DESC_CD_TABLE_DESC , SA.DESC_CD_CODE , SA.DESC_CD_LANGUAGE , SA.DESC_CD_POSITION , SA.DESC_CD_DESCRIPTION1 , SA.DESC_CD_DESCRIPTION2 , SA.DESC_CD_DETAIL1 , SA.DESC_CD_DETAIL2 , SA.DESC_CD_DETAIL3 , SA.DESC_CD_SOURCE_SYSTEM , SYSDATE , SYSDATE , NVL(p_ELT_ID_BATCH, n_ELT_ID_JOB_LOG) , NVL(p_ELT_ID_BATCH, n_ELT_ID_JOB_LOG) , TO_DATE('01/01/1900', 'DD/MM/YYYY') , TO_DATE('31/12/9999', 'DD/MM/YYYY') );
assistant
Here is the translated PySpark code:

```python
from pyspark.sql.functions import col, concat, nvl, to_date, sys_date, lit

# Load data from source tables
makt_df = spark.sql("SELECT 'MAKT' DESC_CD_TABLE , 'Material' DESC_CD_TABLE_DESC , MATNR DESC_CD_CODE , SPRAS DESC_CD_LANGUAGE , 1 DESC_CD_POSITION , MAKTX DESC_CD_DESCRIPTION1 , MAKTG DESC_CD_DESCRIPTION2 , NULL DESC_CD_DETAIL1 , NULL DESC_CD_DETAIL2 , NULL DESC_CD_DETAIL3 , 'WW GPP' DESC_CD_SOURCE_SYSTEM FROM ddwh00_sa.TS_MAKT0001_WW_GPP SA")
eqkt_df = spark.sql("SELECT 'EQKT' DESC_CD_TABLE , 'Equipment' DESC_CD_TABLE_DESC , EQUNR DESC_CD_CODE , SPRAS DESC_CD_LANGUAGE , 1 DESC_CD_POSITION , EQKTX DESC_CD_DESCRIPTION1 , EQKTU DESC_CD_DESCRIPTION2 , KZLTX DESC_CD_DETAIL1 , TXASP DESC_CD_DETAIL2 , TO_CHAR(TEXTCHANGEDDATETIME) DESC_CD_DETAIL3 , 'WW GPP' DESC_CD_SOURCE_SYSTEM FROM ddwh00_sa.TS_EQKT0001_WW_GPP SA2")
t005t_df = spark.sql("SELECT 'T005T' DESC_CD_TABLE , 'Country' DESC_CD_TABLE_DESC , LAND1 DESC_CD_CODE , SPRAS DESC_CD_LANGUAGE , 1 DESC_CD_POSITION , LANDX DESC_CD_DESCRIPTION1 , LANDX50 DESC_CD_DESCRIPTION2 , PRQ_SPREGT DESC_CD_DETAIL1 , NATIO DESC_CD_DETAIL2 , NATIO50 DESC_CD_DETAIL3 , 'WW GPP' DESC_CD_SOURCE_SYSTEM FROM ddwh00_sa.TS_T0050002_WW_GPP SA3")
t023t_df = spark.sql("SELECT 'T023T' DESC_CD_TABLE , 'Commodity' DESC_CD_TABLE_DESC , MATKL DESC_CD_CODE , SPRAS DESC_CD_LANGUAGE , 1 DESC_CD_POSITION , WGBEZ DESC_CD_DESCRIPTION1 , WGBEZ60 DESC_CD_DESCRIPTION2 , NULL DESC_CD_DETAIL1 , NULL DESC_CD_DETAIL2 , NULL DESC_CD_DETAIL3 , 'WW GPP' DESC_CD_SOURCE_SYSTEM FROM ddwh00_sa.TS_T0230002_WW_GPP SA4")
t052u_df = spark.sql("SELECT 'T052U' DESC_CD_TABLE , 'Payment Condition' DESC_CD_TABLE_DESC , CONCAT(ZTERM, NVL(ZTAGG, -1)) DESC_CD_CODE , SPRAS DESC_CD_LANGUAGE , 1 DESC_CD_POSITION , TEXT1 DESC_CD_DESCRIPTION1 , NULL DESC_CD_DESCRIPTION2 , NULL DESC_CD_DETAIL1 , NULL DESC_CD_DETAIL2 , NULL DESC_CD_DETAIL3 , 'WW GPP' DESC_CD_SOURCE_SYSTEM FROM ddwh00_sa.TS_T0520002_WW_GPP SA5")
tinct_df = spark.sql("SELECT 'TINCT' DESC_CD_TABLE , 'Incoterms' DESC_CD_TABLE_DESC , INCO1 DESC_CD_CODE , SPRAS DESC_CD_LANGUAGE , 1 DESC_CD_POSITION , BEZEI DESC_CD_DESCRIPTION1 , NULL DESC_CD_DESCRIPTION2 , NULL DESC_CD_DETAIL1 , NULL DESC_CD_DETAIL2 , NULL DESC_CD_DETAIL3 , 'WW GPP' DESC_CD_SOURCE_SYSTEM FROM ddwh00_sa.TS_TINC0002_WW_GPP SA6")
swor_df = spark.sql("SELECT 'SWOR' DESC_CD_TABLE , 'Hierarchy Material Group' DESC_CD_TABLE_DESC , TO_CHAR(CLINT) DESC_CD_CODE , SPRAS DESC_CD_LANGUAGE , KLPOS DESC_CD_POSITION , KSCHL DESC_CD_DESCRIPTION1 , KSCHG DESC_CD_DESCRIPTION2 , NULL DESC_CD_DETAIL1 , NULL DESC_CD_DETAIL2 , NULL DESC_CD_DETAIL3 , 'WW GPP' DESC_CD_SOURCE_SYSTEM FROM ddwh00_sa.TS_SWOR00001_WW_GPP SA7")

# Union all dataframes
all_df = makt_df.unionAll(eqkt_df).unionAll(t005t_df).unionAll(t023t_df).unionAll(t052u_df).unionAll(tinct_df).unionAll(swor_df)

# Perform left join and update/insert operations
dw_df = spark.table("ddwh01_dw.TM_DESC_DESCRIPTION")
merged_df = all_df.join(dw_df, 
                        (all_df.DESC_CD_TABLE == dw_df.DESC_CD_TABLE) & 
                        (all_df.DESC_CD_CODE == dw_df.DESC_CD_CODE) & 
                        (all_df.DESC_CD_LANGUAGE == dw_df.DESC_CD_LANGUAGE) & 
                        (nvl(all_df.DESC_CD_POSITION, -1) == nvl(dw_df.DESC_CD_POSITION, -1)), 
                        'left')

# Update existing rows
merged_df.filter(merged_df.DESC_ID_TABLE.isNotNull()).selectExpr("DESC_ID_TABLE", "DESC_CD_TABLE", "DESC_CD_TABLE_DESC", "DESC_CD_CODE", "DESC_CD_LANGUAGE", "DESC_CD_POSITION", "DESC_CD_DESCRIPTION1", "DESC_CD_DESCRIPTION2", "DESC_CD_DETAIL1", "DESC_CD_DETAIL2", "DESC_CD_DETAIL3", "DESC_CD_SOURCE_SYSTEM", "SYSDATE AS DESC_DT_LAST_MODIFY", "NVL(p_ELT_ID_BATCH, n_ELT_ID_JOB_LOG) AS DESC_ID_BATCH_LAST_MODIFY").write.mode('overwrite').insertInto("ddwh01_dw.TM_DESC_DESCRIPTION")

# Insert new rows
new_rows = merged_df.filter(merged_df.DESC_ID_TABLE.isNull()).selectExpr("DDWH01_DW.SEQ_TM_DESC.NEXTVAL AS DESC_ID_TABLE", "DESC_CD_TABLE", "DESC_CD_TABLE_DESC", "DESC_CD_CODE", "DESC_CD_LANGUAGE", "DESC_CD_POSITION", "DESC_CD_DESCRIPTION1", "DESC_CD_DESCRIPTION2", "DESC_CD_DETAIL1", "DESC_CD_DETAIL2", "DESC_CD_DETAIL3", "DESC_CD_SOURCE_SYSTEM", "SYSDATE AS DESC_DT_INSERT", "SYSDATE AS DESC_DT_LAST_MODIFY", "NVL(p_ELT_ID_BATCH, n_ELT_ID_JOB_LOG) AS DESC_ID_BATCH_ID", "NVL(p_ELT_ID_BATCH, n_ELT_ID_JOB_LOG) AS DESC_ID_BATCH_LAST_MODIFY", "TO_DATE('01/01/1900', 'DD/MM/YYYY') AS DESC_DT_START_VALIDITY", "TO_DATE('31/12/9999', 'DD/MM/YYYY') AS DESC_DT_END_VALIDITY")
new_rows.write.mode('append').insertInto("ddwh01_dw.TM_DESC_DESCRIPTION")
```

Please note that the PySpark code assumes that `p_ELT_ID_BATCH` and `n_ELT_ID_JOB_LOG` are defined variables. Also, the sequence `DDWH01_DW.SEQ_TM_DESC` is assumed to be already created in your PySpark environment.