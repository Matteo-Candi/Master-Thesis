You are an expert in translating code from SQL to PySpark error-free, maintaining all functionality; the code is commented but not exaplined; do not use spark.sql() function and define properly columns; PySpark code is more efficient than SQL one while keeping it readable and concise. 

@@Instruction 
Translate the following code from SQL to PySpark:
CREATE OR REPLACE
FORCE EDITIONABLE VIEW "DDWH02_SM"."VW_EKKO_PURCH_DOC_HEADER_AGCE" ("EKKO_DT_LAST_MODIFY",
                                                                    "EKKO_ID_PURCH_DOC_HEADER_GPP",
                                                                    "EKKO_CD_PURCH_DOC_NBR",
                                                                    "EKKO_NR_TOT_VAL_OF_RELEASE",
                                                                    "EKKO_DT_PURCH_DOC_DATE",
                                                                    "EKKO_DT_RECORD_CREATED_ON",
                                                                    "EKKO_CD_PURCH_GRP",
                                                                    "EKKO_FL_TAKE_PURCH_GRP",
                                                                    "EKKO_CD_VENDOR_ACCOUNT_NBR",
                                                                    "EKKO_CD_DOC_PROCESS_STATE",
                                                                    "EKKO_CD_PURCH_DOC_CATEGORY",
                                                                    "EKKO_CD_PURCH_DOCTYPE",
                                                                    "EKKO_DT_CONTRACT_START_DATE",
                                                                    "EKKO_NR_CHG_TIMESTAMP",
                                                                    "EKKO_DT_CONTRACT_END_DATE",
                                                                    "EKKO_CD_PURCH_DOC_STATUS",
                                                                    "EKKO_NR_CURRENCY_KEY",
                                                                    "EKKO_CD_PURCH_AGREEMENT_NBR",
                                                                    "EKKO_CD_OBJ_CREATED_BY",
                                                                    "EKKO_CD_INCOTERMS_PART_1",
                                                                    "EKKO_CD_INCOTERMS_PART_2",
                                                                    "EKKO_CD_TERMS_OF_PAYMENT_1",
                                                                    "EKKO_CD_PURCH_ORG_1",
                                                                    "EKKO_CD_COMPANY_CODE",
                                                                    "EKKO_CD_REMARK_1",
                                                                    "EKKO_NR_PURCH_DOC_YEAR",
                                                                    "PLBR_DS_PLANT_SEGMENT",
                                                                    "ODAG_PODOCUMENTTYPE",
                                                                    "ODAG_SUPPLIERCODE",
                                                                    "EKKO_DT_RETENTION_YEAR",
                                                                    "ODAG_PODOCUMENTYEAR",
                                                                    "EKKO_CD_PURCH_DOC_NBR10",
                                                                    "EKKO_CD_SUPPLIER_TYPE") AS
SELECT EKKO_DT_LAST_MODIFY,
       EKKO_ID_PURCH_DOC_HEADER_GPP,
       EKKO_CD_PURCH_DOC_NBR,
       EKKO_NR_TOT_VAL_OF_RELEASE,
       EKKO_DT_PURCH_DOC_DATE,
       EKKO_DT_RECORD_CREATED_ON,
       EKKO_CD_PURCH_GRP,
       EKKO_FL_TAKE_PURCH_GRP,
       EKKO_CD_VENDOR_ACCOUNT_NBR,
       EKKO_CD_DOC_PROCESS_STATE,
       EKKO_CD_PURCH_DOC_CATEGORY,
       EKKO_CD_PURCH_DOCTYPE,
       EKKO_DT_CONTRACT_START_DATE,
       EKKO_NR_CHG_TIMESTAMP,
       EKKO_DT_CONTRACT_END_DATE,
       EKKO_CD_PURCH_DOC_STATUS,
       EKKO_NR_CURRENCY_KEY,
       EKKO_CD_PURCH_AGREEMENT_NBR,
       EKKO_CD_OBJ_CREATED_BY,
       EKKO_CD_INCOTERMS_PART_1,
       EKKO_CD_INCOTERMS_PART_2,
       EKKO_CD_TERMS_OF_PAYMENT_1,
       EKKO_CD_PURCH_ORG_1,
       EKKO_CD_COMPANY_CODE,
       EKKO_CD_REMARK_1,
       TO_NUMBER(TO_CHAR(EKKO_DT_PURCH_DOC_DATE, 'YYYY')) AS EKKO_NR_PURCH_DOC_YEAR,
       ' ' AS PLBR_DS_PLANT_SEGMENT,
       EKKO_CD_PURCH_DOCTYPE AS ODAG_PODOCUMENTTYPE,
       EKKO_CD_VENDOR_ACCOUNT_NBR AS ODAG_SUPPLIERCODE,
       TO_CHAR(COALESCE(EKKO_DT_CONTRACT_END_DATE, EKKO_DT_RECORD_CREATED_ON), 'YYYY') AS EKKO_DT_RETENTION_YEAR,
       TO_CHAR(EKKO_DT_PURCH_DOC_DATE, 'YYYY') AS ODAG_PODOCUMENTYEAR,
       to_Char(substr('0000000000' || EKKO_CD_PURCH_DOC_NBR, -10)) AS EKKO_CD_PURCH_DOC_NBR10,
       Supplier_Type AS EKKO_CD_SUPPLIER_TYPE
FROM ddwh01_dw.TT_EKKO_PURCH_DOC_HEADER_GPP
INNER JOIN
  (SELECT DISTINCT EKPO_CD_PO_NBR
   FROM ddwh01_dw.TT_EKPO_PURCH_DOC_ITEM_GPP
   INNER JOIN ddwh01_dw.TD_PLBR_PLANT_BRANCHES ON EKPO_CD_PLANT = PLBR_CD_PLANT
   AND PLBR_DS_PLANT_SEGMENT IN ('AG',
                                 'CE',
                                 '-1',
                                 'AM',
                                 'AS')
   AND (EKPO_CD_PLANT NOT IN ('FA01',
                              'FB01',
                              'IA01')
        OR EKPO_CD_PLANT NOt like '00%')) AGCE ON EKKO_CD_PURCH_DOC_NBR = AGCE.EKPO_CD_PO_NBR
LEFT JOIN
  (SELECT DISTINCT SUPM_CD_ACCOUNT_NBR,
                   CASE
                       WHEN LENGTH(SUPM_CD_COMP_TRADING_PARTNER) > 1 THEN 'Intercompany'
                       ELSE 'Third Party'
                   END AS Supplier_Type
   FROM ddwh01_dw.TM_SUPM_SUPPLIER_GPP) SUPM ON EKKO_CD_VENDOR_ACCOUNT_NBR = SUPM.SUPM_CD_ACCOUNT_NBR; 
@@Response
Here is the PySpark equivalent of your SQL transformation. Please note that this assumes that all the tables have been loaded into PySpark DataFrame objects with the corresponding names. You've had some table names and columns renamed to ensure they were in correct format for the PySpark DataFrame.

```python
from pyspark.sql import functions as F

vw_ekko_df = (ddwh01_dw.TT_EKKO_PURCH_DOC_HEADER_GPP
                .join(
                    ddwh01_dw.TT_EKPO_PURCH_DOC_ITEM_GPP.join(
                        ddwh01_dw.TD_PLBR_PLANT_BRANCHES.filter(
                            (ddwh01_dw.TD_PLBR_PLANT_BRANCHES['PLBR_DS_PLANT_SEGMENT'].isin(['AG', 'CE', '-1', 'AM', 'AS'])) &
                            ((ddwh01_dw.TD_PLBR_PLANT_BRANCHES['EKPO_CD_PLANT'].isin(['FA01', 'FB01', 'IA01'])) |
                            (~ddwh01_dw.TD_PLBR_PLANT_BRANCHES['EKPO_CD_PLANT'].startswith('00')))
                        ).select('EKPO_CD_PO_NBR'), 
                        ddwh01_dw.TT_EKKO_PURCH_DOC_HEADER_GPP['EKKO_CD_PURCH_DOC_NBR'] == ddwh01_dw.TT_EKPO_PURCH_DOC_ITEM_GPP['EKPO_CD_PO_NBR'], 'inner'
                    ).select('EKKO_CD_PURCH_DOC_NBR'),
                    ddwh01_dw.TM_SUPM_SUPPLIER_GPP['SUPM_CD_ACCOUNT_NBR'] == ddwh01_dw.TT_EKKO_PURCH_DOC_HEADER_GPP['EKKO_CD_VENDOR_ACCOUNT_NBR'], 'left'
                ).select(
                    'EKKO_CD_DOC_PROCESS_STATE',
                    'EKKO_DT_CONTRACT_START_DATE',
                    'EKKO_DT_CONTRACT_END_DATE',
                    'EKKO_DT_LAST_MODIFY',
                    'EKKO_DT_PURCH_DOC_DATE',
                    'EKKO_DT_RECORD_CREATED_ON',
                    'EKKO_NR_TOT_VAL_OF_RELEASE',
                    'PLBR_DS_PLANT_SEGMENT',
                    'EKKO_CD_INCOTERMS_PART_1',
                    'EKKO_CD_INCOTERMS_PART_2',
                    'EKKO_CD_OBJ_CREATED_BY',
                    'EKKO_CD_PURCH_AGREEMENT_NBR',
                    'EKKO_CD_PURCH_DOCTYPE',
                    'EKKO_CD_PURCH_ORG_1',
                    'EKKO_CD_PURCH_DOC_STATUS',
                    'EKKO_CD_TERMS_OF_PAYMENT_1',
                    'EKKO_CD_REMARK_1',
                    'EKKO_CD_VENDOR_ACCOUNT_NBR',
                    'SUPM_CD_COMP_TRADING_PARTNER',
                    'EKKO_CD_COMPANY_CODE'
                )
                    .withColumn('EKKO_NR_CHG_TIMESTAMP', F.current_timestamp())
                    .withColumn('EKKO_NR_CURRENCY_KEY', F.lit(1))
                    .withColumn('EKKO_CD_PURCH_DOC_NBR10', F.expr("lpad(EKKO_CD_PURCH_DOC_NBR, 10, '0')"))
                    .withColumn('EKKO_NR_PURCH_DOC_YEAR', F.expr("date_format(EKKO_DT_PURCH_DOC_DATE,'yyyy')"))
                    .withColumn('EKKO_DT_RETENTION_YEAR', F.when(F.col('EKKO_DT_CONTRACT_END_DATE').isNotNull(), F.expr("date_format(EKKO_DT_CONTRACT_END_DATE,'yyyy')")).otherwise(F.expr("date_format(EKKO_DT_RECORD_CREATED_ON,'yyyy')")))
                    .withColumn('ODAG_PODOCUMENTYEAR', F.expr("date_format(EKKO_DT_PURCH_DOC_DATE,'yyyy')"))
                    .withColumn('ODAG_PODOCUMENTTYPE', F.col('EKKO_CD_PURCH_DOCTYPE')) 
                    .withColumn('ODAG_SUPPLIERCODE', F.col('EKKO_CD_VENDOR_ACCOUNT_NBR')) 
                )
```

One key point to note is that PySpark's SQL functions aren't as powerful as those in SQL, so the SQL functionality like case when then end for the Supplier_Type isn't supported in PySpark's SQL. A DataFrame operation can provide similar results:

```python
from pyspark.sql.functions import when

vw_ekko_df = vw_ekko_df.withColumn('SUPPLIER_TYPE', 
    when(len(vw_ekko_df.SUPM_CD_COMP_TRADING_PARTNER) > 1, 'Intercompany')
    .otherwise('Third Party')
)
```

Please ensure to handle missing values and data types as needed, it's done only for demonstration purposes.