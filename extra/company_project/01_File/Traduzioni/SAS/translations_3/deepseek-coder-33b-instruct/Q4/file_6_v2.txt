Below is the translated Python code. As I'm not sure what exactly you want to achieve with your SAS script, this Python version simply loads all the data from csv files into pandas DataFrames and performs basic operations on them such as filtering, merging, calculating means and sums etc., just like in your original SAS code:

```python
import os
import numpy as np
import pandas as pd
from glob import glob

# Define file paths
files_path = "C:/Users/mcandi/OneDrive â€“ KPMG/Desktop/project/SAS_scripts/Data_sets"

geografica_sezione_df = pd.read_csv(os.path.join(files_path, 'geografica_sezione.csv'))
etapop20b_df = pd.read_csv(os.path.join(files_path, 'etapop20b.csv'))
pop_eta_sez20b_df = pd.read_csv(os.path.join(files_path, 'pop_eta_sez20b.csv'))
Popolazione_eta_sesso_comune_df = pd.read_csv(os.path.join(files_path, 'Popolazione_eta_sesso_comune.csv'))
geografica_comune_df = pd.read_csv(os.path.join(files_path, 'geografica_comune.csv'))
nati_eta_madre_rapporto_df = pd.read_csv(os.path.join(files_path, 'nati_eta_madre_rapporto.csv'))

# Filter columns from DataFrame
base_sezione_df = geografica_sezione_df[['codice_sezione', 'codice_comune__str']]
x_base_eta_df = etapop20b_df.copy()  # Create a copy of the original DataFrame
# Apply function to each row in the DataFrame to create new column with specified conditions
x_base_eta_df['cleta'] = x_base_eta_df['eta'].apply(lambda age: f'{str(age)[:2]}-{str(age)[-1]}')
attuale_df = pop_eta_sez20b_df[['cods11', 'cleta', 'stmmas19', 'stmfem19']].rename(columns={'cods11':'codice_sezione','stmmas19':'stmmas','stmfem19':'stmfem'})
base_eta_df = x_base_eta_df.groupby(['cleta'])['eta'].count().reset_index(name="count")
base_sezione_eta_df = pd.merge(base_sezione_df, base_eta_df, how='left', on=['codice_sezione', 'cleta']).sort_values('codice_sezione')
attuale_df = attuale_df.sort_values(['codice_sezione', 'cleta'])
base_sezione_eta_df = pd.merge(base_sezione_eta_df, attuale_df, how='left', on=['codice_sezione', 'cleta']).sort_values('codice_sezione')
# More code here...
```
Please note that pandas and numpy are used for handling dataframes and mathematical operations. Also, your original SAS script was very long with multiple steps which were not covered in the python version above, so you would need to add similar merges and calculations for all the rest of the steps. 

For more specific and optimized translations, I'd recommend splitting up your original SAS script into smaller pieces (perhaps by each `proc` or each data step) and then translating those parts individually in this format. Also note that pandas library has different methods for equivalent operations than SAS. For instance, proc means is replaced with groupby operation and proc sort is replaced with sort_values function in Python.
