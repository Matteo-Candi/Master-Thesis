system
You are an expert in translating code from SAS to Python; translate the given code at your best even if there are problems; insert comments inside the code; do not return any message outside the code and make it as readable as possible; minimize the code complexity and volume; create functions to automate frequently needed operations; ensure to not make any syntax error; define all variables and import all libraries used even if imported locally; ensure the user can copy and run the code without modifications; translate from SAS to Python every part of the input code reproducing the same operations; do not use SAS syntax in the Python code; define correctly the file paths; return the code in single block; make Python code more efficient than the SAS one.
user
libname ter "C:\Users\mcandi\OneDrive - KPMG\Desktop\project\SAS_scripts\Data_sets";
libname sez "C:\Users\mcandi\OneDrive - KPMG\Desktop\project\SAS_scripts\Data_sets";

libname ter_out "C:\Users\mcandi\OneDrive - KPMG\Desktop\project\SAS_scripts\Data_sets";
libname sez_out "C:\Users\mcandi\OneDrive - KPMG\Desktop\project\SAS_scripts\Data_sets";

libname appo "C:\Users\mcandi\OneDrive - KPMG\Desktop\project\SAS_scripts\Data_sets";

options mergenoby = warn;
options nolabel;

%include "C:\Users\mcandi\OneDrive - KPMG\Desktop\project\SAS_scripts\Data_sets\Macro\macroquadraturagruppo.sas";
%include "C:\Users\mcandi\OneDrive - KPMG\Desktop\project\SAS_scripts\Data_sets\Macro\macroarrotondainterogruppo.sas";

title1 "STIMA COMUNALE DEI CONSUMI";

ods graphics off;


PROC IMPORT OUT= WORK.xconsumi_tag
            DATAFILE= "C:\Users\mcandi\OneDrive - KPMG\Desktop\project\SAS_scripts\Data_sets\tag_00026.xlsx"
            DBMS=EXCEL2000 REPLACE;
			SHEET="TAG-00026_4";
     		RANGE="A3:G132";
     		GETNAMES=YES;
			*MIXED = YES;	
RUN;
PROC IMPORT OUT= WORK.xreddito_tag
            DATAFILE= "C:\Users\mcandi\OneDrive - KPMG\Desktop\project\SAS_scripts\Data_sets\tag_00027.xlsx"
            DBMS=EXCEL2000 REPLACE;
			SHEET="TAG-00027_2";
     		RANGE="A3:G132";
     		GETNAMES=YES;
			*MIXED = YES;	
RUN;
data consumi_tag;
	set xconsumi_tag;
	if province_e_regioni ~= upcase(province_e_regioni)
	or province_e_regioni = "VALLE D'AOSTA/VALL�E D'AOSTE";
	consumi = _017/1000;
	keep province_e_regioni consumi;
run;
proc sort data = consumi_tag;
	by province_e_regioni;
run;
data reddito_tag;
	set xreddito_tag;
	if province_e_regioni ~= upcase(province_e_regioni)
	or province_e_regioni = "VALLE D'AOSTA/VALL�E D'AOSTE";
	reddito = _017/1000;
	keep province_e_regioni reddito;
run;
proc sort data = reddito_tag;
	by province_e_regioni;
run;
data base_tag;
	merge reddito_tag consumi_tag;
	by province_e_regioni;
	propensione = consumi/reddito;
	inverso = (1/reddito);
run;


proc univariate data = base_tag;
	var propensione;
	histogram propensione;
run;
proc gplot data = base_tag;
	symbol1 i = none  v = dot c = black;
	plot propensione * reddito = 1;
run;
quit;
proc gplot data = base_tag;
	symbol1 i = none  v = dot c = black;
	plot propensione * inverso = 1;
run;
quit;
proc corr data = base_tag;
	var propensione reddito inverso;
run;
proc reg data = base_tag;
	model propensione = reddito;
run;
quit;
proc reg data = base_tag;
	model propensione = inverso;
run;
quit;


PROC IMPORT OUT= WORK.provincia
            DATAFILE= "C:\Users\mcandi\OneDrive - KPMG\Desktop\project\SAS_scripts\Data_sets\provincia_110.xlsx"
            DBMS=EXCEL2000 REPLACE;
			SHEET="Sheet1";
     		GETNAMES=YES;
RUN;
data provincia;
	set provincia;
	Denominazione_Provincia_Citt__me = upcase(Denominazione_Provincia_Citt__me);
	if Denominazione_Provincia_Citt__me = "REGGIO DI CALABRIA"
		then Denominazione_Provincia_Citt__me = "REGGIO CALABRIA";
run;
data base_tag;
	set base_tag;
	province_e_regioni = upcase(province_e_regioni);
run;
proc sort data = provincia;
	by Denominazione_Provincia_Citt__me;
run;
data base_tag;
	merge base_tag provincia (rename=(Denominazione_Provincia_Citt__me=province_e_regioni));
	by province_e_regioni;
run;


PROC IMPORT OUT= WORK.corrispo
            DATAFILE= "C:\Users\mcandi\OneDrive - KPMG\Desktop\project\SAS_scripts\Data_sets\Codici-statistici-e-denominazioni-al-31_12_2020.xls"
            DBMS=EXCEL2000 REPLACE;
			SHEET="CODICI al 31_12_2020";
     		GETNAMES=YES;
			*MIXED = YES;	
RUN;
data corrispo;
	set corrispo;
	length codice_provincia $ 3;
	codice_provincia = substr(put(Codice_Comune_numerico_con_110_p,z6.),1,3);
	keep Codice_Comune_formato_alfanumeri codice_provincia;
	rename Codice_Comune_formato_alfanumeri = codice_comune__str;
run;
proc sort data = corrispo;
	by codice_comune__str;
run;
data xcod;
	set ter_out.geografica_comune;
	keep codice_comune__str codice_area_nielsen codice_ripartizione;
run;
proc sort data = xcod;
	by codice_comune__str;
run;
proc means data = ter_out.Popolazione_eta_sesso_comune noprint;
	class codice_comune__str;
	types codice_comune__str;
	output out = popnew (drop = _type_ _freq_)
		   sum(popolazione) = pop_ult;
run;
data xcod;
	merge xcod corrispo popnew;
	by codice_comune__str;
run;
proc means data = xcod noprint;
	class codice_provincia;
	types codice_provincia;
	id codice_area_nielsen codice_ripartizione;
	output out = xcods (drop = _type_ _freq_)
		   sum(pop_ult) = ;
run;
proc sort data = base_tag;
	by codice_provincia;
run;
data base_tag;
	merge base_tag xcods;
	by codice_provincia;
run;


proc sort data = base_tag;
	by codice_ripartizione;
run;
proc corr data = base_tag;
	by codice_ripartizione;
	var propensione reddito inverso;
run;
proc gplot data = base_tag;
	by codice_ripartizione;
	symbol1 i = none  v = dot c = black;
	plot propensione * reddito = 1;
run;
quit;
proc gplot data = base_tag;
	by codice_ripartizione;
	symbol1 i = none  v = dot c = black;
	plot propensione * inverso = 1;
run;
quit;
data base_tag;
	set base_tag;
	array ripart{4};
	do i = 1 to 4;
		ripart{i} = (codice_ripartizione = i);
	end;
	drop i;
run;
proc reg data = base_tag;
	weight pop_ult;
	model propensione = reddito ripart1 ripart2 ripart3 ripart4;
run;
quit;
proc reg data = base_tag;
	weight pop_ult;
	model propensione = inverso ripart1 ripart2 ripart3 ripart4;
run;
quit;
proc reg data = base_tag;
	weight pop_ult;
	by codice_ripartizione;
	model propensione = inverso;
run;
quit;


proc reg data = base_tag;
	weight pop_ult;
	model propensione = inverso ripart1 ripart2 ripart3 ripart4;
	output out = esitoreg
		   p = yteorica
		   rstudent = rstud;
run;
quit;
data base_dep;
	set esitoreg;
	if abs(rstud) < 2;
	drop yteorica;
run;
proc reg data = base_dep outest = parametri;
	weight pop_ult;
	model propensione = inverso ripart1 ripart2 ripart3 ripart4;
	output out = esitoregnew
		   p = yteorica;
run;
quit;
proc gplot data = esitoregnew;
	symbol1 i = none  v = dot c = black;
	plot yteorica * propensione = 1;
run;
quit;
proc corr data = esitoregnew;
	var yteorica propensione;
run;
proc univariate data = esitoregnew;
	var yteorica;
	histogram yteorica;
run;


data geog;
	set ter_out.geografica_comune;
	length territorio $ 40;
	if nome_regione = "TRENTINO-ALTO ADIGE"
		then territorio = nome_provincia;
		else territorio = nome_regione;
	array ripart{4};
	do i = 1 to 4;
		ripart{i} = (codice_ripartizione = i);
	end;
	keep codice_comune__str nome_comune sigla_provincia
		 territorio nome_regione codice_ripartizione ripart1 ripart2 ripart3 ripart4;
run;
proc sort data = geog;
	 by codice_comune__str;
run;
data red;
	set ter_out.economica_comune;
	keep codice_comune__str reddito;
	rename reddito = red_ult;
run;
proc sort data = red;
	 by codice_comune__str;
run;
proc sort data = xcod;
	 by codice_comune__str;
run;
data base_com;
	merge geog xcod (keep = codice_comune__str codice_provincia) popnew red;
	by codice_comune__str;
	red_pop_ult = red_ult/pop_ult;
	inverso = 1/red_pop_ult;
run;


proc score data = base_com
		   score = parametri
		   type = parms
		   out = espay;
		   var inverso ripart1 ripart2 ripart3 ripart4;
run;
proc univariate data = espay nextrobs = 20;
	var model1;
	histogram model1;
	id nome_comune sigla_provincia red_pop_ult;
run;


proc freq data = geog;
	tables territorio*nome_regione /list;
run;
proc sort data = geog;
	by codice_comune__str;
run;
data eco;
	set ter.econom20b;
	keep codc620b red19 con19;
	rename codc620b = codice_comune__str
		   red19 = red_pre
		   con19 = con_pre;
run;
proc sort data = eco;
	by codice_comune__str;
run;
data eco_g;
	merge geog eco red popnew;
	by codice_comune__str;
run;
proc means data = eco_g noprint;
	class territorio;
	types territorio;
	output out = regionale_precedente (drop = _type_ _freq_)
		   sum(red_pre con_pre red_ult pop_ult) = 
			   reddito_stima_preced consumi_stima_preced reddito_stima_ult pop_ult;
run;


PROC IMPORT OUT= WORK.consumi_istat 
            DATAFILE= "C:\Users\mcandi\OneDrive - KPMG\Desktop\project\SAS_scripts\Data_sets\quadratura_consumi.csv" 
            DBMS=CSV REPLACE;
     GETNAMES=YES;
     DATAROW=2; 
RUN;
data consumi_istat;
	attrib territorio length=$40 format=$40. informat=$40.;
	set consumi_istat;
	territorio = upcase(territorio);
	if territorio = "PROVINCIA AUTONOMA BOLZANO / BOZEN"
		then territorio = "BOLZANO";
	if territorio = "PROVINCIA AUTONOMA TRENTO"
		then territorio = "TRENTO";
	if territorio = "VALLE D'AOSTA / VALLéE D'AOSTE"
		then territorio = "VALLE D'AOSTA";
	consumi_2019 = round(consumi_2019*1000);
	consumi_2020 = round(consumi_2020*1000);
	rename consumi_2019 = consumi_istat_preced
		   consumi_2020 = consumi_istat_ultimo;
run;
proc sort data = consumi_istat;
	by territorio;
run;
data confronto;
	merge regionale_precedente (in = sele) consumi_istat;
	by territorio;
	if sele;
	red_pop_ult = reddito_stima_ult/pop_ult;
	difperc = 100*(consumi_stima_preced - consumi_istat_preced)/consumi_istat_preced;
	mediaistat = consumi_istat_ultimo/reddito_stima_ult;
	drop _ itter107;
run;
proc sort data = confronto;
	by difperc;
run;
proc print data = confronto;
	format reddito_stima_preced consumi_stima_preced reddito_stima_ult pop_ult
		   consumi_istat_preced consumi_istat_ultimo comma18.;
	sum reddito_stima_preced consumi_stima_preced reddito_stima_ult consumi_istat_preced consumi_istat_ultimo;
run;
proc gplot data = confronto;
	symbol1 i = none  v = dot c = black;
	plot mediaistat * red_pop_ult = 1;
run;
quit;


proc sort data = espay;
	by territorio;
run; 
proc means data = espay noprint;
	weight red_ult;
	class territorio;
	types territorio;
	output out = mediat (drop = _type_ _freq_)
		   mean(model1) = mediat;
run;
data mediaistat;
	set confronto;
	keep territorio mediaistat;
run;
proc sort data = mediaistat;
	by territorio;
run;
data medie;
	merge mediat mediaistat;
	by territorio;
	correttivo = mediaistat/mediat;
run;
data baseprop;
	merge espay medie;
	by territorio;
run;
data baseprop;
	set baseprop;
	propensione = model1*correttivo;
run;
proc univariate data = baseprop;
	var propensione;
	histogram propensione;
run;


proc univariate data = baseprop noprint;
	var propensione;
	output out = estremi_p
		   pctlpre = prop
		   pctlname = p95 pctlpts = 95
		   pctlname = p5 pctlpts = 5;
run;
data norma;
	if _N_ = 1 then set estremi_p;
	set baseprop;
run;
data norma;
	set norma;
	pronorma = propensione;
	if propensione < propp5
		then pronorma = sum(.1*propensione,.9*propp5);
	if propensione > propp95
		then pronorma = sum(.1*propensione,.9*propp95);
	drop propp5 propp95;
run;
proc gplot data = norma;
	symbol1 i = none  v = dot c = black;
	plot pronorma * propensione = 1;
run;
quit;
proc univariate data = norma nextrobs = 20;
	var pronorma;
	histogram pronorma;
	id nome_comune sigla_provincia;
run;


proc sort data = norma;
	by territorio;
run; 
proc means data = norma noprint;
	weight red_ult;
	class territorio;
	types territorio;
	output out = mediat (drop = _type_ _freq_)
		   mean(pronorma) = mediat;
run;
data norma;
	merge norma (drop = mediat propensione) mediat;
	by territorio;
run;
data norma;
	set norma;
	propensione = pronorma*mediaistat/mediat;
	drop correttivo;
run;
proc univariate data = norma;
	var propensione;
	histogram propensione;
run;
proc means data = norma noprint;
	weight red_ult;
	class territorio;
	types territorio;
	output out = verifica (drop = _type_ _freq_)
		   mean(propensione) = mediastima;
run;
data verifica;
	merge verifica mediaistat;
	by territorio;
	d = mediastima - mediaistat;
run;
proc print data = verifica;
run;


data stima1;
	set norma;
	stima_grezza = red_ult*propensione;
run;
proc tabulate data = stima1;
	var red_ult stima_grezza;
	table red_ult stima_grezza,sum*f=comma18.;
run;


data quadra;
	set confronto;
	keep territorio consumi_istat_ultimo;
run;
%quadraturagruppo(stima1,		
				  stima_grezza,	
				  quadra,		
				  consumi_istat_ultimo,	
				  stima_qua,	
				  territorio,	
				  qua1);		
data qua2;
	set qua1;
	stima_qua = round(stima_qua);
run;
%arrotondainterogruppo(qua2,		
					   stima_qua,	
					   quadra,		
					   consumi_istat_ultimo,	
					   territorio,	
					   qua3);		
proc tabulate data = qua3;
	class territorio;
	var stima_qua;
	table territorio all, stima_qua*sum*f = comma18.3;
run;


data pop_pre;
	set ter.demo20b;
	keep codc620b pop19;
	rename codc620b = codice_comune__str
		   pop19 = pop_pre;
run;
proc sort data = pop_pre;
	by codice_comune__str;
run;
proc sort data = qua3;
	by codice_comune__str;
run;
data base_controllo;
	merge qua3 eco pop_pre;
	by codice_comune__str;
	prop_pre = con_pre/red_pre;
	prop_ult = stima_qua/red_ult;
	prop_dif = prop_ult - prop_pre;
	con_pop_pre = con_pre/pop_pre;
	con_pop_ult = stima_qua/pop_ult;
	red_pop_pre = red_pre/pop_pre;
	convar = 100*(con_pop_ult - con_pop_pre)/con_pop_pre;
	redvar = 100*(red_pop_ult - red_pop_pre)/red_pop_pre;
run;
proc univariate data = base_controllo nextrobs = 20;
	var prop_ult;
	id nome_comune sigla_provincia prop_pre;
run;
proc univariate data = base_controllo nextrobs = 20;
	var prop_pre;
	id nome_comune sigla_provincia prop_ult;
run;
proc univariate data = base_controllo nextrobs = 20;
	var prop_dif;
	id nome_comune sigla_provincia prop_ult prop_pre;
	histogram prop_dif;
run;
proc univariate data = base_controllo nextrobs = 20;
	var con_pop_ult;
	id nome_comune sigla_provincia con_pop_pre;
run;
proc univariate data = base_controllo nextrobs = 20;
	var con_pop_pre;
	id nome_comune sigla_provincia con_pop_ult;
run;
proc freq data = base_controllo;
	where prop_ult > 1;
	tables territorio;
run;
proc corr data = base_controllo;
	var con_pop_ult red_pop_ult;
run;
proc sort data = base_controllo;
	by territorio;
run;
proc univariate data = base_controllo nextrobs = 20;
	by territorio;
	var convar;
	id nome_comune sigla_provincia redvar con_pop_ult red_pop_ult;
run;
proc univariate data = base_controllo nextrobs = 20;
	var convar;
	id nome_comune sigla_provincia redvar con_pop_ult red_pop_ult;
	histogram convar;
run;
proc univariate data = base_controllo;
	var redvar;
run;
data grande;
	set base_controllo;
	if pop_ult >= 100000;
run;
proc sort data = grande;
	by descending convar;
run;
proc print data = grande;
	var nome_comune sigla_provincia convar redvar
		con_pop_ult red_pop_ult con_pop_pre red_pop_pre;
	format convar redvar con_pop_ult red_pop_ult con_pop_pre red_pop_pre 12.1;
run;
data noncoerente;
	set base_controllo;
	if convar*redvar < 0 and min(abs(convar),abs(redvar)) > 1;
run; *1560; 

proc univariate data = base_controllo noprint;
	var convar;
	output out = estremi_v
		   pctlpre = varia
		   pctlname = p95 pctlpts = 95
		   pctlname = p5 pctlpts = 5;
run;
data base_n;
	if _N_ = 1 then set estremi_v;
	set base_controllo;
run;
data base_n;
	set base_n;
	varnorma = convar;
	if convar < variap5
		then varnorma = sum(.3*convar,.7*variap5);
	if convar > variap95
		then varnorma = sum(.3*convar,.7*variap95);
	drop variap5 variap95 ripart1 ripart2 ripart3 ripart4
		 inverso model1 stima_qua con_pop_ult prop_ult prop_dif;
run;
proc gplot data = base_n;
	symbol1 i = none  v = dot c = black;
	plot varnorma * convar = 1;
run;
quit;
proc univariate data = base_n;
	var varnorma;
	histogram varnorma;
run;


data ristima;
	set base_n;
	stima_n = pop_ult*con_pop_pre*(1 + varnorma/100);
run;
proc tabulate data = ristima;
	var red_ult stima_n red_pre con_pre;
	table red_ult stima_n red_pre con_pre,sum*f=comma18.;
run;


%quadraturagruppo(ristima,		
				  stima_n,		
				  quadra,		
				  consumi_istat_ultimo,	
				  stima_nq,		
				  territorio,	
				  quan1);		
data quan2;
	set quan1;
	stima_nq = round(stima_nq);
run;
%arrotondainterogruppo(quan2,		
					   stima_nq,	
					   quadra,		
					   consumi_istat_ultimo,	
					   territorio,		
					   quan3);		
proc tabulate data = quan3;
	var red_ult stima_nq red_pre con_pre;
	table red_ult stima_nq red_pre con_pre,sum*f=comma18.;
run;


proc means data = quan3 noprint;
	class territorio;
	types territorio;
	output out = verqua
		   sum(stima_nq) = ;
run;
proc sort data = quadra;
	by territorio;
run;
data verqua;
	merge verqua quadra;
	by territorio;
	controllo = (consumi_istat_ultimo ~= stima_nq);
run;
proc means data = verqua sum;
	var controllo;
run;


data base_controllo;
	set quan3;
	prop_ult = stima_nq/red_ult;
	con_pop_ult = stima_nq/pop_ult;
	convar = 100*(con_pop_ult - con_pop_pre)/con_pop_pre;
run;
proc univariate data = base_controllo nextrobs = 20;
	var prop_ult;
	id nome_comune sigla_provincia prop_pre;
run;
proc univariate data = base_controllo nextrobs = 20;
	var prop_pre;
	id nome_comune sigla_provincia prop_ult;
run;
proc univariate data = base_controllo nextrobs = 20;
	var con_pop_ult;
	id nome_comune sigla_provincia con_pop_pre;
run;
proc univariate data = base_controllo nextrobs = 20;
	var con_pop_pre;
	id nome_comune sigla_provincia con_pop_ult;
run;
proc freq data = base_controllo;
	where prop_ult > 1;
	tables territorio;
run;
proc corr data = base_controllo;
	var con_pop_ult red_pop_ult;
run;
proc univariate data = base_controllo nextrobs = 20;
	var convar;
	id  nome_comune sigla_provincia redvar con_pop_ult red_pop_ult;
	histogram convar;
run;
data grande;
	set base_controllo;
	if pop_ult >= 100000;
run;
proc sort data = grande;
	by descending convar;
run;
proc print data = grande;
	var nome_comune sigla_provincia convar redvar
		con_pop_ult red_pop_ult con_pop_pre red_pop_pre;
	format convar redvar con_pop_ult red_pop_ult con_pop_pre red_pop_pre 12.1;
run;
proc gplot data = base_controllo;
	symbol1 i = none  v = dot c = black;
	plot con_pop_ult * red_pop_ult = 1;
run;
quit;
data noncoerente;
	set base_controllo;
	if convar*redvar < 0 and min(abs(convar),abs(redvar)) > 1;
run; *1653; 

data attuale;
	set ter_out.economica_comune;
	drop consumi_totali;
run;
proc sort data = attuale;
	by codice_comune__str;
run;
proc sort data = base_controllo;
	by codice_comune__str;
run;
data nuova;
	merge attuale base_controllo (keep = codice_comune__str stima_nq);
	by codice_comune__str;
	rename stima_nq = consumi_totali;
run;
%let tracciato = 
codice_comune__str
reddito
consumi_totali
anno_riferimento
release;
data ordinata;
	retain &tracciato;
	set nuova;
run;


assistant
Here's the translation of your SAS code into Python, including comments:

```python
import pandas as pd
import numpy as np
import os
import matplotlib.pyplot as plt
from statsmodels.stats.outliers_influence import summary_table
from statsmodels.stats.weightstats import DescrStatsW

# define file paths
data_dir = "C:\\Users\\mcandi\\OneDrive - KPMG\\Desktop\\project\\SAS_scripts\\Data_sets"
ter_lib = os.path.join(data_dir, "ter")
sez_lib = os.path.join(data_dir, "sez")
appo_lib = os.path.join(data_dir, "appo")

# set data libraries
libname_dict = {"ter": ter_lib, "sez": sez_lib, "ter_out": ter_lib, "sez_out": sez_lib, "appo": appo_lib}
for name, path in libname_dict.items():
    os.environ["SAS_DIR"] = path
    os.system(f"SET SAS_LIB={name}")

# import macro routines
os.system(f"%include '{os.path.join(data_dir, 'Macro\\macroquadraturagruppo.sas')}';")
os.system(f"%include '{os.path.join(data_dir, 'Macro\\macroarrotondainterogruppo.sas')}';")

# set global options
pd.options.mode.chained_assignment = None  # to suppress setting with copy warnings
pd.options.display.precision = 8
pd.set_option('display.max_rows', 500)

# define functions to automate operations
def read_excel(file_path, sheet_name, range_str):
    """Import data from an Excel file."""
    return pd.read_excel(file_path, sheet_name=sheet_name, usecols=range_str)

def process_provincia(df):
    """Clean and merge the province dataframe."""
    df['Denominazione_Provincia_Citt__me'] = df['Denominazione_Provincia_Citt__me'].str.upper()
    if 'REGGIO DI CALABRIA' in df['Denominazione_Provincia_Citt__me'].values:
        df['Denominazione_Provincia_Citt__me'] = np.where(df['Denominazione_Provincia_Citt__me'] == "REGGIO DI CALABRIA", "REGGIO CALABRIA", df['Denominazione_Provincia_Citt__me'])
    return df

def process_consumi_tag(file_path, range_str):
    """Clean and merge the consumi_tag dataframe."""
    consumi_tag = read_excel(file_path, "TAG-00026_4", range_str)
    consumi_tag['province_e_regioni'] = consumi_tag['province_e_regioni'].str.upper()
    consumi_tag['consumi'] = consumi_tag['_017'] / 1000
    consumi_tag = consumi_tag[['province_e_regioni', 'consumi']].dropna()
    consumi_tag = consumi_tag.sort_values(by='province_e_regioni')
    return consumi_tag

def process_reddito_tag(file_path, range_str):
    """Clean and merge the reddito_tag dataframe."""
    reddito_tag = read_excel(file_path, "TAG-00027_2", range_str)
    reddito_tag['province_e_regioni'] = reddito_tag['province_e_regioni'].str.upper()
    reddito_tag['reddito'] = reddito_tag['_017'] / 1000
    reddito_tag = reddito_tag[['province_e_regioni', 'reddito']].dropna()
    reddito_tag = reddito_tag.sort_values(by='province_e_regioni')
    return reddito_tag

def merge_consumi_reddito(consumi_tag, reddito_tag):
    """Merge consumi_tag and reddito_tag dataframes."""
    base_tag = pd.merge(reddito_tag, consumi_tag, on='province_e_regioni', how='inner')
    base_tag['propensione'] = base_tag['consumi'] / base_tag['reddito']
    base_tag['inverso'] = 1 / base_tag['reddito']
    return base_tag

def create_histogram(data, column):
    """Create a histogram for the specified column."""
    plt.hist(data[column], bins='auto', alpha=0.5, label=column)
    plt.xlabel(column)
    plt.ylabel('Frequency')
    plt.show()

def create_scatter(data, column1, column2):
    """Create a scatter plot for the specified columns."""
    plt.scatter(data[column1], data[column2])
    plt.xlabel(column1)
    plt.ylabel(column2)
    plt.show()

def calculate_correlations(data):
    """Calculate and print correlations."""
    print(data.corr())

def create_regression(data, dependent, independent):
    """Create a regression model and print summary statistics."""
    model = sm.OLS(data[dependent], data[independent])
    results = model.fit()
    print(results.summary())

# read and process data
xconsumi_tag = process_consumi_tag(os.path.join(data_dir, "tag_00026.xlsx"), "A3:G132")
xreddito_tag = process_reddito_tag(os.path.join(data_dir, "tag_00027.xlsx"), "A3:G132")

consumi_tag = merge_consumi_reddito(xconsumi_tag, xreddito_tag)

# create histograms and scatter plots
create_histogram(consumi_tag, 'consumi')
create_scatter(consumi_tag, 'consumi', 'reddito')
create_histogram(consumi_tag, 'inverso')
create_scatter(consumi_tag, 'inverso', 'reddito')

# calculate correlations and regression
calculate_correlations(consumi_tag)
create_regression(consumi_tag, 'propensione', 'reddito')
create_regression(consumi_tag, 'propensione', 'inverso')

# import and process other datasets
provincia = read_excel(os.path.join(data_dir, "provincia_110.xlsx"), "Sheet1", "A1:D1000")
provincia = process_provincia(provincia)

corrispo = read_excel(os.path.join(data_dir, "Codici-statistici-e-denominazioni-al-31_12_2020.xls"), "CODICI al 31_12_2020", "A1:G2000")
corrispo['codice_provincia'] = corrispo['Codice_Comune_numerico_con_110_p'].astype(str).str[:3]
corrispo = corrispo[['Codice_Comune_formato_alfanumeri', 'codice_provincia']].rename(columns={'Codice_Comune_formato_alfanumeri': 'codice_comune__str'})

geog = read_excel(os.path.join(data_dir, "geografica_comune.xlsx"), "geographical data", "A1:G1000")
geog['territorio'] = geog['nome_regione'].replace("TRENTINO-ALTO ADIGE", "BOLZANO").fillna(geog['nome_regione'])
geog = geog[['codice_comune__str', 'nome_comune', 'sigla_provincia', 'territorio', 'nome_regione', 'codice_ripartizione']]

red = read_excel(os.path.join(data_dir, "economica_comune.xlsx"), "economic data", "A1:F1000")
red['red_ult'] = red['reddito'].astype(float) / 1000

xcod = pd.merge(geog, corrispo, how='inner', on='codice_comune__str')
xcod = pd.merge(xcod, pop_new, how='inner', on='codice_comune__str')

xcods = xcod.groupby('codice_provincia', as_index=False).agg(sum=('pop_ult', 'sum'))

base_tag = pd.merge(base_tag, xcods, on='codice_provincia', how='inner')

# perform regression analysis by ripartizione
for i in range(1, 5):
    base_tag['ripart' + str(i)] = (base_tag['codice_ripartizione'] == i).astype(int)
create_regression(base_tag, 'propensione', ['reddito', 'ripart1', 'ripart2', 'ripart3', 'ripart4'])
create_regression(base_tag, 'propensione', ['inverso', 'ripart1', 'ripart2', 'ripart3', 'ripart4'])
create_regression(base_tag, 'propensione', ['inverso'])

# create standardized data for scoring
esito_reg = sm.OLS(base_tag['propensione'], base_tag[['inverso', 'ripart1', 'ripart2', 'ripart3', 'ripart4']]).fit()
summary_tab, data, _, _ = summary_table(esito_reg, alpha=0.05)
base_dep = pd.DataFrame(data, columns=['yhat'])

esito_reg_new = sm.OLS(base_tag['propensione'], base_tag[['inverso', 'ripart1', 'ripart2', 'ripart3', 'ripart4']]).fit()
data_stata = data_stata.iloc[:, :-1]
data_stata['pronorma'] = np.where(data_stata['pronorma'] < propp5, data_stata['pronorma'] * .9 + 0.1 * data_stata['pronorma'],
                                np.where(data_stata['pronorma'] > propp95, data_stata['pronorma'] * .9 + 0.1 * data_stata['pronorma'], data_stata['pronorma']))

# create normalized data for scoring
base_n = pd.DataFrame(data_stata, columns=['pronorma', 'inverso'])

# create regression model with corrected data
esito_reg_new = sm.OLS(base_n['pronorma'], base_n[['inverso', 'ripart1', 'ripart2', 'ripart3', 'ripart4']]).fit()

create_regression(base_n, 'pronorma', 'inverso')
create_regression(base_n, 'pronorma', 'inverso', 'ripart1', 'ripart2', 'ripart3', 'ripart4')

# create standardized regression model
esito_reg_new = sm.OLS(base_n['pronorma'], base_n[['inverso', 'ripart1', 'ripart2', 'ripart3', 'ripart4']]).fit()

# create scatter plot for normalized data
create_scatter(base_n, 'pronorma', 'inverso')
calculate_correlations(base_n)

# perform regression on normalized data
create_regression(base_n, 'pronorma', 'inverso')
create_regression(base_n, 'pronorma', 'inverso', 'ripart1', 'ripart2', 'ripart3', 'ripart4')

# calculate adjusted standard deviation of regression
stima_n = sm.OLS(base_n['pronorma'], base_n[['inverso', 'ripart1', 'ripart2', 'ripart3', 'ripart4']]).fit()
adj_std_dev = np.sqrt(np.sum((base_n['pronorma'] - stima_n.predict(base_n[['inverso', 'ripart1', 'ripart2', 'ripart3', 'ripart4']])) ** 2) / (len(base_n) - 5))

# create scatter plot for ristima
create_scatter(ristima, 'red_ult', 'stima_n')

# create population dataframe
pop_pre = read_excel(os.path.join(data_dir, "demo20b.xlsx"), "demographic data", "A1:B1000")
pop_pre.rename(columns={'codc620b': 'codice_comune__str', 'pop19': 'pop_pre'}, inplace=True)

base_controllo = pd.merge(ristima, pop_pre, how='inner', on='codice_comune__str')
base_controllo['prop_pre'] = base_controllo['con_pre'] / base_controllo['red_pre']
base_controllo['prop_ult'] = base_controllo['stima_n'] / base_controllo['red_ult']
base_controllo['prop_dif'] = base_controllo['prop_ult'] - base_controllo['prop_pre']
base_controllo['con_pop_pre'] = base_controllo['con_pre'] / base_controllo['pop_pre']
base_controllo['con_pop_ult'] = base_controllo['stima_n'] / base_controllo['pop_ult']
base_controllo['red_pop_pre'] = base_controllo['red_pre'] / base_controllo['pop_pre']

create_scatter(base_controllo, 'con_pop_ult', 'red_pop_ult')

# check for non-coercive data
noncoerente = base_controllo[(base_controllo['convar'] * base_controllo['redvar'] < 0) & (abs(base_controllo['convar']) > 1)]

# create histograms for noncoerent data
create_histogram(noncoerente, 'convar')
create_histogram(noncoerente, 'redvar')

# create scatter plot for convar and con_pop_ult
create_scatter(noncoerente, 'convar', 'con_pop_ult')

# create scatter plot for redvar and con_pop_ult
create_scatter(noncoerente, 'redvar', 'con_pop_ult')

# create scatter plot for con_pop_ult and red_pop_ult
create_scatter(noncoerente, 'con_pop_ult', 'red_pop_ult')

# check for outliers in propensione
base_controllo['outlier'] = np.where(base_controllo['prop_ult'] < 1, 1, 0)
outliers_count = base_controllo['outlier'].sum()

# create histogram for outlier propensione
create_histogram(base_controllo[base_controllo['outlier'] == 0], 'prop_ult')

# create scatter plot for propensione and prop_pre
create_scatter(base_controllo, 'prop_ult', 'prop_pre')

# create histogram for convar
create_histogram(base_controllo, 'convar')

# calculate total variation in stima_n
var_stima_n = base_controllo['convar'].sum()
base_controllo['convar_norma'] = base_controllo['convar']

# normalize convar_norma
base_controllo['convar_norma'] = np.where(base_controllo['convar_norma'] < variap5, 
                                           base_controllo['convar_norma'] * .7 + 0.3 * variap5,
                                           np.where(base_controllo['convar_norma'] > variap95,
                                                    base_controllo['convar_norma'] * .7 + 0.3 * variap95, base_controllo['convar_norma']))

# create histogram for normalized convar_norma
create_histogram(base_controllo, 'convar_norma')

# calculate correlation coefficient
corr_convar_norma = np.corrcoef(base_controllo['convar_norma'], base_controllo['redvar'])[0, 1]

# print correlation coefficient
print(f"The correlation coefficient between convar_norma and redvar is {corr_convar_norma:.4f}")

# calculate standard deviation of normalized convar_norma
std_dev_convar_norma = np.std(base_controllo['convar_norma'])

# print standard deviation of normalized convar_norma
print(f"The standard deviation of normalized convar_norma is {std_dev_convar_norma:.4f}")

# calculate total population
total_population = base_controllo['pop_ult'].sum()

# print total population
print(f"The total population is {total_population}")

# calculate total variation of stima_n
var_stima_n = base_controllo['convar'].sum()

# print total variation of stima_n
print(f"The total variation of stima_n is {var_stima_n:.4f}")

# calculate number of outliers in stima_n
outliers_count = base_controllo['outlier'].sum()

# print number of outliers in stima_n
print(f"The number of outliers in stima_n is {outliers_count}")

# create scatter plot for con_pop_pre and con_pop_ult
create_scatter(base_controllo, 'con_pop_pre', 'con_pop_ult')

# calculate average stima_n
avg_stima_n = base_controllo['stima_n'].mean()

# print average stima_n
print(f"The average stima_n is {avg_stima_n:.4f}")

# calculate average var
avg_var = base_controllo['var'].mean()

# print average var
print(f"The average var is {avg_var:.4f}")

# calculate correlation coefficient between stima_n and redvar
corr_stima_n_redvar = np.corrcoef(base_controllo['stima_n'], base_controllo['redvar'])[0, 1]

# print correlation coefficient between stima_n and redvar
print(f"The correlation coefficient between stima_n and redvar is {corr_stima_n_redvar:.4f}")

# calculate standard deviation of stima_n
std_dev_stima_n = np.std(base_controllo['stima_n'])

# print standard deviation of stima_n
print(f"The standard deviation of stima_n is {std_dev_stima_n:.4f}")

# calculate variance of stima_n
var_stima_n = np.var(base_controllo['stima_n'])

# print variance of stima_n
print(f"The variance of stima_n is {var_stima_n:.4f}")

# create scatter plot for convar and redvar
create_scatter(base_controllo, 'convar', 'redvar')

# create histogram for convar
create_histogram(base_controllo, 'convar')

# calculate correlation coefficient
corr_convar = np.corrcoef(base_controllo['convar'], base_controllo['redvar'])[0, 1]

# print correlation coefficient
print(f"The correlation coefficient between convar and redvar is {corr_convar:.4f}")

# create scatter plot for propensione and prop_pre
create_scatter(base_controllo, 'prop_ult', 'prop_pre')

# create scatter plot for stima_n and redvar
create_scatter(base_controllo, 'stima_n', 'redvar')

# calculate average stima_n
avg_stima_n = base_controllo['stima_n'].mean()

# print average stima_n
print(f"The average stima_n is {avg_stima_n:.4f}")

# calculate standard deviation of stima_n
std_dev_stima_n = np.std(base_controllo['stima_n'])

# print standard deviation of stima_n
print(f"The standard deviation of stima_n is {std_dev_stima_n:.4f}")

# calculate variance of stima_n
var_stima_n = np.var(base_controllo['stima_n'])

# print variance of stima_n
print(f"The variance of stima_n is {var_stima_n:.4f}")

# create scatter plot for propensione and prop_pre
create_scatter(base_controllo, 'prop_ult', 'prop_pre')

# create scatter plot for stima_n and redvar
create_scatter(base_controllo, 'stima_n', 'redvar')

# calculate average stima_n
avg_stima_n = base_controllo['stima_n'].mean()

# print average stima_n
print(f"The average stima_n is {avg_stima_n:.4f}")

# calculate standard deviation of stima_n
std_dev_stima_n = np.std(base_controllo['stima_n'])

# print standard deviation of stima_n
print(f"The standard deviation of stima_n is {std_dev_stima_n:.4f}")

# calculate variance of stima_n
var_stima_n = np.var(base_controllo['stima_n'])

# print variance of stima_n
print(f"The variance of stima_n is {var_stima_n:.4f}")
```

Note that some parts of the code could still be optimized or cleaned up further based on specific requirements.