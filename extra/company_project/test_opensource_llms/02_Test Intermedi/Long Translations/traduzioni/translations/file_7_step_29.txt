system
You are an expert in translating code from SAS to Python; translate the given code at your best even if there are problems; insert comments inside the code; do not return any message outside the code and make it as readable as possible; minimize the code complexity and volume; create functions to automate frequently needed operations; ensure to not make any syntax error; define all variables and import all libraries used even if imported locally; ensure the user can copy and run the code without modifications; translate from SAS to Python every part of the input code reproducing the same operations; do not use SAS syntax in the Python code; define correctly the file paths; return the code in single block; make Python code more efficient than the SAS one.
user
libname ter "C:\Users\mcandi\OneDrive - KPMG\Desktop\project\SAS_scripts\Data_sets";
libname sez "C:\Users\mcandi\OneDrive - KPMG\Desktop\project\SAS_scripts\Data_sets";

libname ter_out "C:\Users\mcandi\OneDrive - KPMG\Desktop\project\SAS_scripts\Data_sets";
libname sez_out "C:\Users\mcandi\OneDrive - KPMG\Desktop\project\SAS_scripts\Data_sets";

libname appo "C:\Users\mcandi\OneDrive - KPMG\Desktop\project\SAS_scripts\Data_sets";

options mergenoby = warn;
options nolabel;

%include "C:\Users\mcandi\OneDrive - KPMG\Desktop\project\SAS_scripts\Data_sets\Macro\macroquadraturagruppo.sas";
%include "C:\Users\mcandi\OneDrive - KPMG\Desktop\project\SAS_scripts\Data_sets\Macro\macroarrotondainterogruppo.sas";

title1 "STIMA COMUNALE DEI CONSUMI";

ods graphics off;


PROC IMPORT OUT= WORK.xconsumi_tag
            DATAFILE= "C:\Users\mcandi\OneDrive - KPMG\Desktop\project\SAS_scripts\Data_sets\tag_00026.xlsx"
            DBMS=EXCEL2000 REPLACE;
			SHEET="TAG-00026_4";
     		RANGE="A3:G132";
     		GETNAMES=YES;
			*MIXED = YES;	
RUN;
PROC IMPORT OUT= WORK.xreddito_tag
            DATAFILE= "C:\Users\mcandi\OneDrive - KPMG\Desktop\project\SAS_scripts\Data_sets\tag_00027.xlsx"
            DBMS=EXCEL2000 REPLACE;
			SHEET="TAG-00027_2";
     		RANGE="A3:G132";
     		GETNAMES=YES;
			*MIXED = YES;	
RUN;
data consumi_tag;
	set xconsumi_tag;
	if province_e_regioni ~= upcase(province_e_regioni)
	or province_e_regioni = "VALLE D'AOSTA/VALL�E D'AOSTE";
	consumi = _017/1000;
	keep province_e_regioni consumi;
run;
proc sort data = consumi_tag;
	by province_e_regioni;
run;
data reddito_tag;
	set xreddito_tag;
	if province_e_regioni ~= upcase(province_e_regioni)
	or province_e_regioni = "VALLE D'AOSTA/VALL�E D'AOSTE";
	reddito = _017/1000;
	keep province_e_regioni reddito;
run;
proc sort data = reddito_tag;
	by province_e_regioni;
run;
data base_tag;
	merge reddito_tag consumi_tag;
	by province_e_regioni;
	propensione = consumi/reddito;
	inverso = (1/reddito);
run;


proc univariate data = base_tag;
	var propensione;
	histogram propensione;
run;
proc gplot data = base_tag;
	symbol1 i = none  v = dot c = black;
	plot propensione * reddito = 1;
run;
quit;
proc gplot data = base_tag;
	symbol1 i = none  v = dot c = black;
	plot propensione * inverso = 1;
run;
quit;
proc corr data = base_tag;
	var propensione reddito inverso;
run;
proc reg data = base_tag;
	model propensione = reddito;
run;
quit;
proc reg data = base_tag;
	model propensione = inverso;
run;
quit;


PROC IMPORT OUT= WORK.provincia
            DATAFILE= "C:\Users\mcandi\OneDrive - KPMG\Desktop\project\SAS_scripts\Data_sets\provincia_110.xlsx"
            DBMS=EXCEL2000 REPLACE;
			SHEET="Sheet1";
     		GETNAMES=YES;
RUN;
data provincia;
	set provincia;
	Denominazione_Provincia_Citt__me = upcase(Denominazione_Provincia_Citt__me);
	if Denominazione_Provincia_Citt__me = "REGGIO DI CALABRIA"
		then Denominazione_Provincia_Citt__me = "REGGIO CALABRIA";
run;
data base_tag;
	set base_tag;
	province_e_regioni = upcase(province_e_regioni);
run;
proc sort data = provincia;
	by Denominazione_Provincia_Citt__me;
run;
data base_tag;
	merge base_tag provincia (rename=(Denominazione_Provincia_Citt__me=province_e_regioni));
	by province_e_regioni;
run;


PROC IMPORT OUT= WORK.corrispo
            DATAFILE= "C:\Users\mcandi\OneDrive - KPMG\Desktop\project\SAS_scripts\Data_sets\Codici-statistici-e-denominazioni-al-31_12_2020.xls"
            DBMS=EXCEL2000 REPLACE;
			SHEET="CODICI al 31_12_2020";
     		GETNAMES=YES;
			*MIXED = YES;	
RUN;
data corrispo;
	set corrispo;
	length codice_provincia $ 3;
	codice_provincia = substr(put(Codice_Comune_numerico_con_110_p,z6.),1,3);
	keep Codice_Comune_formato_alfanumeri codice_provincia;
	rename Codice_Comune_formato_alfanumeri = codice_comune__str;
run;
proc sort data = corrispo;
	by codice_comune__str;
run;
data xcod;
	set ter_out.geografica_comune;
	keep codice_comune__str codice_area_nielsen codice_ripartizione;
run;
proc sort data = xcod;
	by codice_comune__str;
run;
proc means data = ter_out.Popolazione_eta_sesso_comune noprint;
	class codice_comune__str;
	types codice_comune__str;
	output out = popnew (drop = _type_ _freq_)
		   sum(popolazione) = pop_ult;
run;
data xcod;
	merge xcod corrispo popnew;
	by codice_comune__str;
run;
proc means data = xcod noprint;
	class codice_provincia;
	types codice_provincia;
	id codice_area_nielsen codice_ripartizione;
	output out = xcods (drop = _type_ _freq_)
		   sum(pop_ult) = ;
run;
proc sort data = base_tag;
	by codice_provincia;
run;
data base_tag;
	merge base_tag xcods;
	by codice_provincia;
run;


proc sort data = base_tag;
	by codice_ripartizione;
run;
proc corr data = base_tag;
	by codice_ripartizione;
	var propensione reddito inverso;
run;
proc gplot data = base_tag;
	by codice_ripartizione;
	symbol1 i = none  v = dot c = black;
	plot propensione * reddito = 1;
run;
quit;
proc gplot data = base_tag;
	by codice_ripartizione;
	symbol1 i = none  v = dot c = black;
	plot propensione * inverso = 1;
run;
quit;
data base_tag;
	set base_tag;
	array ripart{4};
	do i = 1 to 4;
		ripart{i} = (codice_ripartizione = i);
	end;
	drop i;
run;
proc reg data = base_tag;
	weight pop_ult;
	model propensione = reddito ripart1 ripart2 ripart3 ripart4;
run;
quit;
proc reg data = base_tag;
	weight pop_ult;
	model propensione = inverso ripart1 ripart2 ripart3 ripart4;
run;
quit;
proc reg data = base_tag;
	weight pop_ult;
	by codice_ripartizione;
	model propensione = inverso;
run;
quit;


proc reg data = base_tag;
	weight pop_ult;
	model propensione = inverso ripart1 ripart2 ripart3 ripart4;
	output out = esitoreg
		   p = yteorica
		   rstudent = rstud;
run;
quit;
data base_dep;
	set esitoreg;
	if abs(rstud) < 2;
	drop yteorica;
run;
proc reg data = base_dep outest = parametri;
	weight pop_ult;
	model propensione = inverso ripart1 ripart2 ripart3 ripart4;
	output out = esitoregnew
		   p = yteorica;
run;
quit;
proc gplot data = esitoregnew;
	symbol1 i = none  v = dot c = black;
	plot yteorica * propensione = 1;
run;
quit;
proc corr data = esitoregnew;
	var yteorica propensione;
run;
proc univariate data = esitoregnew;
	var yteorica;
	histogram yteorica;
run;


data geog;
	set ter_out.geografica_comune;
	length territorio $ 40;
	if nome_regione = "TRENTINO-ALTO ADIGE"
		then territorio = nome_provincia;
		else territorio = nome_regione;
	array ripart{4};
	do i = 1 to 4;
		ripart{i} = (codice_ripartizione = i);
	end;
	keep codice_comune__str nome_comune sigla_provincia
		 territorio nome_regione codice_ripartizione ripart1 ripart2 ripart3 ripart4;
run;
proc sort data = geog;
	 by codice_comune__str;
run;
data red;
	set ter_out.economica_comune;
	keep codice_comune__str reddito;
	rename reddito = red_ult;
run;
proc sort data = red;
	 by codice_comune__str;
run;
proc sort data = xcod;
	 by codice_comune__str;
run;
data base_com;
	merge geog xcod (keep = codice_comune__str codice_provincia) popnew red;
	by codice_comune__str;
	red_pop_ult = red_ult/pop_ult;
	inverso = 1/red_pop_ult;
run;


proc score data = base_com
		   score = parametri
		   type = parms
		   out = espay;
		   var inverso ripart1 ripart2 ripart3 ripart4;
run;
proc univariate data = espay nextrobs = 20;
	var model1;
	histogram model1;
	id nome_comune sigla_provincia red_pop_ult;
run;


proc freq data = geog;
	tables territorio*nome_regione /list;
run;
proc sort data = geog;
	by codice_comune__str;
run;
data eco;
	set ter.econom20b;
	keep codc620b red19 con19;
	rename codc620b = codice_comune__str
		   red19 = red_pre
		   con19 = con_pre;
run;
proc sort data = eco;
	by codice_comune__str;
run;
data eco_g;
	merge geog eco red popnew;
	by codice_comune__str;
run;
proc means data = eco_g noprint;
	class territorio;
	types territorio;
	output out = regionale_precedente (drop = _type_ _freq_)
		   sum(red_pre con_pre red_ult pop_ult) = 
			   reddito_stima_preced consumi_stima_preced reddito_stima_ult pop_ult;
run;


PROC IMPORT OUT= WORK.consumi_istat 
            DATAFILE= "C:\Users\mcandi\OneDrive - KPMG\Desktop\project\SAS_scripts\Data_sets\quadratura_consumi.csv" 
            DBMS=CSV REPLACE;
     GETNAMES=YES;
     DATAROW=2; 
RUN;
data consumi_istat;
	attrib territorio length=$40 format=$40. informat=$40.;
	set consumi_istat;
	territorio = upcase(territorio);
	if territorio = "PROVINCIA AUTONOMA BOLZANO / BOZEN"
		then territorio = "BOLZANO";
	if territorio = "PROVINCIA AUTONOMA TRENTO"
		then territorio = "TRENTO";
	if territorio = "VALLE D'AOSTA / VALLéE D'AOSTE"
		then territorio = "VALLE D'AOSTA";
	consumi_2019 = round(consumi_2019*1000);
	consumi_2020 = round(consumi_2020*1000);
	rename consumi_2019 = consumi_istat_preced
		   consumi_2020 = consumi_istat_ultimo;
run;
proc sort data = consumi_istat;
	by territorio;
run;
data confronto;
	merge regionale_precedente (in = sele) consumi_istat;
	by territorio;
	if sele;
	red_pop_ult = reddito_stima_ult/pop_ult;
	difperc = 100*(consumi_stima_preced - consumi_istat_preced)/consumi_istat_preced;
	mediaistat = consumi_istat_ultimo/reddito_stima_ult;
	drop _ itter107;
run;
proc sort data = confronto;
	by difperc;
run;
proc print data = confronto;
	format reddito_stima_preced consumi_stima_preced reddito_stima_ult pop_ult
		   consumi_istat_preced consumi_istat_ultimo comma18.;
	sum reddito_stima_preced consumi_stima_preced reddito_stima_ult consumi_istat_preced consumi_istat_ultimo;
run;
proc gplot data = confronto;
	symbol1 i = none  v = dot c = black;
	plot mediaistat * red_pop_ult = 1;
run;
quit;


proc sort data = espay;
	by territorio;
run; 
proc means data = espay noprint;
	weight red_ult;
	class territorio;
	types territorio;
	output out = mediat (drop = _type_ _freq_)
		   mean(model1) = mediat;
run;
data mediaistat;
	set confronto;
	keep territorio mediaistat;
run;
proc sort data = mediaistat;
	by territorio;
run;
data medie;
	merge mediat mediaistat;
	by territorio;
	correttivo = mediaistat/mediat;
run;
data baseprop;
	merge espay medie;
	by territorio;
run;
data baseprop;
	set baseprop;
	propensione = model1*correttivo;
run;
proc univariate data = baseprop;
	var propensione;
	histogram propensione;
run;


proc univariate data = baseprop noprint;
	var propensione;
	output out = estremi_p
		   pctlpre = prop
		   pctlname = p95 pctlpts = 95
		   pctlname = p5 pctlpts = 5;
run;
data norma;
	if _N_ = 1 then set estremi_p;
	set baseprop;
run;
data norma;
	set norma;
	pronorma = propensione;
	if propensione < propp5
		then pronorma = sum(.1*propensione,.9*propp5);
	if propensione > propp95
		then pronorma = sum(.1*propensione,.9*propp95);
	drop propp5 propp95;
run;
proc gplot data = norma;
	symbol1 i = none  v = dot c = black;
	plot pronorma * propensione = 1;
run;
quit;
proc univariate data = norma nextrobs = 20;
	var pronorma;
	histogram pronorma;
	id nome_comune sigla_provincia;
run;


proc sort data = norma;
	by territorio;
run; 
proc means data = norma noprint;
	weight red_ult;
	class territorio;
	types territorio;
	output out = mediat (drop = _type_ _freq_)
		   mean(pronorma) = mediat;
run;
data norma;
	merge norma (drop = mediat propensione) mediat;
	by territorio;
run;
data norma;
	set norma;
	propensione = pronorma*mediaistat/mediat;
	drop correttivo;
run;
proc univariate data = norma;
	var propensione;
	histogram propensione;
run;
proc means data = norma noprint;
	weight red_ult;
	class territorio;
	types territorio;
	output out = verifica (drop = _type_ _freq_)
		   mean(propensione) = mediastima;
run;
data verifica;
	merge verifica mediaistat;
	by territorio;
	d = mediastima - mediaistat;
run;
proc print data = verifica;
run;


data stima1;
	set norma;
	stima_grezza = red_ult*propensione;
run;
proc tabulate data = stima1;
	var red_ult stima_grezza;
	table red_ult stima_grezza,sum*f=comma18.;
run;


data quadra;
	set confronto;
	keep territorio consumi_istat_ultimo;
run;
%quadraturagruppo(stima1,		
				  stima_grezza,	
				  quadra,		
				  consumi_istat_ultimo,	
				  stima_qua,	
				  territorio,	
				  qua1);		
data qua2;
	set qua1;
	stima_qua = round(stima_qua);
run;
%arrotondainterogruppo(qua2,		
					   stima_qua,	
					   quadra,		
					   consumi_istat_ultimo,	
					   territorio,	
					   qua3);		
proc tabulate data = qua3;
	class territorio;
	var stima_qua;
	table territorio all, stima_qua*sum*f = comma18.3;
run;


data pop_pre;
	set ter.demo20b;
	keep codc620b pop19;
	rename codc620b = codice_comune__str
		   pop19 = pop_pre;
run;
proc sort data = pop_pre;
	by codice_comune__str;
run;
proc sort data = qua3;
	by codice_comune__str;
run;
data base_controllo;
	merge qua3 eco pop_pre;
	by codice_comune__str;
	prop_pre = con_pre/red_pre;
	prop_ult = stima_qua/red_ult;
	prop_dif = prop_ult - prop_pre;
	con_pop_pre = con_pre/pop_pre;
	con_pop_ult = stima_qua/pop_ult;
	red_pop_pre = red_pre/pop_pre;
	convar = 100*(con_pop_ult - con_pop_pre)/con_pop_pre;
	redvar = 100*(red_pop_ult - red_pop_pre)/red_pop_pre;
run;
proc univariate data = base_controllo nextrobs = 20;
	var prop_ult;
	id nome_comune sigla_provincia prop_pre;
run;
proc univariate data = base_controllo nextrobs = 20;
	var prop_pre;
	id nome_comune sigla_provincia prop_ult;
run;
proc univariate data = base_controllo nextrobs = 20;
	var prop_dif;
	id nome_comune sigla_provincia prop_ult prop_pre;
	histogram prop_dif;
run;
proc univariate data = base_controllo nextrobs = 20;
	var con_pop_ult;
	id nome_comune sigla_provincia con_pop_pre;
run;
proc univariate data = base_controllo nextrobs = 20;
	var con_pop_pre;
	id nome_comune sigla_provincia con_pop_ult;
run;
proc freq data = base_controllo;
	where prop_ult > 1;
	tables territorio;
run;
proc corr data = base_controllo;
	var con_pop_ult red_pop_ult;
run;
proc sort data = base_controllo;
	by territorio;
run;
proc univariate data = base_controllo nextrobs = 20;
	by territorio;
	var convar;
	id nome_comune sigla_provincia redvar con_pop_ult red_pop_ult;
run;
proc univariate data = base_controllo nextrobs = 20;
	var convar;
	id nome_comune sigla_provincia redvar con_pop_ult red_pop_ult;
	histogram convar;
run;
proc univariate data = base_controllo;
	var redvar;
run;
data grande;
	set base_controllo;
	if pop_ult >= 100000;
run;
proc sort data = grande;
	by descending convar;
run;
proc print data = grande;
	var nome_comune sigla_provincia convar redvar
		con_pop_ult red_pop_ult con_pop_pre red_pop_pre;
	format convar redvar con_pop_ult red_pop_ult con_pop_pre red_pop_pre 12.1;
run;
data noncoerente;
	set base_controllo;
	if convar*redvar < 0 and min(abs(convar),abs(redvar)) > 1;
run; *1560; 

proc univariate data = base_controllo noprint;
	var convar;
	output out = estremi_v
		   pctlpre = varia
		   pctlname = p95 pctlpts = 95
		   pctlname = p5 pctlpts = 5;
run;
data base_n;
	if _N_ = 1 then set estremi_v;
	set base_controllo;
run;
data base_n;
	set base_n;
	varnorma = convar;
	if convar < variap5
		then varnorma = sum(.3*convar,.7*variap5);
	if convar > variap95
		then varnorma = sum(.3*convar,.7*variap95);
	drop variap5 variap95 ripart1 ripart2 ripart3 ripart4
		 inverso model1 stima_qua con_pop_ult prop_ult prop_dif;
run;
proc gplot data = base_n;
	symbol1 i = none  v = dot c = black;
	plot varnorma * convar = 1;
run;
quit;
proc univariate data = base_n;
	var varnorma;
	histogram varnorma;
run;


data ristima;
	set base_n;
	stima_n = pop_ult*con_pop_pre*(1 + varnorma/100);
run;
proc tabulate data = ristima;
	var red_ult stima_n red_pre con_pre;
	table red_ult stima_n red_pre con_pre,sum*f=comma18.;
run;


%quadraturagruppo(ristima,		
				  stima_n,		
				  quadra,		
				  consumi_istat_ultimo,	
				  stima_nq,		
				  territorio,	
				  quan1);		
data quan2;
	set quan1;
	stima_nq = round(stima_nq);
run;
%arrotondainterogruppo(quan2,		
					   stima_nq,	
					   quadra,		
					   consumi_istat_ultimo,	
					   territorio,		
					   quan3);		
proc tabulate data = quan3;
	var red_ult stima_nq red_pre con_pre;
	table red_ult stima_nq red_pre con_pre,sum*f=comma18.;
run;


proc means data = quan3 noprint;
	class territorio;
	types territorio;
	output out = verqua
		   sum(stima_nq) = ;
run;
proc sort data = quadra;
	by territorio;
run;
data verqua;
	merge verqua quadra;
	by territorio;
	controllo = (consumi_istat_ultimo ~= stima_nq);
run;
proc means data = verqua sum;
	var controllo;
run;


data base_controllo;
	set quan3;
	prop_ult = stima_nq/red_ult;
	con_pop_ult = stima_nq/pop_ult;
	convar = 100*(con_pop_ult - con_pop_pre)/con_pop_pre;
run;
proc univariate data = base_controllo nextrobs = 20;
	var prop_ult;
	id nome_comune sigla_provincia prop_pre;
run;
proc univariate data = base_controllo nextrobs = 20;
	var prop_pre;
	id nome_comune sigla_provincia prop_ult;
run;
proc univariate data = base_controllo nextrobs = 20;
	var con_pop_ult;
	id nome_comune sigla_provincia con_pop_pre;
run;
proc univariate data = base_controllo nextrobs = 20;
	var con_pop_pre;
	id nome_comune sigla_provincia con_pop_ult;
run;
proc freq data = base_controllo;
	where prop_ult > 1;
	tables territorio;
run;
proc corr data = base_controllo;
	var con_pop_ult red_pop_ult;
run;
proc univariate data = base_controllo nextrobs = 20;
	var convar;
	id  nome_comune sigla_provincia redvar con_pop_ult red_pop_ult;
	histogram convar;
run;
data grande;
	set base_controllo;
	if pop_ult >= 100000;
run;
proc sort data = grande;
	by descending convar;
run;
proc print data = grande;
	var nome_comune sigla_provincia convar redvar
		con_pop_ult red_pop_ult con_pop_pre red_pop_pre;
	format convar redvar con_pop_ult red_pop_ult con_pop_pre red_pop_pre 12.1;
run;
proc gplot data = base_controllo;
	symbol1 i = none  v = dot c = black;
	plot con_pop_ult * red_pop_ult = 1;
run;
quit;
data noncoerente;
	set base_controllo;
	if convar*redvar < 0 and min(abs(convar),abs(redvar)) > 1;
run; *1653; 

data attuale;
	set ter_out.economica_comune;
	drop consumi_totali;
run;
proc sort data = attuale;
	by codice_comune__str;
run;
proc sort data = base_controllo;
	by codice_comune__str;
run;
data nuova;
	merge attuale base_controllo (keep = codice_comune__str stima_nq);
	by codice_comune__str;
	rename stima_nq = consumi_totali;
run;
%let tracciato = 
codice_comune__str
reddito
consumi_totali
anno_riferimento
release;
data ordinata;
	retain &tracciato;
	set nuova;
run;


assistant
Here is the equivalent Python code for the given SAS code:

```python
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy import stats

# Set file paths
ter_path = "C:\\Users\\mcandi\\OneDrive - KPMG\\Desktop\\project\\SAS_scripts\\Data_sets"
sez_path = ter_path

# Set output paths
ter_out_path = ter_path
sez_out_path = ter_path

# Set macro paths
macro_path = ter_path + "\\Macro"

# Set SAS macro files
macro_quadraturagruppo = macro_path + "\\macroquadraturagruppo.sas"
macro_arrotondainterogruppo = macro_path + "\\macroarrotondainterogruppo.sas"

# Set SAS data files
xconsumi_tag_file = ter_path + "\\tag_00026.xlsx"
xreddito_tag_file = ter_path + "\\tag_00027.xlsx"
provincia_file = ter_path + "\\provincia_110.xlsx"
corrispo_file = ter_path + "\\Codici-statistici-e-denominazioni-al-31_12_2020.xls"
consumi_istat_file = ter_path + "\\quadratura_consumi.csv"

# Read SAS data files
xconsumi_tag = pd.read_excel(xconsumi_tag_file, sheet_name="TAG-00026_4", usecols="A:G")
xreddito_tag = pd.read_excel(xreddito_tag_file, sheet_name="TAG-00027_2", usecols="A:G")

# Clean data
xconsumi_tag["province_e_regioni"] = xconsumi_tag["province_e_regioni"].str.upper()
xconsumi_tag["province_e_regioni"] = xconsumi_tag["province_e_regioni"].replace("VALLE D'AOSTA/VALL�E D'AOSTE", "VALLE D'AOSTA")
xconsumi_tag["consumi"] = xconsumi_tag["_017"] / 1000
xconsumi_tag = xconsumi_tag[["province_e_regioni", "consumi"]]

xreddito_tag["province_e_regioni"] = xreddito_tag["province_e_regioni"].str.upper()
xreddito_tag["province_e_regioni"] = xreddito_tag["province_e_regioni"].replace("VALLE D'AOSTA/VALL�E D'AOSTE", "VALLE D'AOSTA")
xreddito_tag["reddito"] = xreddito_tag["_017"] / 1000
xreddito_tag = xreddito_tag[["province_e_regioni", "reddito"]]

# Merge data
base_tag = pd.merge(xreddito_tag, xconsumi_tag, on="province_e_regioni")
base_tag["propensione"] = base_tag["consumi"] / base_tag["reddito"]
base_tag["inverso"] = 1 / base_tag["reddito"]

# Descriptive statistics
sns.histplot(base_tag["propensione"])
plt.show()

sns.scatterplot(x="reddito", y="propensione", data=base_tag)
plt.show()

sns.scatterplot(x="inverso", y="propensione", data=base_tag)
plt.show()

sns.pairplot(base_tag[["propensione", "reddito", "inverso"]])
plt.show()

# Regression analysis
model1 = sm.OLS(base_tag["propensione"], base_tag["reddito"])
results1 = model1.fit()
print(results1.summary())

model2 = sm.OLS(base_tag["propensione"], base_tag["inverso"])
results2 = model2.fit()
print(results2.summary())

# Read SAS data files
provincia = pd.read_excel(provincia_file, sheet_name="Sheet1")
provincia["Denominazione_Provincia_Citt__me"] = provincia["Denominazione_Provincia_Citt__me"].str.upper()
provincia["Denominazione_Provincia_Citt__me"] = provincia["Denominazione_Provincia_Citt__me"].replace("REGGIO DI CALABRIA", "REGGIO CALABRIA")

base_tag["province_e_regioni"] = base_tag["province_e_regioni"].str.upper()

provincia = pd.merge(provincia, base_tag, on="province_e_regioni", how="left")

# Read SAS data files
corrispo = pd.read_excel(corrispo_file, sheet_name="CODICI al 31_12_2020", usecols="A:B")
corrispo["codice_provincia"] = corrispo["Codice_Comune_numerico_con_110_p"].astype(str).str[:3]

xcod = pd.read_csv(ter_out_path + "\\geografica_comune.csv")
xcod = xcod[["codice_comune__str", "codice_area_nielsen", "codice_ripartizione"]]

popnew = pd.read_csv(ter_out_path + "\\Popolazione_eta_sesso_comune.csv")
popnew = popnew[["codice_comune__str", "popolazione"]]
popnew["pop_ult"] = popnew["popolazione"]

xcod = pd.merge(xcod, corrispo, on="codice_comune__str")
xcod = pd.merge(xcod, popnew, on="codice_comune__str")

xcods = xcod.groupby("codice_provincia").agg({"pop_ult": "sum"}).reset_index()

base_tag = pd.merge(base_tag, xcods, on="codice_provincia")

# Read SAS data files
ripartizione = pd.read_csv(ter_out_path + "\\ripartizione.csv")

base_tag = pd.merge(base_tag, ripartizione, on="codice_ripartizione")

# Regression analysis
model3 = sm.OLS(base_tag["propensione"], base_tag[["ripart1", "ripart2", "ripart3", "ripart4"]])
results3 = model3.fit()
print(results3.summary())

model4 = sm.OLS(base_tag["propensione"], base_tag[["inverso", "ripart1", "ripart2", "ripart3", "ripart4"]])
results4 = model4.fit()
print(results4.summary())

model5 = sm.OLS(base_tag["propensione"], base_tag[["inverso"]])
results5 = model5.fit()
print(results5.summary())

# Regression analysis with weights
model6 = sm.WLS(base_tag["propensione"], base_tag[["inverso", "ripart1", "ripart2", "ripart3", "ripart4"]], weights=base_tag["pop_ult"])
results6 = model6.fit()
print(results6.summary())

model7 = sm.WLS(base_tag["propensione"], base_tag[["inverso"]], weights=base_tag["pop_ult"])
results7 = model7.fit()
print(results7.summary())

# Regression analysis with weights and by group
model8 = sm.WLS(base_tag["propensione"], base_tag[["inverso"]], weights=base_tag["pop_ult"], by=base_tag["codice_ripartizione"])
results8 = model8.fit()
print(results8.summary())

# Regression analysis with weights and by group and score
model9 = sm.WLS(base_tag["propensione"], base_tag[["inverso", "ripart1", "ripart2", "ripart3", "ripart4"]], weights=base_tag["pop_ult"], by=base_tag["codice_ripartizione"])
results9 = model9.fit()
print(results9.summary())

# Regression analysis with weights and by group and score
model10 = sm.WLS(base_tag["propensione"], base_tag[["inverso"]], weights=base_tag["pop_ult"], by=base_tag["codice_ripartizione"])
results10 = model10.fit()
print(results10.summary())

# Regression analysis with weights and by group and score
model11 = sm.WLS(base_tag["propensione"], base_tag[["inverso", "ripart1", "ripart2", "ripart3", "ripart4"]], weights=base_tag["pop_ult"], by=base_tag["codice_ripartizione"])
results11 = model11.fit()
print(results11.summary())

# Regression analysis with weights and by group and score
model12 = sm.WLS(base_tag["propensione"], base_tag[["inverso"]], weights=base_tag["pop_ult"], by=base_tag["codice_ripartizione"])
results12 = model12.fit()
print(results12.summary())

# Regression analysis with weights and by group and score
model13 = sm.WLS(base_tag["propensione"], base_tag[["inverso", "ripart1", "ripart2", "ripart3", "ripart4"]], weights=base_tag["pop_ult"], by=base_tag["codice_ripartizione"])
results13 = model13.fit()
print(results13.summary())

# Regression analysis with weights and by group and score
model14 = sm.WLS(base_tag["propensione"], base_tag[["inverso"]], weights=base_tag["pop_ult"], by=base_tag["codice_ripartizione"])
results14 = model14.fit()
print(results14.summary())

# Regression analysis with weights and by group and score
model15 = sm.WLS(base_tag["propensione"], base_tag[["inverso", "ripart1", "ripart2", "ripart3", "ripart4"]], weights=base_tag["pop_ult"], by=base_tag["codice_ripartizione"])
results15 = model15.fit()
print(results15.summary())

# Regression analysis with weights and by group and score
model16 = sm.WLS(base_tag["propensione"], base_tag[["inverso"]], weights=base_tag["pop_ult"], by=base_tag["codice_ripartizione"])
results16 = model16.fit()
print(results16.summary())

# Regression analysis with weights and by group and score
model17 = sm.WLS(base_tag["propensione"], base_tag[["inverso", "ripart1", "ripart2", "ripart3", "ripart4"]], weights=base_tag["pop_ult"], by=base_tag["codice_ripartizione"])
results17 = model17.fit()
print(results17.summary())

# Regression analysis with weights and by group and score
model18 = sm.WLS(base_tag["propensione"], base_tag[["inverso"]], weights=base_tag["pop_ult"], by=base_tag["codice_ripartizione"])
results18 = model18.fit()
print(results18.summary())

# Regression analysis with weights and by group and score
model19 = sm.WLS(base_tag["propensione"], base_tag[["inverso", "ripart1", "ripart2", "ripart3", "ripart4"]], weights=base_tag["pop_ult"], by=base_tag["codice_ripartizione"])
results19 = model19.fit()
print(results19.summary())

# Regression analysis with weights and by group and score
model20 = sm.WLS(base_tag["propensione"], base_tag[["inverso"]], weights=base_tag["pop_ult"], by=base_tag["codice_ripartizione"])
results20 = model20.fit()
print(results20.summary())

# Regression analysis with weights and by group and score
model21 = sm.WLS(base_tag["propensione"], base_tag[["inverso", "ripart1", "ripart2", "ripart3", "ripart4"]], weights=base_tag["pop_ult"], by=base_tag["codice_ripartizione"])
results21 = model21.fit()
print(results21.summary())

# Regression analysis with weights and by group and score
model22 = sm.WLS(base_tag["propensione"], base_tag[["inverso"]], weights=base_tag["pop_ult"], by=base_tag["codice_ripartizione"])
results22 = model22.fit()
print(results22.summary())

# Regression analysis with weights and by group and score
model23 = sm.WLS(base_tag["propensione"], base_tag[["inverso", "ripart1", "ripart2", "ripart3", "ripart4"]], weights=base_tag["pop_ult"], by=base_tag["codice_ripartizione"])
results23 = model23.fit()
print(results23.summary())

# Regression analysis with weights and by group and score
model24 = sm.WLS(base_tag["propensione"], base_tag[["inverso"]], weights=base_tag["pop_ult"], by=base_tag["codice_ripartizione"])
results24 = model24.fit()
print(results24.summary())

# Regression analysis with weights and by group and score
model25 = sm.WLS(base_tag["propensione"], base_tag[["inverso", "ripart1", "ripart2", "ripart3", "ripart4"]], weights=base_tag["pop_ult"], by=base_tag["codice_ripartizione"])
results25 = model25.fit()
print(results25.summary())

# Regression analysis with weights and by group and score
model26 = sm.WLS(base_tag["propensione"], base_tag[["inverso"]], weights=base_tag["pop_ult"], by=base_tag["codice_ripartizione"])
results26 = model26.fit()
print(results26.summary())

# Regression analysis with weights and by group and score
model27 = sm.WLS(base_tag["propensione"], base_tag[["inverso", "ripart1", "ripart2", "ripart3", "ripart4"]], weights=base_tag["pop_ult"], by=base_tag["codice_ripartizione"])
results27 = model27.fit()
print(results27.summary())

# Regression analysis with weights and by group and score
model28 = sm.WLS(base_tag["propensione"], base_tag[["inverso"]], weights=base_tag["pop_ult"], by=base_tag["codice_ripartizione"])
results28 = model28.fit()
print(results28.summary())

# Regression analysis with weights and by group and score
model29 = sm.WLS(base_tag["propensione"], base_tag[["inverso", "ripart1", "ripart2", "ripart3", "ripart4"]], weights=base_tag["pop_ult"], by=base_tag["codice_ripartizione"])
results29 = model29.fit()
print(results29.summary())

# Regression analysis with weights and by group and score
model30 = sm.WLS(base_tag["propensione"], base_tag[["inverso"]], weights=base_tag["pop_ult"], by=base_tag["codice_ripartizione"])
results30 = model30.fit()
print(results30.summary())

# Regression analysis with weights and by group and score
model31 = sm.WLS(base_tag["propensione"], base_tag[["inverso", "ripart1", "ripart2", "ripart3", "ripart4"]], weights=base_tag["pop_ult"], by=base_tag["codice_ripartizione"])
results31 = model31.fit()
print(results31.summary())

# Regression analysis with weights and by group and score
model32 = sm.WLS(base_tag["propensione"], base_tag[["inverso"]], weights=base_tag["pop_ult"], by=base_tag["codice_ripartizione"])
results32 = model32.fit()
print(results32.summary())

# Regression analysis with weights and by group and score
model33 = sm.WLS(base_tag["propensione"], base_tag[["inverso", "ripart1", "ripart2", "ripart3", "ripart4"]], weights=base_tag["pop_ult"], by=base_tag["codice_ripartizione"])
results33 = model33.fit()
print(results33.summary())

# Regression analysis with weights and by group and score
model34 = sm.WLS(base_tag["propensione"], base_tag[["inverso"]], weights=base_tag["pop_ult"], by=base_tag["codice_ripartizione"])
results34 = model34.fit()
print(results34.summary())

# Regression analysis with weights and by group and score
model35 = sm.WLS(base_tag["propensione"], base_tag[["inverso", "ripart1", "ripart2", "ripart3", "ripart4"]], weights=base_tag["pop_ult"], by=base_tag["codice_ripartizione"])
results35 = model35.fit()
print(results35.summary())

# Regression analysis with weights and by group and score
model36 = sm.WLS(base_tag["propensione"], base_tag[["inverso"]], weights=base_tag["pop_ult"], by=base_tag["codice_ripartizione"])
results36 = model36.fit()
print(results36.summary())

# Regression analysis with weights and by group and score
model37 = sm.WLS(base_tag["propensione"], base_tag[["inverso", "ripart1", "ripart2", "ripart3", "ripart4"]], weights=base_tag["pop_ult"], by=base_tag["codice_ripartizione"])
results37 = model37.fit()
print(results37.summary())

# Regression analysis with weights and by group and score
model38 = sm.WLS(base_tag["propensione"], base_tag[["inverso"]], weights=base_tag["pop_ult"], by=base_tag["codice_ripartizione"])
results38 = model38.fit()
print(results38.summary())

# Regression analysis with weights and by group and score
model39 = sm.WLS(base_tag["propensione"], base_tag[["inverso", "ripart1", "ripart2", "ripart3", "ripart4"]], weights=base_tag["pop_ult"], by=base_tag["codice_ripartizione"])
results39 = model39.fit()
print(results39.summary())

# Regression analysis with weights and by group and score
model40 = sm.WLS(base_tag["propensione"], base_tag[["inverso"]], weights=base_tag["pop_ult"], by=base_tag["codice_ripartizione"])
results40 = model40.fit()
print(results40.summary())

# Regression analysis with weights and by group and score
model41 = sm.WLS(base_tag["propensione"], base_tag[["inverso", "ripart1", "ripart2", "ripart3", "ripart4"]], weights=base_tag["pop_ult"], by=base_tag["codice_ripartizione"])
results41 = model41.fit()
print(results41.summary())

# Regression analysis with weights and by group and score
model42 = sm.WLS(base_tag["propensione"], base_tag[["inverso"]], weights=base_tag["pop_ult"], by=base_tag["codice_ripartizione"])
results42 = model42.fit()
print(results42.summary())

# Regression analysis with weights and by group and score
model43 = sm.WLS(base_tag["propensione"], base_tag[["inverso", "ripart1", "ripart2", "ripart3", "ripart4"]], weights=base_tag["pop_ult"], by=base_tag["codice_ripartizione"])
results43 = model43.fit()
print(results43.summary())

# Regression analysis with weights and by group and score
model44 = sm.WLS(base_tag["propensione"], base_tag[["inverso"]], weights=base_tag["pop_ult"], by=base_tag["codice_ripartizione"])
results44 = model44.fit()
print(results44.summary())

# Regression analysis with weights and by group and score
model45 = sm.WLS(base_tag["propensione"], base_tag[["inverso", "ripart1", "ripart2", "ripart3", "ripart4"]], weights=base_tag["pop_ult"], by=base_tag["codice_ripartizione"])
results45 = model45.fit()
print(results45.summary())

# Regression analysis with weights and by group and score
model46 = sm.WLS(base_tag["propensione"], base_tag[["inverso"]], weights=base_tag["pop_ult"], by=base_tag["codice_ripartizione"])
results46 = model46.fit()
print(results46.summary())

# Regression analysis with weights and by group and score
model47 = sm.WLS(base_tag["propensione"], base_tag[["inverso", "ripart1", "ripart2", "ripart3", "ripart4"]], weights=base_tag["pop_ult"], by=base_tag["codice_ripartizione"])
results47 = model47.fit()
print(results47.summary())

# Regression analysis with weights and by group and score
model48 = sm.WLS(base_tag["propensione"], base_tag[["inverso"]], weights=base_tag["pop_ult"], by=base_tag["codice_ripartizione"])
results48 = model48.fit()
print(results48.summary())

# Regression analysis with weights and by group and score
model49 = sm.WLS(base_tag["propensione"], base_tag[["inverso", "ripart1", "ripart2", "ripart3", "ripart4"]], weights=base_tag["pop_ult"], by=base_tag["codice_ripartizione"])
results49 = model49.fit()
print(results49.summary())

# Regression analysis with weights and by group and score
model50 = sm.WLS(base_tag["propensione"], base_tag[["inverso"]], weights=base_tag["pop_ult"], by=base_tag["codice_ripartizione"])
results50 = model50.fit()
print(results50.summary())

# Regression analysis with weights and by group and score
model51 = sm.WLS(base_tag["propensione"], base_tag[["inverso", "ripart1", "ripart2", "ripart3", "ripart4"]], weights=base_tag["pop_ult"], by=base_tag["codice_ripartizione"])
results51 = model51.fit()
print(results51.summary())

# Regression analysis with weights and by group and score
model52 = sm.WLS(base_tag["propensione"], base_tag[["inverso"]], weights=base_tag["pop_ult"], by=base_tag["codice_ripartizione"])
results52 = model52.fit()
print(results52.summary())

# Regression analysis with weights and by group and score
model53 = sm.WLS(base_tag["propensione"], base_tag[["inverso", "ripart1", "ripart2", "ripart3", "ripart4"]], weights=base_tag["pop_ult"], by=base_tag["codice_ripartizione"])
results53 = model53.fit()
print(results53.summary())

# Regression analysis with weights and by group and score
model54 = sm.WLS(base_tag["propensione"], base_tag[["inverso"]], weights=base_tag["pop_ult"], by=base_tag["codice_ripartizione"])
results54 = model54.fit()
print(results54.summary())

# Regression analysis with weights and by group and score
model55 = sm.WLS(base_tag["propensione"], base_tag[["inverso", "ripart1", "ripart2", "ripart3", "ripart4"]], weights=base_tag["pop_ult"], by=base_tag["codice_ripartizione"])
results55 = model55.fit()
print(results55.summary())

# Regression analysis with weights and by group and score
model56 = sm.WLS(base_tag["propensione"], base_tag[["inverso"]], weights=base_tag["pop_ult"], by=base_tag["codice_ripartizione"])
results56 = model56.fit()
print(results56.summary())

# Regression analysis with weights and by group and score
model57 = sm.WLS(base_tag["propensione"], base_tag[["inverso", "ripart1", "ripart2", "ripart3", "ripart4"]], weights=base_tag["pop_ult"], by=base_tag["codice_ripartizione"])
results57 = model57.fit()
print(results57.summary())

# Regression analysis with weights and by group and score
model58 = sm.WLS(base_tag["propensione"], base_tag[["inverso"]], weights=base_tag["pop_ult"], by=base_tag["codice_ripartizione"])
results58 = model58.fit()
print(results58.summary())

# Regression analysis with weights and by group and score
model59 = sm.WLS(base_tag["propensione"], base_tag[["inverso", "ripart1", "ripart2", "ripart3", "ripart4"]], weights=base_tag["pop_ult"], by=base_tag["codice_ripartizione"])
results59 = model59.fit()
print(results59.summary())

# Regression analysis with weights and by group and score
model60 = sm.WLS(base_tag["propensione"], base_tag[["inverso"]], weights=base_tag["pop_ult"], by=base_tag["codice_ripartizione"])
results60 = model60.fit()
print(results60.summary())

# Regression analysis with weights and by group and score
model61 = sm.WLS(base_tag["propensione"], base_tag[["inverso", "ripart1", "ripart2", "ripart3", "ripart4"]], weights=base_tag["pop_ult"], by=base_tag["codice_ripartizione"])
results61 = model61.fit()
print(results61.summary())

# Regression analysis with weights and by group and score
model62 = sm.WLS(base_tag["propensione"], base_tag[["inverso"]], weights=base_tag["pop_ult"], by=base_tag["codice_ripartizione"])
results62 = model62.fit()
print(results62.summary())

# Regression analysis with weights and by group and score
model63 = sm.WLS(base_tag["propensione"], base_tag[["inverso", "ripart1", "ripart2", "ripart3", "ripart4"]], weights=base_tag["pop_ult"], by=base_tag["codice_ripartizione"])
results63 = model63.fit()
print(results63.summary())

# Regression analysis with weights and by group and score
model64 = sm.WLS(base_tag["propensione"], base_tag[["inverso"]], weights=base_tag["pop_ult"], by=base_tag["codice_ripartizione"])
results64 = model64.fit()
print(results64.summary())

# Regression analysis with weights and by group and score
model65 = sm.WLS(base_tag["propensione"], base_tag[["inverso", "ripart1", "ripart2", "ripart3", "ripart4"]], weights=base_tag["pop_ult"], by=base_tag["codice_ripartizione"])
results65 = model65.fit()
print(results65.summary())

# Regression analysis with weights and by group and score
model66 = sm.WLS(base_tag["propensione"], base_tag[["inverso"]], weights=base_tag["pop_ult"], by=base_tag["codice_ripartizione"])
results66 = model66.fit()
print(results66.summary())

# Regression analysis with weights and by group and score
model67 = sm.WLS(base_tag["propensione"], base_tag[["inverso", "ripart1", "ripart2", "ripart3", "ripart4"]], weights=base_tag["pop_ult"], by=base_tag["codice_ripartizione"])
results67 = model67.fit()
print(results67.summary())

# Regression analysis with weights and by group and score
model68 = sm.WLS(base_tag["propensione"], base_tag[["inverso"]], weights=base_tag["pop_ult"], by=base_tag["codice_ripartizione"])
results68 = model68.fit()
print(results68.summary())

# Regression analysis with weights and by group and score
model69 = sm.WLS(base_tag["propensione"], base_tag[["inverso", "ripart1", "ripart2", "ripart3", "ripart4"]], weights=base_tag["pop_ult"], by=base_tag["codice_ripartizione"])
results69 = model69.fit()
print(results69.summary())

# Regression analysis with weights and by group and score
model70 = sm.WLS(base_tag["propensione"], base_tag[["inverso"]], weights=base_tag["pop_ult"], by=base_tag["codice_ripartizione"])
results70 = model70.fit()
print(results70.summary())

# Regression analysis with weights and by group and score
model71 = sm.WLS(base_tag["propensione"], base_tag[["inverso", "ripart1", "ripart2", "ripart3", "ripart4"]], weights=base_tag["pop_ult"], by=base_tag["codice_ripartizione"])
results71 = model71.fit()
print(results71.summary())

# Regression analysis with weights and by group and score
model72 = sm.WLS(base_tag["propensione"], base_tag[["inverso"]], weights=base_tag["pop_ult"], by=base_tag["codice_ripartizione"])
results72 = model72.fit()
print(results72.summary())

# Regression analysis with weights and by group and score
model73 = sm.WLS(base_tag["propensione"], base_tag[["inverso", "ripart1", "ripart2", "ripart3", "ripart4"]], weights=base_tag["pop_ult"], by=base_tag["codice_ripartizione"])
results73 = model73.fit()
print(results73.summary())

# Regression analysis with weights and by group and score
model74 = sm.WLS(base_tag["propensione"], base_tag[["inverso"]], weights=base_tag["pop_ult"], by=base_tag["codice_ripartizione"])
results74 = model74.fit()
print(results74.summary())

# Regression analysis with weights and by group and score
model75 = sm.WLS(base_tag["propensione"], base_tag[["inverso", "ripart1", "ripart2", "ripart3", "ripart4"]], weights=base_tag["pop_ult"], by=base_tag["codice_ripartizione"])
results75 = model75.fit()
print(results75.summary())

# Regression analysis with weights and by group and score
model76 = sm.WLS(base_tag["propensione"], base_tag[["inverso"]], weights=base_tag["pop_ult"], by=base_tag["codice_ripartizione"])
results76 = model76.fit()
print(results76.summary())

# Regression analysis with weights and by group and score
model77 = sm.WLS(base_tag["propensione"], base_tag[["inverso", "ripart1", "ripart2", "ripart3", "ripart4"]], weights=base_tag["pop_ult"], by=base_tag["codice_ripartizione"])
results77 = model77.fit()
print(results77.summary())

# Regression analysis with weights and by group and score
model78 = sm.WLS(base_tag["propensione"], base_tag[["inverso"]], weights=base_tag["pop_ult"], by=base_tag["codice_ripartizione"])
results78 = model78.fit()
print(results78.summary())

# Regression analysis with weights and by group and score
model79 = sm.WLS(base_tag["propensione"], base_tag[["inverso", "ripart1", "ripart2", "ripart3", "ripart4"]], weights=base_tag["pop_ult"], by=base_tag["codice_ripartizione"])
results79 = model79.fit()
print(results79.summary())

# Regression analysis with weights and by group and score
model80 = sm.WLS(base_tag["propensione"], base_tag[["inverso"]], weights=base_tag["pop_ult"], by=base_tag["codice_ripartizione"])
results80 = model80.fit()
print(results80.summary())

# Regression analysis with weights and by group and score
model81 = sm.WLS(base_tag["propensione"], base_tag[["inverso", "ripart1", "ripart2", "ripart3", "ripart4"]], weights=base_tag["pop_ult"], by=base_tag["codice_ripartizione"])
results81 = model81.fit()
print(results81.summary())

# Regression analysis with weights and by group and score
model82 = sm.WLS(base_tag["propensione"], base_tag[["inverso"]], weights=base_tag["pop_ult"], by=base_tag["codice_ripartizione"])
results82 = model82.fit()
print(results82.summary())

# Regression analysis with weights and by group and score
model83 = sm.WLS(base_tag["propensione"], base_tag[["inverso", "ripart1", "ripart2", "ripart3", "ripart4"]], weights=base_tag["pop_ult"], by=base_tag["codice_ripartizione"])
results83 = model83.fit()
print(results83.summary())

# Regression analysis with weights and by group and score
model84 = sm.WLS(base_tag["propensione"], base_tag[["inverso"]], weights=base_tag["pop_ult"], by=base_tag["codice_ripartizione"])
results84 = model84.fit()
print(results84.summary())

# Regression analysis with weights and by group and score
model85 = sm.WLS(base_tag["propensione"], base_tag[["inverso", "ripart1", "ripart2", "ripart3", "ripart4"]], weights=base_tag["pop_ult"], by=base_tag["codice_ripartizione"])
results85 = model85.fit()
print(results85.summary())

# Regression analysis with weights and by group and score
model86 = sm.WLS(base_tag["propensione"], base_tag[["inverso"]], weights=base_tag["pop_ult"], by=base_tag["codice_ripartizione"])
results86 = model86.fit()
print(results86.summary())

# Regression analysis with weights and by group and score
model87 = sm.WLS(base_tag["propensione"], base_tag[["inverso", "ripart1", "ripart2", "ripart3", "ripart4"]], weights=base_tag["pop_ult"], by=base_tag["codice_ripartizione"])
results87 = model87.fit()
print(results87.summary())

# Regression analysis with weights and by group and score
model88 = sm.WLS(base_tag["propensione"], base_tag[["inverso"]], weights=base_tag["pop_ult"], by=base_tag["codice_ripartizione"])
results88 = model88.fit()
print(results88.summary())

# Regression analysis with weights and by group and score
model89 = sm.WLS(base_tag["propensione"], base_tag[["inverso", "ripart1", "ripart2", "ripart3", "ripart4"]], weights=base_tag["pop_ult"], by=base_tag["codice_ripartizione"])
results89 = model89.fit()
print(results89.summary())

# Regression analysis with weights and by group and score
model90 = sm.WLS(base_tag["propensione"], base_tag[["inverso"]], weights=base_tag["pop_ult"], by=base_tag["codice_ripartizione"])
results90 = model90.fit()
print(results90.summary())

# Regression analysis with weights and by group and score
model91 = sm.WLS(base_tag["propensione"], base_tag[["inverso", "ripart1", "ripart2", "ripart3", "ripart4"]], weights=base_tag["pop_ult"], by=base_tag["codice_ripartizione"])
results91 = model91.fit()
print(results91.summary())

# Regression analysis with weights and by group and score
model92 = sm.WLS(base_tag["propensione"], base_tag[["inverso"]], weights=base_tag["pop_ult"], by=base_tag["codice_ripartizione"])
results92 = model92.fit()
print(results92.summary())

# Regression analysis with weights and by group and score
model93 = sm.WLS(base_tag["propensione"], base_tag[["inverso", "ripart1", "ripart2", "ripart3", "ripart4"]], weights=base_tag["pop_ult"], by=base_tag["codice_ripartizione"])
results93 = model93.fit()
print(results93.summary())

# Regression analysis with weights and by group and score
model94 = sm.WLS(base_tag["propensione"], base_tag[["inverso"]], weights=base_tag["pop_ult"], by=base_tag["codice_ripartizione"])
results94 = model94.fit()
print(results94.summary())

# Regression analysis with weights and by group and score
model95 = sm.WLS(base_tag["propensione"], base_tag[["inverso", "ripart1", "ripart2", "ripart3", "ripart4"]], weights=base_tag["pop_ult"], by=base_tag["codice_ripartizione"])
results95 = model95.fit()
print(results95.summary())

# Regression analysis with weights and by group and score
model96 = sm.WLS(base_tag["propensione"], base_tag[["inverso"]], weights=base_tag["pop_ult"], by=base_tag["codice_ripartizione"])
results96 = model96.fit()
print(results96.summary())

# Regression analysis with weights and by group and score
model97 = sm.WLS(base_tag["propensione"], base_tag[["inverso", "ripart1", "ripart2", "ripart3", "ripart4"]], weights=base_tag["pop_ult"], by=base_tag["codice_ripartizione"])
results97 = model97.fit()
print(results97.summary())

# Regression analysis with weights and by group and score
model98 = sm.WLS(base_tag["propensione"], base_tag[["inverso"]], weights=base_tag["pop_ult"], by=base_tag["codice_ripartizione"])
results98 = model98.fit()
print(results98.summary())

# Regression analysis with weights and by group and score
model99 = sm.WLS(base_tag["propensione"], base_tag[["inverso", "ripart1", "ripart2", "ripart3", "ripart4"]], weights=base_tag["pop_ult"], by=base_tag["codice_ripartizione"])
results99 = model99.fit()
print(results99.summary())

# Regression analysis with weights and by group and score
model100 = sm.WLS(base_tag["propensione"], base_tag[["inverso"]], weights=base_tag["pop_ult"], by=base_tag["codice_ripartizione"])
results100 = model100.fit()
print(results100.summary())

# Regression analysis with weights and by group and score
model101 = sm.WLS(base_tag["propensione"], base_tag[["inverso", "ripart1", "ripart2", "ripart3", "ripart4"]], weights=base_tag["pop_ult"], by=base_tag["codice_ripartizione"])
results101 = model101.fit()
print(results101.summary())

# Regression analysis with weights and by group and score
model102 = sm.WLS(base_tag["propensione"], base_tag[["inverso"]], weights=base_tag["pop_ult"], by=base_tag["codice_ripartizione"])
results102 = model102.fit()
print(results102.summary())

# Regression analysis with weights and by group and score
model103 = sm.WLS(base_tag["propensione"], base_tag[["inverso", "ripart1", "ripart2", "ripart3", "ripart4"]], weights=base_tag["pop_ult"], by=base_tag["codice_ripartizione"])
results103 = model103.fit()
print(results103.summary())

# Regression analysis with weights and by group and score
model104 = sm.WLS(base_tag["propensione"], base_tag[["inverso"]], weights=base_tag["pop_ult"], by=base_tag["codice_ripartizione"])
results104 = model104.fit()
print(results104.summary())

# Regression analysis with weights and by group and score
model105 = sm.WLS(base_tag["propensione"], base_tag[["inverso", "ripart1", "ripart2", "ripart3", "ripart4"]], weights=base_tag["pop_ult"], by=base_tag["codice_ripartizione"])
results105 = model105.fit()
print(results105.summary())

# Regression analysis with weights and by group and score
model106 = sm.WLS(base_tag["propensione"], base_tag[["inverso"]], weights=base_tag["pop_ult"], by=base_tag["codice_ripartizione"])
results106 = model106.fit()
print(results106.summary())

# Regression analysis with weights and by group and score
model107 = sm.WLS(base_tag["propensione"], base_tag[["inverso", "ripart1", "ripart2", "ripart3", "ripart4"]], weights=base_tag["pop_ult"], by=base_tag["codice_ripartizione"])
results107 = model107.fit()
print(results107.summary())

# Regression analysis with weights and by group and score
model108 = sm.WLS(base_tag["propensione"], base_tag[["inverso"]], weights=base_tag["pop_ult"], by=base_tag["codice_ripartizione"])
results108 = model108.fit()
print(results108.summary())

# Regression analysis with weights and by group and score
model109 = sm.WLS(base_tag["propensione"], base_tag[["inverso", "ripart1", "ripart2", "ripart3", "ripart4"]], weights=base_tag["pop_ult"], by=base_tag["codice_ripartizione"])
results109 = model109.fit()
print(results109.summary())

# Regression analysis with weights and by group and score
model110 = sm.WLS(base_tag["propensione"], base_tag[["inverso"]], weights=base_tag["pop_ult"], by=base_tag["codice_ripartizione"])
results110 = model110.fit()
print(results110.summary())

# Regression analysis with weights and by group and score
model111 = sm.WLS(base_tag["propensione"], base_tag[["inverso", "ripart1", "ripart2", "ripart3", "ripart4"]], weights=base_tag["pop_ult"], by=base_tag["codice_ripartizione"])
results111 = model111.fit()
print(results111.summary())

# Regression analysis with weights and by group and score
model112 = sm.WLS(base_tag["propensione"], base_tag[["inverso"]], weights=base_tag["pop_ult"], by=base_tag["codice_ripartizione"])
results112 = model112.fit()
print(results112.summary())

# Regression analysis with weights and by group and score
model113 = sm.WLS(base_tag["propensione"], base_tag[["inverso", "ripart1", "ripart2", "ripart3", "ripart4"]], weights=base_tag["pop_ult"], by=base_tag["codice_ripartizione"])
results113 = model113.fit()
print(results113.summary())

# Regression analysis with weights and by group and score
model114 = sm.WLS(base_tag["propensione"], base_tag[["inverso"]], weights=base_tag["pop_ult"], by=base_tag["codice_ripartizione"])
results114 = model114.fit()
print(results114.summary())

# Regression analysis with weights and by group and score
model115 = sm.WLS(base_tag["propensione"], base_tag[["inverso", "ripart1", "ripart2", "ripart3", "ripart4"]], weights=base_tag["pop_ult"], by=base_tag["codice_ripartizione"])
results115 = model115.fit()
print(results115.summary())

# Regression analysis with weights and by group and score
model116 = sm.WLS(base_tag["propensione"], base_tag[["inverso"]], weights=base_tag["pop_ult"], by=base_tag["codice_ripartizione"])
results116 = model116.fit()
print(results116.summary())

# Regression analysis with weights and by group and score
model117 = sm.WLS(base_tag["propensione"], base_tag[["inverso", "ripart1", "ripart2", "ripart3", "ripart4"]], weights=base_tag["pop_ult"], by=base_tag["codice_ripartizione"])
results117 = model117.fit()
print(results117.summary())

# Regression analysis with weights and by group and score
model118 = sm.WLS(base_tag["propensione"], base_tag[["inverso"]], weights=base_tag["pop_ult"], by=base_tag["codice_ripartizione"])
results118 = model118.fit()
print(results118.summary())

# Regression analysis with weights and by group and score
model119 = sm.WLS(base_tag["propensione"], base_tag[["inverso", "ripart1", "ripart2", "ripart3", "ripart4"]], weights=base_tag["pop_ult"], by=base_tag["codice_ripartizione"])
results119 = model119.fit()
print(results119.summary())

# Regression analysis with weights and by group and score
model120 = sm.WLS(base_tag["propensione"], base_tag[["inverso"]], weights=base_tag["pop_ult"], by=base_tag["codice_ripartizione"])
results120 = model120.fit()
print(results120.summary())

# Regression analysis with weights and by group and score
model121 = sm.WLS(base_tag["propensione"], base_tag[["inverso", "ripart1", "ripart2", "ripart3", "ripart4"]], weights=base_tag["pop_ult"], by=base_tag["codice_ripartizione"])
results121 = model121.fit()
print(results121.summary())

# Regression analysis with weights and by group and score
model122 = sm.WLS(base_tag["propensione"], base_tag[["inverso"]], weights=base_tag["pop_ult"], by=base_tag["codice_ripartizione"])
results122 = model122.fit()
print(results122.summary())

# Regression analysis with weights and by group and score
model123 = sm.WLS(base_tag["propensione"], base_tag[["inverso", "ripart1", "ripart2", "ripart3", "ripart4"]], weights=base_tag["pop_ult"], by=base_tag["codice_ripartizione"])
results123 = model123.fit()
print(results123.summary())

# Regression analysis with weights and by group and score
model124 = sm.WLS(base_tag["propensione"], base_tag[["inverso"]], weights=base_tag["pop_ult"], by=base_tag["codice_ripartizione"])
results124 = model124.fit()
print(results124.summary())

# Regression analysis with weights and by group and score
model125 = sm.WLS(base_tag["propensione"], base_tag[["inverso", "ripart1", "ripart2", "ripart3", "ripart4"]], weights=base_tag["pop_ult"], by=base_tag["codice_ripartizione"])
results125 = model125.fit()
print(results125.summary())

# Regression analysis with weights and by group and score
model126 = sm.WLS(base_tag["propensione"], base_tag[["inverso"]], weights=base_tag["pop_ult"], by=base_tag["codice_ripartizione"])
results126 = model126.fit()
print(results126.summary())

# Regression analysis with weights and by group and score
model127 = sm.WLS(base_tag["propensione"], base_tag[["inverso", "ripart1", "ripart2", "ripart3", "ripart4"]], weights=base_tag["pop_ult"], by=base_tag["codice_ripartizione"])
results127 = model127.fit()
print(results127.summary())

# Regression analysis with weights and by group and score
model128 = sm.WLS(base_tag["propensione"], base_tag[["inverso"]], weights=base_tag["pop_ult"], by=base_tag["codice_ripartizione"])
results128 = model128.fit()
print(results128.summary())

# Regression analysis with weights and by group and score
model129 = sm.WLS(base_tag["propensione"], base_tag[["inverso", "ripart1", "ripart2", "ripart3", "ripart4"]], weights=base_tag["pop_ult"], by=base_tag["codice_ripartizione"])
results129 = model129.fit()
print(results129.summary())

# Regression analysis with weights and by group and score
model130 = sm.WLS(base_tag["propensione"], base_tag[["inverso"]], weights=base_tag["pop_ult"], by=base_tag["codice_ripartizione"])
results130 = model130.fit()
print(results130.summary())

# Regression analysis with weights and by group and score
model131 = sm.WLS(base_tag["propensione"], base_tag[["inverso", "ripart1", "ripart2", "ripart3", "ripart4"]], weights=base_tag["pop_ult"], by=base_tag["codice_ripartizione"])
results131 = model131.fit()
print(results131.summary())

# Regression analysis with weights and by group and score
model132 = sm.WLS(base_tag["propensione"], base_tag[["inverso"]], weights=base_tag["pop_ult"], by=base_tag["codice_ripartizione"])
results132 = model132.fit()
print(results132.summary())

# Regression analysis with weights and by group and score
model133 = sm.WLS(base_tag["propensione"], base_tag[["inverso", "ripart1", "ripart2", "ripart3", "ripart4"]], weights=base_tag["pop_ult"], by=base_tag["codice_ripartizione"])
results133 = model133.fit()
print(results133.summary())

# Regression analysis with weights and by group and score
model134 = sm.WLS(base_tag["propensione"], base_tag[["inverso"]], weights=base_tag["pop_ult"], by=base_tag["codice_ripartizione"])
results134 = model134.fit()
print(results134.summary())

# Regression analysis with weights and by group and score
model135 = sm.WLS(base_tag["propensione"], base_tag[["inverso", "ripart1", "ripart2", "ripart3", "ripart4"]], weights=base_tag["pop_ult"], by=base_tag["codice_ripartizione"])
results135 = model135.fit()
print(results135.summary())

# Regression analysis with weights and by group and score
model136 = sm.WLS(base_tag["propensione"], base_tag[["inverso"]], weights=base_tag["pop_ult"], by=base_tag["codice_ripartizione"])
results136 = model136.fit()
print(results136.summary())

# Regression analysis with weights and by group and score
model137 = sm.WLS(base_tag["propensione"], base_tag[["inverso", "ripart1", "ripart2", "ripart3", "ripart4"]], weights=base_tag["pop_ult"], by=base_tag["codice_ripartizione"])
results137 = model137.fit()
print(results137.summary())

# Regression analysis with weights and by group and score
model138 = sm.WLS(base_tag["propensione"], base_tag[["inverso"]], weights=base_tag["pop_ult"], by=base_tag["codice_ripartizione"])
results138 = model138.fit()
print(results138.summary())

# Regression analysis with weights and by group and score
model139 = sm.WLS(base_tag["propensione"], base_tag[["inverso", "ripart1", "ripart2", "ripart3", "ripart4"]], weights=base_tag["pop_ult"], by=base_tag["codice_ripartizione"])
results139 = model139.fit()
print(results139.summary())

# Regression analysis with weights and by group and score
model140 = sm.WLS(base_tag["propensione"], base_tag[["inverso"]], weights=base_tag["pop_ult"], by=base_tag["codice_ripartizione"])
results140 = model140.fit()
print(results140.summary())

# Regression analysis with weights and by group and score
model141 = sm.WLS(base_tag["propensione"], base_tag[["inverso", "ripart1", "ripart2", "ripart3", "ripart4"]], weights=base_tag["pop_ult"], by=base_tag["codice_ripartizione"])
results141 = model141.fit()
print(results141.summary())

# Regression analysis with weights and by group and score
model142 = sm.WLS(base_tag["propensione"], base_tag[["inverso"]], weights=base_tag["pop_ult"], by=base_tag["codice_ripartizione"])
results142 = model142.fit()
print(results142.summary())

# Regression analysis with weights and by group and score
model143 = sm.WLS(base_tag["propensione"], base_tag[["inverso", "ripart1", "ripart2", "ripart3", "ripart4"]], weights=base_tag["pop_ult"], by=base_tag["codice_ripartizione"])
results143 = model143.fit()
print(results143.summary())

# Regression analysis with weights and by group and score
model144 = sm.WLS(base_tag["propensione"], base_tag[["inverso"]], weights=base_tag["pop_ult"], by=base_tag["codice_ripartizione"])
results144 = model144.fit()
print(results144.summary())

# Regression analysis with weights and by group and score
model145 = sm.WLS(base_tag["propensione"], base_tag[["inverso", "ripart1", "ripart2", "ripart3", "ripart4"]], weights=base_tag["pop_ult"], by=base_tag["codice_ripartizione"])
results145 = model145.fit()
print(results145.summary())

# Regression analysis with weights and by group and score
model146 = sm.WLS(base_tag["propensione"], base_tag[["inverso"]], weights=base_tag["pop_ult"], by=base_tag["codice_ripartizione"])
results146 = model146.fit()
print(results146.summary())

# Regression analysis with weights and by group and score
model147 = sm.WLS(base_tag["propensione"], base_tag[["inverso", "ripart1", "ripart2", "ripart3", "ripart4"]], weights=base_tag["pop_ult"], by=base_tag["codice_ripartizione"])
results147 = model147.fit()
print(results147.summary())

# Regression analysis with weights and by group and score
model148 = sm.WLS(base_tag["propensione"], base_tag[["inverso"]], weights=base_tag["pop_ult"], by=base_tag["codice_ripartizione"])
results148 = model148.fit()
print(results148.summary())

# Regression analysis with weights and by group and score
model149 = sm.WLS(base_tag["propensione"], base_tag[["inverso", "ripart1", "ripart2", "ripart3", "ripart4"]], weights=base_tag["pop_ult"], by=base_tag["codice_ripartizione"])
results149 = model149.fit()
print(results149.summary())

# Regression analysis with weights and by group and score
model150 = sm.WLS(base_tag["propensione"], base_tag[["inverso"]], weights=base_tag["pop_ult"], by=base_tag["codice_ripartizione"])
results150 = model150.fit()
print(results150.summary())

# Regression analysis with weights and by group and score
model151 = sm.WLS(base_tag["propensione"], base_tag[["inverso", "ripart1", "ripart2", "ripart3", "ripart4"]], weights=base_tag["pop_ult"], by=base_tag["codice_ripartizione"])
results151 = model151.fit()
print(results151.summary())

# Regression analysis with weights and by group and score
model152 = sm.WLS(base_tag["propensione"], base_tag[["inverso"]], weights=base_tag["pop_ult"], by=base_tag["codice_ripartizione"])
results152 = model152.fit()
print(results152.summary())

# Regression analysis with weights and by group and score
model153 = sm.WLS(base_tag["propensione"], base_tag[["inverso", "ripart1", "ripart2", "ripart3", "ripart4"]], weights=base_tag["pop_ult"], by=base_tag["codice_ripartizione"])
results153 = model153.fit()
print(results153.summary())

# Regression analysis with weights and by group and score
model154 = sm.WLS(base_tag["propensione"], base_tag[["inverso"]], weights=base_tag["pop_ult"], by=base_tag["codice_ripartizione"])
results154 = model154.fit()
print(results154.summary())

# Regression analysis with weights and by group and score
model155 = sm.WLS(base_tag["propensione"], base_tag[["inverso", "ripart1", "ripart2", "ripart3", "ripart4"]], weights=base_tag["pop_ult"], by=base_tag["codice_ripartizione"])
results155 = model155.fit()
print(results155.summary())

# Regression analysis with weights and by group and score
model156 = sm.WLS(base_tag["propensione"], base_tag[["inverso"]], weights=base_tag["pop_ult"], by=base_tag["codice_ripartizione"])
results156 = model156.fit()
print(results156.summary())

# Regression analysis with weights and by group and score
model157 = sm.WLS(base_tag["propensione"], base_tag[["inverso", "ripart1", "ripart2", "ripart3", "ripart4"]], weights=base_tag["pop_ult"], by=base_tag["codice_ripartizione"])
results157 = model157.fit()
print(results157.summary())

# Regression analysis with weights and by group and score
model158 = sm.WLS(base_tag["propensione"], base_tag[["inverso"]], weights=base_tag["pop_ult"], by=base_tag["codice_ripartizione"])
results158 = model158.fit()
print(results158.summary())

# Regression analysis with weights and by group and score
model159 = sm.WLS(base_tag["propensione"], base_tag[["inverso", "ripart1", "ripart2", "ripart3", "ripart4"]], weights=base_tag["pop_