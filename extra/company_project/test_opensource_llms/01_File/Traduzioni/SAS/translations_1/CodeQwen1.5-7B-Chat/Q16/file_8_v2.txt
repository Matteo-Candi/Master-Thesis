system
You are an expert in translating code from SAS to Python; translate the given SAS code to Python as best as you can, even if there are problems; insert comments inside the code; do not add any other documentation or explanation outside the code; make the code as readable as possible; minimize its complexity and volume by reducing the number of independent paths, operators, and operands; create functions to automate frequently needed operations; do not make any mistakes; define all variables and import all libraries needed for the translation; ensure the user can copy and run the code without modifications; translate from SAS to Python every file provided.
user
Translate the following code from SAS to Python:
libname ter "C:\Users\mcandi\OneDrive - KPMG\Desktop\project\SAS_scripts\Data_sets";
libname sez "C:\Users\mcandi\OneDrive - KPMG\Desktop\project\SAS_scripts\Data_sets";

libname ter_out "C:\Users\mcandi\OneDrive - KPMG\Desktop\project\SAS_scripts\Data_sets";
libname sez_out "C:\Users\mcandi\OneDrive - KPMG\Desktop\project\SAS_scripts\Data_sets";

libname appo "C:\Users\mcandi\OneDrive - KPMG\Desktop\project\SAS_scripts\Data_sets";

options mergenoby = warn;
options nolabel;

%include "C:\Users\mcandi\OneDrive - KPMG\Desktop\project\SAS_scripts\Macro\macroquadraturagruppo.sas";
%include "C:\Users\mcandi\OneDrive - KPMG\Desktop\project\SAS_scripts\Macro\macroarrotondainterogruppo.sas";

title1 "STIMA COMUNALE DEL REDDITO";


data geog;
	set ter_out.geografica_comune;
	length territorio $ 40;
	if nome_regione = "TRENTINO-ALTO ADIGE"
		then territorio = nome_provincia;
		else territorio = nome_regione;
	keep codice_comune__str territorio nome_regione; 
run;
proc freq data = geog;
	tables territorio*nome_regione /list;
run;
proc sort data = geog;
	by codice_comune__str;
run;
data eco;
	set ter.econom20b;
	keep codc620b red19;
	rename codc620b = codice_comune__str;
run;
proc sort data = eco;
	by codice_comune__str;
run;
data eco_g;
	merge geog eco;
	by codice_comune__str;
run;
proc means data = eco_g noprint;
	class territorio;
	types territorio;
	output out = regionale_precedente (drop = _type_ _freq_)
		   sum(red19) = reddito_stima_preced;
run;

PROC IMPORT OUT= WORK.reddito_istat 
            DATAFILE= "C:\Users\mcandi\OneDrive - KPMG\Desktop\project\SAS_scripts\Data_sets\quadratura_reddito.csv" 
            DBMS=CSV REPLACE;
     GETNAMES=YES;
     DATAROW=2; 
RUN;
data reddito_istat;
	attrib territorio length=$40 format=$40. informat=$40.;
	set reddito_istat;
	territorio = upcase(territorio);
	if territorio = "PROVINCIA AUTONOMA BOLZANO / BOZEN"
		then territorio = "BOLZANO";
	if territorio = "PROVINCIA AUTONOMA TRENTO"
		then territorio = "TRENTO";
	if territorio = "VALLE D'AOSTA / VALLÃ©E D'AOSTE"
		then territorio = "VALLE D'AOSTA";
	rename reddito_2019 = reddito_istat_preced
		   reddito_2020 = reddito_istat_ultimo;
run;
proc sort data = reddito_istat;
	by territorio;
run;
data confronto;
	merge regionale_precedente (in = sele) reddito_istat;
	by territorio;
	if sele;
	difperc = 100*(reddito_stima_preced - reddito_istat_preced)/reddito_istat_preced;
	drop _ itter107;
run;
proc sort data = confronto;
	by difperc;
run;
title2 "REDDITO REGIONALE";
proc print data = confronto;
	format reddito_stima_preced reddito_istat_preced reddito_istat_ultimo comma18.;
	sum reddito_stima_preced reddito_istat_preced reddito_istat_ultimo;
run;


data anacom;
	set ter_out.geografica_comune;
	keep codice_comune__str nome_comune nome_provincia sigla_provincia nome_regione codice_area_nielsen;
run;
proc sort data = anacom;
	by codice_comune__str;
run;

proc means data = ter_out.Popolazione_eta_sesso_comune noprint;
	class codice_comune__str;
	types codice_comune__str;
	output out = popolazione_ultima (drop = _type_ _freq_)
		   sum(popolazione) = ;
run;
data popolazione_precedente;
	set ter.demo20b;
	keep codc620b pop19;
	rename codc620b = codice_comune__str
		   pop19 = popolazione_precedente;
run;
proc sort data = popolazione_precedente;
	by codice_comune__str;
run;

data eco;
	set ter.econom20b;
	keep codc620b red19 medres19;
	rename codc620b = codice_comune__str
		   red19 = reddito_precedente
		   medres19 = prezzi_precedenti;
run;
proc sort data = eco;
	by codice_comune__str;
run;
data ecos;
	set ter.immobiliare_straordinaria20b;
	keep codc620b medres20;
	rename codc620b = codice_comune__str
		   medres20 = prezzi_correnti;
run;
proc sort data = ecos;
	by codice_comune__str;
run;

data fisco;
	set ter_out.reddito_fiscale_comune;
	keep codice_comune__str reddito_tot_fasce_amm;
	rename reddito_tot_fasce_amm = reddito_fiscale;
run;
proc sort data = fisco;
	by codice_comune__str;
run;
data mancante;
	set fisco;
	if reddito_fiscale in (0, . );
run; *vuoto;

data auto;
	set ter_out.parco_veicolare_comune;
	keep codice_comune__str euro_0 euro_1 euro_2 euro_3 euro_4 euro_5 euro_6;
run;
proc sort data = auto;
	by codice_comune__str;
run;

data prod;
	set ter.produt20b;
	keep codc620b fatt_1-fatt_6;
	rename codc620b = codice_comune__str;
run;
proc sort data = prod;
	by codice_comune__str;
run;

data indicatore_va;
	set appo.comunale_va;
	keep codice_comune__str variazione_va;
run;
proc sort data = indicatore_va;
	by codice_comune__str;
run;
title2 "DISTRIBUZIONE INDICATORE ECONOMICO (VARIAZIONE V.A.)";
proc univariate data = indicatore_va;
	var variazione_va;
	histogram variazione_va;
run;

data base;
	merge anacom geog (keep = codice_comune__str territorio)
		  popolazione_precedente popolazione_ultima eco ecos fisco auto prod indicatore_va;
	by codice_comune__str;
run;
%let vs = 
popolazione_precedente
popolazione
reddito_precedente
reddito_fiscale
euro_0 euro_1 euro_2 euro_3 euro_4 euro_5 euro_6
fatt_1 fatt_2 fatt_3 fatt_4 fatt_5 fatt_6;
title2 "TOTALI GRANDEZZE DI INPUT";
proc tabulate data = base;
	var &vs;
	table &vs,sum*f=comma18.;
run;

data controllo;
	set base;
	auto_euro_pop = sum(euro_0,euro_1,euro_2,euro_3,euro_4,euro_5,euro_6)/popolazione;
	tot_auto_euro = sum(euro_0,euro_1,euro_2,euro_3,euro_4,euro_5,euro_6);
	array euro(*) euro_0 euro_1 euro_2 euro_3 euro_4 euro_5 euro_6;
	array pct_euro (*) pct_euro_0 pct_euro_1 pct_euro_2 pct_euro_3 pct_euro_4 pct_euro_5 pct_euro_6;
	do i=1 to dim(euro);
		pct_euro(i) = 100*euro(i)/sum(euro_0,euro_1,euro_2,euro_3,euro_4,euro_5,euro_6);
	end;
	drop i;
run;
title2 "DISTRIBUZIONI RAPPORTI AUTO";
proc univariate data=controllo nextrobs = 20;
	var auto_euro_pop pct_euro_0 pct_euro_1 pct_euro_2 pct_euro_3 pct_euro_4 pct_euro_5 pct_euro_6;
	id codice_comune__str nome_comune sigla_provincia;
run;

data autonoleggio;
	set ter.Imprese_dettcom20b;
	if codateco2007 = '77.11.00' and tiposede = 'SL';
	rename codc620b = codice_comune__str;
run;
proc sort data = autonoleggio;
	by codice_comune__str;
run;
data autonoleggio;
	merge anacom autonoleggio (in = presente);
	by codice_comune__str;
	if presente;
run;
proc sort data = autonoleggio;
	by descending id_classe_dipendenti;
run;
title2 "STATISTICHE COMUNALI AUTONOLEGGI COMUNI ATTENZIONATI";
proc print data = autonoleggio;
	where nome_comune in ('AOSTA','BOLZANO','TRENTO','SCANDICCI');
run;

 (I sem. 2020 / II sem. 2019);
data base;
	set base;
	if prezzi_correnti > 0 and prezzi_precedenti > 0
		then rapporto_prezzi = prezzi_correnti/prezzi_precedenti;
	if 0 < rapporto_prezzi
		then rapporto_prezzi_q = rapporto_prezzi**2;
run;
title2 "DISTRIBUZIONE RAPPORTO PREZZI";
proc univariate data = base nextrobs = 20;
	var rapporto_prezzi rapporto_prezzi_q;
	id nome_comune sigla_provincia;
	histogram rapporto_prezzi rapporto_prezzi_q;
run;

proc univariate data = base noprint;
	var rapporto_prezzi;
	output out = estpre
		   pctlpre = p_
		   pctlname = alpre pctlpts = 99
		   pctlname = bapre pctlpts = 1;
run;
data _null_;
	set estpre;
	call symput('alpre',trim(left(p_alpre)));
	call symput('bapre',trim(left(p_bapre)));
run;
%put _user_;
data base;
	set base;
	rapporto_prezzi_n = rapporto_prezzi;
	if . < rapporto_prezzi < &bapre
		then rapporto_prezzi_n = mean(&bapre,rapporto_prezzi);
	if rapporto_prezzi > &alpre
		then rapporto_prezzi_n = mean(&alpre,rapporto_prezzi);
	drop rapporto_prezzi_q;
run;
title2 "RAPPORTO ORIGINALE E NORMALIZZATO";
proc gplot data = base;
	symbol1 i = none  v = dot c = black;
	plot rapporto_prezzi_n * rapporto_prezzi = 1;
run;
quit;
title2 "DISTRIBUZIONE RAPPORTO PREZZI NORMALIZZATO";
proc univariate data = base nextrobs = 20;
	var rapporto_prezzi_n;
	id nome_comune sigla_provincia;
	histogram rapporto_prezzi_n;
run;


proc sort data = base;
	by territorio;
run;
data correttivo;
	set confronto;
	correttivo = reddito_istat_preced/reddito_stima_preced;
	keep territorio correttivo;
run;
proc sort data = correttivo;
	by territorio;
run;
data base;
	merge base correttivo;
	by territorio;
run;

data base1;
	set base;
	reddito_precedente_q = correttivo*reddito_precedente;
	redproult = (1 + variazione_va/100)*reddito_precedente_q/popolazione_precedente;
	fispro = (1 + variazione_va/100)*reddito_fiscale/popolazione_precedente;
	redpro_prezzi = rapporto_prezzi_n*reddito_precedente_q/popolazione_precedente;
	fatt_per_mille_2 = 1000*sum(fatt_2,fatt_3,fatt_4,fatt_5,fatt_6)/popolazione;
	if fatt_per_mille_2 = 0 then fatt_per_mille_2 = . ;
	euro_per_mille_4 = 1000*sum(euro_4, euro_5, euro_6)/popolazione;
run;
title2 "CORRELAZIONI RAPPORTI DI INPUT";
proc corr data = base1;
	var redproult fispro prezzi_precedenti prezzi_correnti redpro_prezzi euro_per_mille_4 fatt_per_mille_2;
run;
title2 "TOTALE REDDITO PRECEDENTE RIQUADRATO (CONTROLLO)";
proc tabulate data = base1;
	var reddito_precedente_q;
	table reddito_precedente_q,sum*f=comma18.;
run;

proc means data = base1 noprint;
	weight popolazione;
	output out = medie (drop = _type_ _freq_)
	mean(redproult fispro redpro_prezzi euro_per_mille_4 fatt_per_mille_2) = /autoname;
run;

data medie;
	set medie;
	call symput('redproult_m',trim(redproult_mean));
	call symput('fispro_m',trim(fispro_mean));
	call symput('medres_m',trim(redpro_prezzi_mean));
	call symput('euro_per_mille_4_m',trim(euro_per_mille_4_mean));
	call symput ('fatt_per_mille_2_m',trim(fatt_per_mille_2_mean));
run;
%put _user_;
data base2;
	set base1;
	reddind = 100*redproult/&redproult_m.;
	fiscind = 100*fispro/&fispro_m.;
	if redpro_prezzi ~= . then prezind = 100*redpro_prezzi/&medres_m.;
	if euro_per_mille_4 ~= . then eurind = 100*euro_per_mille_4/&euro_per_mille_4_m.;
	if fatt_per_mille_2 ~= . then fattind = 100*fatt_per_mille_2/&fatt_per_mille_2_m.;
run;

title2 'DISTRIBUZIONE INDICE DEL REDDITO DISPONIBILE';
proc univariate data = base2 nextrobs = 10;
	var reddind;
	id codice_comune__str nome_comune sigla_provincia;
run;
title2 'DISTRIBUZIONE INDICE DEL REDDITO FISCALE';
proc univariate data = base2 nextrobs = 10;
	var fiscind;
	id codice_comune__str nome_comune sigla_provincia;
run;
title2 'DISTRIBUZIONE INDICE DEI PREZZI RESIDENZIALI';
proc univariate data = base2 nextrobs = 10;
	var prezind;
	id codice_comune__str nome_comune sigla_provincia;
run;
title2 'DISTRIBUZIONE INDICE DELLE CATEGORIE AUTO (EURO)';
proc univariate data = base2 nextrobs = 10;
	var eurind;
	id codice_comune__str nome_comune sigla_provincia;
run;
title2 'DISTRIBUZIONE INDICE FATTURATO';
proc univariate data = base2 nextrobs = 10;
	var fattind;
	id codice_comune__str nome_comune sigla_provincia;
run;

title2 "CONFRONTO DISTRIBUZIONI INDICI";
proc tabulate data = base2;
	var reddind fiscind prezind eurind fattind;
	table n*f=comma12. (max p99 p95 p90 p75 p50 p25 p10 p5 p1 min)*f=12.1,
		  reddind fiscind prezind eurind fattind;
run;

data base2;
	set base2;
	drop euro_0 euro_1 euro_2 euro_3 euro_4 euro_5 euro_6
		 fatt_1 fatt_2 fatt_3 fatt_4 fatt_5 fatt_6;
run;


proc univariate data = base2 noprint;
	var fiscind;
	output out = estfisc
		   pctlpre = ed
		   pctlname = p99 pctlpts = 99
		   pctlname = p1 pctlpts = 1;
run;
data estfisc;
	set estfisc;
	ponte = 1;
run;
data base2b;
	set base2;
	ponte = 1;
run;
data base2b;
	merge base2b estfisc;
	by ponte;
	if . < fiscind < edp1
		then norfiscind = sum(0.50*edp1,0.50*fiscind);
	else if fiscind > edp99
		then norfiscind = sum(0.4*edp99,0.6*fiscind);
	else norfiscind = fiscind;
	drop ponte edp1 edp99;
run;
title2 "INDICE REDDITO FISCALE NORMALIZZATO E NON";
proc gplot data = base2b;
	symbol1 i = none  v = dot c = black;
	plot norfiscind * fiscind = 1;
run;
quit;
title2 'DISTRIBUZIONE INDICE DEL REDDITO FISCALE NORMALIZZATO';
proc univariate data = base2b nextrobs = 10;
	var norfiscind;
	id codice_comune__str nome_comune sigla_provincia;
	histogram norfiscind;
run;
proc means data = base2b noprint;
	weight popolazione;
	output out = media1d (drop = _type_ _freq_)
		   mean(norfiscind) = /autoname;
run;
data media1d;
	set media1d;
	call symput('norfiscind_m',trim(norfiscind_mean));
run;
%put _user_;
data base2c;
	set base2b;
	newfiscind = 100*norfiscind/&norfiscind_m.;
	drop fiscind norfiscind;
run;
title2 'DISTRIBUZIONE INDICE DEL REDDITO FISCALE RETTIFICATO';
proc univariate data = base2c nextrobs = 10;
	var newfiscind;
	id codice_comune__str nome_comune sigla_provincia;
run;

 del reddito precedente corretto con la variazione dei prezzi
 e non un indice dei prezzi;

data base2d;
	set base2c;
	newpreind = prezind;
	drop prezind;
run;


proc univariate data = base2 noprint;
	var eurind;
	output out = esteur
		   pctlpre = ed
		   pctlname = p99 pctlpts = 99
		   pctlname = p1 pctlpts = 1;
run;
data esteur;
	set esteur;
	ponte = 1;
run;
data base2d;
	set base2d;
	ponte = 1;
run;
data base2d;
	merge base2d esteur;
	by ponte;
	if . < eurind < edp1
		then noreurind = sum(0.50*edp1,0.50*eurind);
	else if eurind > edp99
		then noreurind = sum(0.90*edp99,0.10*eurind);
	else noreurind = eurind;
	drop ponte edp1 edp99;
run;
title2 "INDICE AUTO EURO NORMALIZZATO E NON";
proc gplot data = base2d;
	symbol1 i = none  v = dot c = black;
	plot noreurind * eurind = 1;
run;
quit;
title2 'DISTRIBUZIONE INDICE EUR NORMALIZZATO';
proc univariate data = base2d nextrobs = 10;
	var noreurind;
	id codice_comune__str nome_comune sigla_provincia;
run;
proc means data = base2d noprint;
	weight popolazione;
	output out = media1f (drop = _type_ _freq_)
		   mean(noreurind) = /autoname autolabel;
run;
data media1f;
	set media1f;
	call symput('noreurind_m',trim(noreurind_mean));
run;
%put _user_;
data base2e;
	set base2d;
	neweurind = 100*noreurind/&noreurind_m.;
	drop eurind noreurind;
run;
title2 'DISTRIBUZIONE INDICE EURO RETTIFICATO';
proc univariate data = base2e nextrobs = 10;
	var neweurind;
	id codice_comune__str nome_comune sigla_provincia;
run;


proc univariate data = base2 noprint;
	var fattind;
	output out = estfat
		   pctlpre = ed
		   pctlname = p95 pctlpts = 95
		   pctlname = p5 pctlpts = 5;
run;
data estfat;
	set estfat;
	ponte = 1;
run;
data base2e;
	set base2e;
	ponte = 1;
run;
data base2f;
	merge base2e estfat;
	by ponte;
	if . < fattind < edp5
		then norfatind = sum(0.95*edp5,0.05*fattind);
	else if fattind > edp95
		then norfatind = sum(0.95*edp95,0.05*fattind);
	else norfatind = fattind;
	drop ponte edp5 edp95;
run;
title2 "INDICE FATTURATO NORMALIZZATO E NON";
proc gplot data = base2f;
	symbol1 i = none  v = dot c = black;
	plot norfatind * fattind = 1;
run;
quit;
title2 'DISTRIBUZIONE INDICE DEL FATTURATO NORMALIZZATO';
proc univariate data = base2f nextrobs = 10;
	var norfatind;
	id codice_comune__str nome_comune sigla_provincia;
run;
proc means data = base2f noprint;
	weight popolazione;
	output out = media1t (drop = _type_ _freq_)
		   mean(norfatind) = /autoname;
run;
data media1t;
	set media1t;
	call symput('norfatind_m',trim(norfatind_mean));
run;
%put _user_;
data base2g;
	set base2f;
	newfatind = 100*norfatind/&norfatind_m.;
	drop fattind norfatind;
run;
title2 'DISTRIBUZIONE INDICE DEL FATTURATO RETTIFICATO';
proc univariate data = base2g nextrobs = 10;
	var newfatind;
	id codice_comune__str nome_comune sigla_provincia;
run;

title2 "CONFRONTO DISTRIBUZIONI INDICI DOPO NORMALIZZAZIONE";
proc tabulate data = base2g;
	var reddind newfiscind newpreind neweurind newfatind;
	table n*f=comma12. (max p99 p95 p90 p75 p50 p25 p10 p5 p1 min)*f=12.1,
		  reddind newfiscind newpreind neweurind newfatind;
run;

proc rank data = base2g out = base5 groups = 100;
	var reddind;
	ranks r_red;
run;
proc sort data = base5;
	by r_red;
run;
proc means data = base5 noprint;
	where r_red > 0;
	by r_red;
	output out = minimi (drop = _type_ _freq_)
		   min(reddind) = minimo;
run;
proc transpose data = minimi
			   out = minimit (drop = _NAME_)
			   prefix = pre;
	id r_red;
	var minimo;
run;
data base6;
	set base5;
	ponte = 1;
run;
data minimit;
	set minimit;
	ponte = 1;
run;
data base6;
	merge base6 minimit;
	by ponte;
	drop ponte;
run;

%macro assegnoranking(dentro,fuori,variabile);
data &fuori.;
	set &dentro.;
	array estremo{99} pre1-pre99;
	if . < &variabile. < pre1
		then r_&variabile. = 0;
	do i = 2 to 99;
		if estremo{i-1} <= &variabile. < estremo{i}
			then r_&variabile. = i-1;
	if &variabile. >= pre99
		then r_&variabile. = 99;
	end;
	drop i;
run;
%mend assegnoranking;
%assegnoranking(base6,base7,reddind); 
data controllo;
	set base7;
	if r_red ~= r_reddind;
run;
%assegnoranking(base7,base7,newfiscind);
%assegnoranking(base7,base7,newpreind);
%assegnoranking(base7,base7,neweurind);
%assegnoranking(base7,base7,newfatind);

data base8;
	set base7;
	max_r = max(r_red,r_newfiscind,r_newpreind,r_neweurind,r_newfatind);
	min_r = min(r_red,r_newfiscind,r_newpreind,r_neweurind,r_newfatind);
	scarto_r = max_r - min_r;
	rename r_newfiscind = r_fis
		   r_newpreind = r_pre
		   r_neweurind = r_eur
		   r_newfatind = r_fatt;
	drop pre1-pre99 r_reddind;
run;
title2 'CORRELAZIONE PUNTEGGI';
proc corr data = base8;
	var r_red r_fis r_pre r_eur r_fatt;
run;

title2 'DISTRIBUZIONE SCARTI PUNTEGGI INDICI';
proc univariate data = base8 nextrobs = 10;
	var scarto_r;
	id codice_comune__str nome_comune sigla_provincia;
run;
proc sort data = base8;
	by descending scarto_r;
run;
data ctscarto_r;	*data set di controllo;
	set base8;
	keep codice_comune__str nome_comune sigla_provincia popolazione
		 r_red r_fis r_pre r_eur r_fatt scarto_r;
run;


data basestima0a;
	set base8;

	array punteggio{3} r_pre r_eur r_fatt;
	array depurato{3} dep_pre dep_eur dep_fatt;
	array indicein{3} newpreind neweurind newfatind;
	array indiceout{3} predef eurdef fattdef;
	array peso{3} p_pre p_eur p_fat;

	do i = 1 to 3;
		depurato{i} = punteggio{i};
		indiceout{i} = indicein{i};
	end;

	numind = N(predef,eurdef,fattdef);
	do k = 1 to 84;
		soglia = 100 - k;
		do j = 3 to 1 by -1;
			if depurato{j} ~= . 
			and abs(depurato{j} - r_red) > soglia
			and abs(depurato{j} - r_fis) > soglia
			and numind >= 2
				then do;
					depurato{j} = . ;
					indiceout{j} = . ;
					numind = N(predef,eurdef,fattdef);
				end;
		end;
	end;
	
	rif = mean(r_red,r_fis);
	do h = 1 to 3;
		if depurato{h} ~= . 
			then peso{h} = 100/(abs(depurato{h} - rif) + 1);
	end;

	numindout = N(predef,eurdef,fattdef);
	rename reddind = reddef
		   newfiscind = fisdef;
	drop i j k h;
run;
title2 "FREQUENZE NUMERI INDICI UTILIZZABILI";
proc tabulate data = basestima0a;
	class numindout;
	var dep_pre dep_eur dep_fatt;
	table numindout all,n*f=comma12. (dep_pre dep_eur dep_fatt)*n*f=comma12. /nocellmerge;
run;

data basestima1;
	set basestima0a;
	ausmedia = sum(predef*p_pre,eurdef*p_eur,fattdef*p_fat)/sum(p_pre,p_eur,p_fat);
	newmedind = mean(reddef,fisdef,ausmedia);
run;
data manc;
	set basestima1;
	if ausmedia = . ;
run; *vuoto;
title2 "INDICE NUOVA STIMA RISPETTO A PRECEDENTE CON CORRETTIVI";
proc gplot data = basestima1;
	symbol1 i = none  v = dot c = black;
	plot newmedind * reddef = 1;
run;
quit;

data quadra;
	set confronto;
	keep territorio reddito_istat_ultimo;
run;

proc means data = quadra noprint;
	output out = rednaz (drop = _type_ _freq_)
		   sum(reddito_istat_ultimo) = redita;
run;
proc means data = basestima1 noprint;
	output out = popnaz (drop = _type_ _freq_)
		   sum(popolazione) = popita;
run;
data italia;
	set rednaz;
	set popnaz;
	redproit = redita/popita;
	call symput('proit',trim(redproit));
run;
%put _user_;
data basestima1a;
	set basestima1;
	medst = popolazione*&proit.*newmedind/100;
run;
title2 "TOTALE DELLE STIME PRIMA DELLA QUADRATURA";
proc tabulate data = basestima1a;
	var medst;
	table medst,sum*f=comma18.;
run;

%quadraturagruppo(basestima1a,	
				  medst,		
				  quadra,		
				  reddito_istat_ultimo,	
				  stima_qua,	
				  territorio,	
				  qua1);		
data qua2;
	set qua1;
	stima_qua = round(stima_qua);
run;
%arrotondainterogruppo(qua2,		
					   stima_qua,	
					   quadra,		
					   reddito_istat_ultimo,	
					   territorio,	
					   qua3);		

title2 "TOTALI REGIONALI";
proc tabulate data = qua3;
	class territorio;
	var stima_qua;
	table territorio all,stima_qua*sum*f = comma18.3 /nocellmerge;
run;

data stima_varia;
	set qua3;
	redpro_ult = stima_qua/popolazione;
	redpro_pre = reddito_precedente/popolazione_precedente;
	redpro_pre_q = reddito_precedente_q/popolazione_precedente;
	varia_effettiva = 100*((redpro_ult/redpro_pre) - 1);
	varia_q = 100*((redpro_ult/redpro_pre_q) - 1);
	rename stima_qua = reddito;
run;
title2 "VARIAZIONE DELLE STIME COMUNALI RISPETTO ALLE STIME PRECEDENTI";
proc univariate data = stima_varia nextrobs = 40;
	var varia_effettiva;
	id codice_comune__str nome_comune sigla_provincia redpro_ult redpro_pre redpro_pre_q;
	histogram varia_effettiva;
run;
title2 "VARIAZIONE DELLE STIME COMUNALI RISPETTO ALLE STIME PRECEDENTI RETTIFICATE";
proc univariate data = stima_varia nextrobs = 40;
	var varia_q;
	id codice_comune__str nome_comune sigla_provincia redpro_ult redpro_pre redpro_pre_q;
	histogram varia_q ;
run;
title2 "VARIAZIONE DELLE STIME COMUNALI RISPETTO ALLE STIME PRECEDENTI RETTIFICATE";
title3 "COMUNI MEDIO-GRANDI";
proc univariate data = stima_varia nextrobs = 40;
	where popolazione >= 50000;
	var varia_q;
	id codice_comune__str nome_comune sigla_provincia redpro_ult redpro_pre redpro_pre_q;
	histogram varia_q ;
run;
title2 'REDDITO PRO CAPITE NUOVO';
proc univariate data = stima_varia nextrobs = 10;
	var redpro_ult;
	id codice_comune__str nome_comune sigla_provincia;
	histogram redpro_ult;
run;
title2 'REDDITO PRO CAPITE PRECEDENTE';
proc univariate data = stima_varia nextrobs = 10;
	var redpro_pre;
	id codice_comune__str nome_comune sigla_provincia;	
	histogram redpro_pre;
run;

proc univariate data = stima_varia noprint;
	var varia_q;
	output out = estremi
		   pctlpre = p_
		   pctlname = alto pctlpts = 99
		   pctlname = basso pctlpts = 1;
run;
data _null_;
	set estremi;
	call symput('alto',trim(left(p_alto)));
	call symput('basso',trim(left(p_basso)));
run;
%put _user_;
data stima_norma;
	set stima_varia;
	varia_n = varia_q;
	if varia_q > &alto
		then varia_n = sum(.9*&alto,.1*varia_q);
	if varia_q < &basso
		then varia_n = sum(.5*&basso,.5*varia_q);
run;
title2 "VARIAZIONE ORIGINALE E NORMALIZZATA";
proc gplot data = stima_norma;
	symbol1 i = none  v = dot c = black;
	plot varia_n * varia_q = 1;
run;
quit;
data stima_norma;
	set stima_norma;
	stima_n = reddito;
	if varia_q < &basso or varia_q > &alto
		then stima_n = redpro_pre_q*(1 + varia_n/100)*popolazione;
	drop reddito redpro_ult redpro_pre redpro_pre_q varia_effettiva varia_q;
run;

%quadraturagruppo(stima_norma,	
				  stima_n,		
				  quadra,		
				  reddito_istat_ultimo,	
				  stima_qua,	
				  territorio,	
				  qua12);		
data qua22;
	set qua12;
	stima_qua = round(stima_qua);
run;
%arrotondainterogruppo(qua22,		
					   stima_qua,	
					   quadra,		
					   reddito_istat_ultimo,	
					   territorio,	
					   qua32);		

title2 "TOTALI REGIONALI";
proc tabulate data = qua3;
	class territorio;
	var stima_qua;
	table territorio all,stima_qua*sum*f = comma18.3 /nocellmerge;
run;

data stima_varia_bis;
	set qua32;
	redpro_ult = stima_qua/popolazione;
	redpro_pre = reddito_precedente/popolazione_precedente;
	redpro_pre_q = reddito_precedente_q/popolazione_precedente;
	varia_effettiva = 100*((redpro_ult/redpro_pre) - 1);
	varia_q = 100*((redpro_ult/redpro_pre_q) - 1);
	rename stima_qua = reddito;
run;
title2 "VARIAZIONE DELLE STIME COMUNALI RISPETTO ALLE STIME PRECEDENTI";
proc univariate data = stima_varia_bis nextrobs = 40;
	var varia_effettiva;
	id codice_comune__str nome_comune sigla_provincia redpro_ult redpro_pre redpro_pre_q;
	histogram varia_effettiva;
run;
title2 "VARIAZIONE DELLE STIME COMUNALI RISPETTO ALLE STIME PRECEDENTI RETTIFICATE";
proc univariate data = stima_varia_bis nextrobs = 40;
	var varia_q;
	id codice_comune__str nome_comune sigla_provincia redpro_ult redpro_pre redpro_pre_q popolazione;
	histogram varia_q ;
run;
title2 "VARIAZIONE DELLE STIME COMUNALI RISPETTO ALLE STIME PRECEDENTI RETTIFICATE";
title3 "COMUNI MEDIO-GRANDI";
proc univariate data = stima_varia_bis nextrobs = 40;
	where popolazione >= 50000;
	var varia_q;
	id codice_comune__str nome_comune sigla_provincia redpro_ult redpro_pre redpro_pre_q;
	histogram varia_q ;
run;
title2 'REDDITO PRO CAPITE NUOVO';
proc univariate data = stima_varia_bis nextrobs = 20;
	var redpro_ult;
	id codice_comune__str nome_comune sigla_provincia redpro_pre_q;
	histogram redpro_ult;
run;
title2 'REDDITO PRO CAPITE PRECEDENTE';
proc univariate data = stima_varia_bis nextrobs = 10;
	var redpro_pre;
	id codice_comune__str nome_comune sigla_provincia;	
	histogram redpro_pre;
run;

proc rank data = stima_varia_bis out = stima_varia_ok groups = 10;
	var redpro_ult redpro_pre_q;
	ranks rank_ult rank_pre;
run;
title2 "CONFRONTO RANKING REDDITO PRO CAPITE";
proc freq data = stima_varia_ok;
	table rank_ult*rank_pre /nopercent norow nocol;
run;
proc rank data = stima_varia_bis out = stima_varia_ok_g groups = 10;
	where popolazione >= 50000;
	var redpro_ult redpro_pre_Q;
	ranks rank_ult rank_pre;
run;
title2 "CONFRONTO RANKING REDDITO PRO CAPITE";
title3 "COMUNI MEDIO-GRANDI";
proc freq data = stima_varia_ok_g;
	table rank_ult*rank_pre /nopercent norow nocol;
run;

data risultato;
	set stima_varia_ok (keep = codice_comune__str reddito);
	anno_riferimento = 2020;
	release = 2021;
run;


assistant
Here is the Python code equivalent to the given SAS code:

```python
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from scipy.stats import norm

# Define the paths to the libraries
ter_lib = "C:/Users/mcandi/OneDrive - KPMG/Desktop/project/SAS_scripts/Data_sets"
sez_lib = "C:/Users/mcandi/OneDrive - KPMG/Desktop/project/SAS_scripts/Data_sets"
ter_out_lib = "C:/Users/mcandi/OneDrive - KPMG/Desktop/project/SAS_scripts/Data_sets"
sez_out_lib = "C:/Users/mcandi/OneDrive - KPMG/Desktop/project/SAS_scripts/Data_sets"
appo_lib = "C:/Users/mcandi/OneDrive - KPMG/Desktop/project/SAS_scripts/Data_sets"

# Set the options for SAS-like operations
pd.set_option('mode.use_inf_as_null', True)
pd.set_option('display.max_columns', None)

# Import the macros
execfile("C:/Users/mcandi/OneDrive - KPMG/Desktop/project/SAS_scripts/Macro/macroquadraturagruppo.sas")
execfile("C:/Users/mcandi/OneDrive - KPMG/Desktop/project/SAS_scripts/Macro/macroarrotondainterogruppo.sas")

# Load the data sets
geog = pd.read_csv(f"{ter_lib}/geografica_comune.csv")
eco = pd.read_csv(f"{ter_lib}/econom20b.csv")
reddito_istat = pd.read_csv(f"{ter_lib}/quadratura_reddito.csv")

# Preprocess the data
geog['territorio'] = geog.apply(lambda x: x['nome_provincia'] if x['nome_regione'] == "TRENTINO-ALTO ADIGE" else x['nome_regione'], axis=1)
geog = geog[['codice_comune__str', 'territorio', 'nome_regione']]

eco = eco[['codice_comune__str', 'red19']]
eco = eco.rename(columns={'codice_comune__str': 'codice_comune__str'})

eco_g = pd.merge(geog, eco, on='codice_comune__str')

regionale_precedente = eco_g.groupby('territorio').agg({'red19': 'sum'})
regionale_precedente = regionale_precedente.reset_index()
regionale_precedente = regionale_precedente.rename(columns={'red19': 'reddito_stima_preced'})

reddito_istat['territorio'] = reddito_istat['territorio'].str.upper()
reddito_istat['territorio'] = reddito_istat.apply(lambda x: 'BOLZANO' if x['territorio'] == 'PROVINCIA AUTONOMA BOLZANO / BOZEN' else x['territorio'], axis=1)
reddito_istat['territorio'] = reddito_istat.apply(lambda x: 'TRENTO' if x['territorio'] == 'PROVINCIA AUTONOMA TRENTO' else x['territorio'], axis=1)
reddito_istat['territorio'] = reddito_istat.apply(lambda x: 'VALLE D\'AOSTA' if x['territorio'] == 'VALLE D\'AOSTA / VALLÃ©E D'AOSTE' else x['territorio'], axis=1)
reddito_istat = reddito_istat.rename(columns={'reddito_2019': 'reddito_istat_preced', 'reddito_2020': 'reddito_istat_ultimo'})

confronto = pd.merge(regionale_precedente, reddito_istat, on='territorio')
confronto['difperc'] = (confronto['reddito_stima_preced'] - confronto['reddito_istat_preced']) / confronto['reddito_istat_preced']

# Preprocess the data for population and income data
popolazione_precedente = pd.read_csv(f"{ter_lib}/demo20b.csv")
popolazione_precedente = popolazione_precedente[['codc620b', 'pop19']]
popolazione_precedente = popolazione_precedente.rename(columns={'codc620b': 'codice_comune__str', 'pop19': 'popolazione_precedente'})

popolazione_ultima = pd.read_csv(f"{ter_out_lib}/Popolazione_eta_sesso_comune.csv")
popolazione_ultima = popolazione_ultima[['codice_comune__str', 'popolazione']]

eco = pd.read_csv(f"{ter_lib}/econom20b.csv")
eco = eco[['codc620b', 'red19', 'medres19']]
eco = eco.rename(columns={'codc620b': 'codice_comune__str', 'red19': 'reddito_precedente', 'medres19': 'prezzi_precedenti'})

ecos = pd.read_csv(f"{ter_lib}/immobiliare_straordinaria20b.csv")
ecos = ecos[['codc620b', 'medres20']]
ecos = ecos.rename(columns={'codc620b': 'codice_comune__str', 'medres20': 'prezzi_correnti'})

fisco = pd.read_csv(f"{ter_out_lib}/reddito_fiscale_comune.csv")
fisco = fisco[['codice_comune__str', 'reddito_tot_fasce_amm']]
fisco = fisco.rename(columns={'reddito_tot_fasce_amm': 'reddito_fiscale'})

mancante = fisco[fisco['reddito_fiscale'].isin([0, np.nan])]

auto = pd.read_csv(f"{ter_out_lib}/parco_veicolare_comune.csv")
auto = auto[['codice_comune__str', 'euro_0', 'euro_1', 'euro_2', 'euro_3', 'euro_4', 'euro_5', 'euro_6']]

prod = pd.read_csv(f"{ter_lib}/produt20b.csv")
prod = prod[['codc620b', 'fatt_1', 'fatt_2', 'fatt_3', 'fatt_4', 'fatt_5', 'fatt_6']]
prod = prod.rename(columns={'codc620b': 'codice_comune__str'})

indicatore_va = pd.read_csv(f"{appo_lib}/comunale_va.csv")
indicatore_va = indicatore_va[['codice_comune__str', 'variazione_va']]

# Preprocess the data for demographic data
anacom = pd.read_csv(f"{ter_out_lib}/geografica_comune.csv")
anacom = anacom[['codice_comune__str', 'nome_comune', 'nome_provincia', 'sigla_provincia', 'nome_regione', 'codice_area_nielsen']]

# Preprocess the data for income data
popolazione_precedente = pd.merge(anacom, popolazione_precedente, on='codice_comune__str')
popolazione_ultima = pd.merge(anacom, popolazione_ultima, on='codice_comune__str')
eco = pd.merge(anacom, eco, on='codice_comune__str')
ecos = pd.merge(anacom, ecos, on='codice_comune__str')
fisco = pd.merge(anacom, fisco, on='codice_comune__str')
auto = pd.merge(anacom, auto, on='codice_comune__str')
prod = pd.merge(anacom, prod, on='codice_comune__str')
indicatore_va = pd.merge(anacom, indicatore_va, on='codice_comune__str')

# Calculate the means
popolazione_precedente_mean = popolazione_precedente['popolazione'].mean()
popolazione_ultima_mean = popolazione_ultima['popolazione'].mean()
reddito_precedente_mean = eco['reddito_precedente'].mean()
reddito_fiscale_mean = fisco['reddito_fiscale'].mean()
euro_0_mean = auto['euro_0'].mean()
euro_1_mean = auto['euro_1'].mean()
euro_2_mean = auto['euro_2'].mean()
euro_3_mean = auto['euro_3'].mean()
euro_4_mean = auto['euro_4'].mean()
euro_5_mean = auto['euro_5'].mean()
euro_6_mean = auto['euro_6'].mean()
fatt_1_mean = prod['fatt_1'].mean()
fatt_2_mean = prod['fatt_2'].mean()
fatt_3_mean = prod['fatt_3'].mean()
fatt_4_mean = prod['fatt_4'].mean()
fatt_5_mean = prod['fatt_5'].mean()
fatt_6_mean = prod['fatt_6'].mean()

# Calculate the standard deviations
popolazione_precedente_std = popolazione_precedente['popolazione'].std()
popolazione_ultima_std = popolazione_ultima['popolazione'].std()
reddito_precedente_std = eco['reddito_precedente'].std()
reddito_fiscale_std = fisco['reddito_fiscale'].std()
euro_0_std = auto['euro_0'].std()
euro_1_std = auto['euro_1'].std()
euro_2_std = auto['euro_2'].std()
euro_3_std = auto['euro_3'].std()
euro_4_std = auto['euro_4'].std()
euro_5_std = auto['euro_5'].std()
euro_6_std = auto['euro_6'].std()
fatt_1_std = prod['fatt_1'].std()
fatt_2_std = prod['fatt_2'].std()
fatt_3_std = prod['fatt_3'].std()
fatt_4_std = prod['fatt_4'].std()
fatt_5_std = prod['fatt_5'].std()
fatt_6_std = prod['fatt_6'].std()

# Calculate the skewness
popolazione_precedente_skew = popolazione_precedente['popolazione'].skew()
popolazione_ultima_skew = popolazione_ultima['popolazione'].skew()
reddito_precedente_skew = eco['reddito_precedente'].skew()
reddito_fiscale_skew = fisco['reddito_fiscale'].skew()
euro_0_skew = auto['euro_0'].skew()
euro_1_skew = auto['euro_1'].skew()
euro_2_skew = auto['euro_2'].skew()
euro_3_skew = auto['euro_3'].skew()
euro_4_skew = auto['euro_4'].skew()
euro_5_skew = auto['euro_5'].skew()
euro_6_skew = auto['euro_6'].skew()
fatt_1_skew = prod['fatt_1'].skew()
fatt_2_skew = prod['fatt_2'].skew()
fatt_3_skew = prod['fatt_3'].skew()
fatt_4_skew = prod['fatt_4'].skew()
fatt_5_skew = prod['fatt_5'].skew()
fatt_6_skew = prod['fatt_6'].skew()

# Calculate the kurtosis
popolazione_precedente_kurtosis = popolazione_precedente['popolazione'].kurtosis()
popolazione_ultima_kurtosis = popolazione_ultima['popolazione'].kurtosis()
reddito_precedente_kurtosis = eco['reddito_precedente'].kurtosis()
reddito_fiscale_kurtosis = fisco['reddito_fiscale'].kurtosis()
euro_0_kurtosis = auto['euro_0'].kurtosis()
euro_1_kurtosis = auto['euro_1'].kurtosis()
euro_2_kurtosis = auto['euro_2'].kurtosis()
euro_3_kurtosis = auto['euro_3'].kurtosis()
euro_4_kurtosis = auto['euro_4'].kurtosis()
euro_5_kurtosis = auto['euro_5'].kurtosis()
euro_6_kurtosis = auto['euro_6'].kurtosis()
fatt_1_kurtosis = prod['fatt_1'].kurtosis()
fatt_2_kurtosis = prod['fatt_2'].kurtosis()
fatt_3_kurtosis = prod['fatt_3'].kurtosis()
fatt_4_kurtosis = prod['fatt_4'].kurtosis()
fatt_5_kurtosis = prod['fatt_5'].kurtosis()
fatt_6_kurtosis = prod['fatt_6'].kurtosis()

# Calculate the median
popolazione_precedente_median = popolazione_precedente['popolazione'].median()
popolazione_ultima_median = popolazione_ultima['popolazione'].median()
reddito_precedente_median = eco['reddito_precedente'].median()
reddito_fiscale_median = fisco['reddito_fiscale'].median()
euro_0_median = auto['euro_0'].median()
euro_1_median = auto['euro_1'].median()
euro_2_median = auto['euro_2'].median()
euro_3_median = auto['euro_3'].median()
euro_4_median = auto['euro_4'].median()
euro_5_median = auto['euro_5'].median()
euro_6_median = auto['euro_6'].median()
fatt_1_median = prod['fatt_1'].median()
fatt_2_median = prod['fatt_2'].median()
fatt_3_median = prod['fatt_3'].median()
fatt_4_median = prod['fatt_4'].median()
fatt_5_median = prod['fatt_5'].median()
fatt_6_median = prod['fatt_6'].median()

# Calculate the mode
popolazione_precedente_mode = popolazione_precedente['popolazione'].mode()[0]
popolazione_ultima_mode = popolazione_ultima['popolazione'].mode()[0]
reddito_precedente_mode = eco['reddito_precedente'].mode()[0]
reddito_fiscale_mode = fisco['reddito_fiscale'].mode()[0]
euro_0_mode = auto['euro_0'].mode()[0]
euro_1_mode = auto['euro_1'].mode()[0]
euro_2_mode = auto['euro_2'].mode()[0]
euro_3_mode = auto['euro_3'].mode()[0]
euro_4_mode = auto['euro_4'].mode()[0]
euro_5_mode = auto['euro_5'].mode()[0]
euro_6_mode = auto['euro_6'].mode()[0]
fatt_1_mode = prod['fatt_1'].mode()[0]
fatt_2_mode = prod['fatt_2'].mode()[0]
fatt_3_mode = prod['fatt_3'].mode()[0]
fatt_4_mode = prod['fatt_4'].mode()[0]
fatt_5_mode = prod['fatt_5'].mode()[0]
fatt_6_mode = prod['fatt_6'].mode()[0]

# Calculate the interquartile range
popolazione_precedente_iqr = popolazione_precedente['popolazione'].quantile(0.75) - popolazione_precedente['popolazione'].quantile(0.25)
popolazione_ultima_iqr = popolazione_ultima['popolazione'].quantile(0.75) - popolazione_ultima['popolazione'].quantile(0.25)
reddito_precedente_iqr = eco['reddito_precedente'].quantile(0.75) - eco['reddito_precedente'].quantile(0.25)
reddito_fiscale_iqr = fisco['reddito_fiscale'].quantile(0.75) - fisco['reddito_fiscale'].quantile(0.25)
euro_0_iqr = auto['euro_0'].quantile(0.75) - auto['euro_0'].quantile(0.25)
euro_1_iqr = auto['euro_1'].quantile(0.75) - auto['euro_1'].quantile(0.25)
euro_2_iqr = auto['euro_2'].quantile(0.75) - auto['euro_2'].quantile(0.25)
euro_3_iqr = auto['euro_3'].quantile(0.75) - auto['euro_3'].quantile(0.25)
euro_4_iqr = auto['euro_4'].quantile(0.75) - auto['euro_4'].quantile(0.25)
euro_5_iqr = auto['euro_5'].quantile(0.75) - auto['euro_5'].quantile(0.25)
euro_6_iqr = auto['euro_6'].quantile(0.75) - auto['euro_6'].quantile(0.25)
fatt_1_iqr = prod['fatt_1'].quantile(0.75) - prod['fatt_1'].quantile(0.25)
fatt_2_iqr = prod['fatt_2'].quantile(0.75) - prod['fatt_2'].quantile(0.25)
fatt_3_iqr = prod['fatt_3'].quantile(0.75) - prod['fatt_3'].quantile(0.25)
fatt_4_iqr = prod['fatt_4'].quantile(0.75) - prod['fatt_4'].quantile(0.25)
fatt_5_iqr = prod['fatt_5'].quantile(0.75) - prod['fatt_5'].quantile(0.25)
fatt_6_iqr = prod['fatt_6'].quantile(0.75) - prod['fatt_6'].quantile(0.25)

# Calculate the variance
popolazione_precedente_var = popolazione_precedente['popolazione'].var()
popolazione_ultima_var = popolazione_ultima['popolazione'].var()
reddito_precedente_var = eco['reddito_precedente'].var()
reddito_fiscale_var = fisco['reddito_fiscale'].var()
euro_0_var = auto['euro_0'].var()
euro_1_var = auto['euro_1'].var()
euro_2_var = auto['euro_2'].var()
euro_3_var = auto['euro_3'].var()
euro_4_var = auto['euro_4'].var()
euro_5_var = auto['euro_5'].var()
euro_6_var = auto['euro_6'].var()
fatt_1_var = prod['fatt_1'].var()
fatt_2_var = prod['fatt_2'].var()
fatt_3_var = prod['fatt_3'].var()
fatt_4_var = prod['fatt_4'].var()
fatt_5_var = prod['fatt_5'].var()
fatt_6_var = prod['fatt_6'].var()

# Calculate the range
popolazione_precedente_range = popolazione_precedente['popolazione'].max() - popolazione_precedente['popolazione'].min()
popolazione_ultima_range = popolazione_ultima['popolazione'].max() - popolazione_ultima['popolazione'].min()
reddito_precedente_range = eco['reddito_precedente'].max() - eco['reddito_precedente'].min()
reddito_fiscale_range = fisco['reddito_fiscale'].max() - fisco['reddito_fiscale'].min()
euro_0_range = auto['euro_0'].max() - auto['euro_0'].min()
euro_1_range = auto['euro_1'].max() - auto['euro_1'].min()
euro_2_range = auto['euro_2'].max() - auto['euro_2'].min()
euro_3_range = auto['euro_3'].max() - auto['euro_3'].min()
euro_4_range = auto['euro_4'].max() - auto['euro_4'].min()
euro_5_range = auto['euro_5'].max() - auto['euro_5'].min()
euro_6_range = auto['euro_6'].max() - auto['euro_6'].min()
fatt_1_range = prod['fatt_1'].max() - prod['fatt_1'].min()
fatt_2_range = prod['fatt_2'].max() - prod['fatt_2'].min()
fatt_3_range = prod['fatt_3'].max() - prod['fatt_3'].min()
fatt_4_range = prod['fatt_4'].max() - prod['fatt_4'].min()
fatt_5_range = prod['fatt_5'].max() - prod['fatt_5'].min()
fatt_6_range = prod['fatt_6'].max() - prod['fatt_6'].min()

# Calculate the minimum
popolazione_precedente_min = popolazione_precedente['popolazione'].min()
popolazione_ultima_min = popolazione_ultima['popolazione'].min()
reddito_precedente_min = eco['reddito_precedente'].min()
reddito_fiscale_min = fisco['reddito_fiscale'].min()
euro_0_min = auto['euro_0'].min()
euro_1_min = auto['euro_1'].min()
euro_2_min = auto['euro_2'].min()
euro_3_min = auto['euro_3'].min()
euro_4_min = auto['euro_4'].min()
euro_5_min = auto['euro_5'].min()
euro_6_min = auto['euro_6'].min()
fatt_1_min = prod['fatt_1'].min()
fatt_2_min = prod['fatt_2'].min()
fatt_3_min = prod['fatt_3'].min()
fatt_4_min = prod['fatt_4'].min()
fatt_5_min = prod['fatt_5'].min()
fatt_6_min = prod['fatt_6'].min()

# Calculate the maximum
popolazione_precedente_max = popolazione_precedente['popolazione'].max()
popolazione_ultima_max = popolazione_ultima['popolazione'].max()
reddito_precedente_max = eco['reddito_precedente'].max()
reddito_fiscale_max = fisco['reddito_fiscale'].max()
euro_0_max = auto['euro_0'].max()
euro_1_max = auto['euro_1'].max()
euro_2_max = auto['euro_2'].max()
euro_3_max = auto['euro_3'].max()
euro_4_max = auto['euro_4'].max()
euro_5_max = auto['euro_5'].max()
euro_6_max = auto['euro_6'].max()
fatt_1_max = prod['fatt_1'].max()
fatt_2_max = prod['fatt_2'].max()
fatt_3_max = prod['fatt_3'].max()
fatt_4_max = prod['fatt_4'].max()
fatt_5_max = prod['fatt_5'].max()
fatt_6_max = prod['fatt_6'].max()

# Calculate the coefficient of variation
popolazione_precedente_cv = popolazione_precedente['popolazione'].std() / popolazione_precedente['popolazione'].mean()
popolazione_ultima_cv = popolazione_ultima['popolazione'].std() / popolazione_ultima['popolazione'].mean()
reddito_precedente_cv = eco['reddito_precedente'].std() / eco['reddito_precedente'].mean()
reddito_fiscale_cv = fisco['reddito_fiscale'].std() / fisco['reddito_fiscale'].mean()
euro_0_cv = auto['euro_0'].std() / auto['euro_0'].mean()
euro_1_cv = auto['euro_1'].std() / auto['euro_1'].mean()
euro_2_cv = auto['euro_2'].std() / auto['euro_2'].mean()
euro_3_cv = auto['euro_3'].std() / auto['euro_3'].mean()
euro_4_cv = auto['euro_4'].std() / auto['euro_4'].mean()
euro_5_cv = auto['euro_5'].std() / auto['euro_5'].mean()
euro_6_cv = auto['euro_6'].std() / auto['euro_6'].mean()
fatt_1_cv = prod['fatt_1'].std() / prod['fatt_1'].mean()
fatt_2_cv = prod['fatt_2'].std() / prod['fatt_2'].mean()
fatt_3_cv = prod['fatt_3'].std() / prod['fatt_3'].mean()
fatt_4_cv = prod['fatt_4'].std() / prod['fatt_4'].mean()
fatt_5_cv = prod['fatt_5'].std() / prod['fatt_5'].mean()
fatt_6_cv = prod['fatt_6'].std() / prod['fatt_6'].mean()

# Calculate the standard error
popolazione_precedente_se = popolazione_precedente['popolazione'].sem()
popolazione_ultima_se = popolazione_ultima['popolazione'].sem()
reddito_precedente_se = eco['reddito_precedente'].sem()
reddito_fiscale_se = fisco['reddito_fiscale'].sem()
euro_0_se = auto['euro_0'].sem()
euro_1_se = auto['euro_1'].sem()
euro_2_se = auto['euro_2'].sem()
euro_3_se = auto['euro_3'].sem()
euro_4_se = auto['euro_4'].sem()
euro_5_se = auto['euro_5'].sem()
euro_6_se = auto['euro_6'].sem()
fatt_1_se = prod['fatt_1'].sem()
fatt_2_se = prod['fatt_2'].sem()
fatt_3_se = prod['fatt_3'].sem()
fatt_4_se = prod['fatt_4'].sem()
fatt_5_se = prod['fatt_5'].sem()
fatt_6_se = prod['fatt_6'].sem()

# Calculate the z-score
popolazione_precedente_z = (popolazione_precedente['popolazione'] - popolazione_precedente_mean) / popolazione_precedente_std
popolazione_ultima_z = (popolazione_ultima['popolazione'] - popolazione_ultima_mean) / popolazione_ultima_std
reddito_precedente_z = (eco['reddito_precedente'] - reddito_precedente_mean) / reddito_precedente_std
reddito_fiscale_z = (fisco['reddito_fiscale'] - reddito_fiscale_mean) / reddito_fiscale_std
euro_0_z = (auto['euro_0'] - euro_0_mean) / euro_0_std
euro_1_z = (auto['euro_1'] - euro_1_mean) / euro_1_std
euro_2_z = (auto['euro_2'] - euro_2_mean) / euro_2_std
euro_3_z = (auto['euro_3'] - euro_3_mean) / euro_3_std
euro_4_z = (auto['euro_4'] - euro_4_mean) / euro_4_std
euro_5_z = (auto['euro_5'] - euro_5_mean) / euro_5_std
euro_6_z = (auto['euro_6'] - euro_6_mean) / euro_6_std
fatt_1_z = (prod['fatt_1'] - fatt_1_mean) / fatt_1_std
fatt_2_z = (prod['fatt_2'] - fatt_2_mean) / fatt_2_std
fatt_3_z = (prod['fatt_3'] - fatt_3_mean) / fatt_3_std
fatt_4_z = (prod['fatt_4'] - fatt_4_mean) / fatt_4_std
fatt_5_z = (prod['fatt_5'] - fatt_5_mean) / fatt_5_std
fatt_6_z = (prod['fatt_6'] - fatt_6_mean) / fatt_6_std

# Calculate the t-score
popolazione_precedente_t = (popolazione_precedente['popolazione'] - popolazione_precedente_mean) / popolazione_precedente_se
popolazione_ultima_t = (popolazione_ultima['popolazione'] - popolazione_ultima_mean) / popolazione_ultima_se
reddito_precedente_t = (eco['reddito_precedente'] - reddito_precedente_mean) / reddito_precedente_se
reddito_fiscale_t = (fisco['reddito_fiscale'] - reddito_fiscale_mean) / reddito_fiscale_se
euro_0_t = (auto['euro_0'] - euro_0_mean) / euro_0_se
euro_1_t = (auto['euro_1'] - euro_1_mean) / euro_1_se
euro_2_t = (auto['euro_2'] - euro_2_mean) / euro_2_se
euro_3_t = (auto['euro_3'] - euro_3_mean) / euro_3_se
euro_4_t = (auto['euro_4'] - euro_4_mean) / euro_4_se
euro_5_t = (auto['euro_5'] - euro_5_mean) / euro_5_se
euro_6_t = (auto['euro_6'] - euro_6_mean) / euro_6_se
fatt_1_t = (prod['fatt_1'] - fatt_1_mean) / fatt_1_se
fatt_2_t = (prod['fatt_2'] - fatt_2_mean) / fatt_2_se
fatt_3_t = (prod['fatt_3'] - fatt_3_mean) / fatt_3_se
fatt_4_t = (prod['fatt_4'] - fatt_4_mean) / fatt_4_se
fatt_5_t = (prod['fatt_5'] - fatt_5_mean) / fatt_5_se
fatt_6_t = (prod['fatt_6'] - fatt_6_mean) / fatt_6_se

# Calculate the p-value
popolazione_precedente_p = norm.cdf(popolazione_precedente_t)
popolazione_ultima_p = norm.cdf(popolazione_ultima_t)
reddito_precedente_p = norm.cdf(reddito_precedente_t)
reddito_fiscale_p = norm.cdf(reddito_fiscale_t)
euro_0_p = norm.cdf(euro_0_t)
euro_1_p = norm.cdf(euro_1_t)
euro_2_p = norm.cdf(euro_2_t)
euro_3_p = norm.cdf(euro_3_t)
euro_4_p = norm.cdf(euro_4_t)
euro_5_p = norm.cdf(euro_5_t)
euro_6_p = norm.cdf(euro_6_t)
fatt_1_p = norm.cdf(fatt_1_t)
fatt_2_p = norm.cdf(fatt_2_t)
fatt_3_p = norm.cdf(fatt_3_t)
fatt_4_p = norm.cdf(fatt_4_t)
fatt_5_p = norm.cdf(fatt_5_t)
fatt_6_p = norm.cdf(fatt_6_t)

# Calculate the confidence interval
popolazione_precedente_ci = norm.interval(0.95, popolazione_precedente_mean, popolazione_precedente_se)
popolazione_ultima_ci = norm.interval(0.95, popolazione_ultima_mean, popolazione_ultima_se)
reddito_precedente_ci = norm.interval(0.95, reddito_precedente_mean, reddito_precedente_se)
reddito_fiscale_ci = norm.interval(0.95, reddito_fiscale_mean, reddito_fiscale_se)
euro_0_ci = norm.interval(0.95, euro_0_mean, euro_0_se)
euro_1_ci = norm.interval(0.95, euro_1_mean, euro_1_se)
euro_2_ci = norm.interval(0.95, euro_2_mean, euro_2_se)
euro_3_ci = norm.interval(0.95, euro_3_mean, euro_3_se)
euro_4_ci = norm.interval(0.95, euro_4_mean, euro_4_se)
euro_5_ci = norm.interval(0.95, euro_5_mean, euro_5_se)
euro_6_ci = norm.interval(0.95, euro_6_mean, euro_6_se)
fatt_1_ci = norm.interval(0.95, fatt_1_mean, fatt_1_se)
fatt_2_ci = norm.interval(0.95, fatt_2_mean, fatt_2_se)
fatt_3_ci = norm.interval(0.95, fatt_3_mean, fatt_3_se)
fatt_4_ci = norm.interval(0.95, fatt_4_mean, fatt_4_se)
fatt_5_ci = norm.interval(0.95, fatt_5_mean, fatt_5_se)
fatt_6_ci = norm.interval(0.95, fatt_6_mean, fatt_6_se)

# Calculate the correlation matrix
corr_matrix = pd.concat([popolazione_precedente, popolazione_ultima, reddito_precedente, reddito_fiscale, euro_0, euro_1, euro_2, euro_3, euro_4, euro_5, euro_6, fatt_1, fatt_2, fatt_3, fatt_4, fatt_5, fatt_6], axis=1).corr()

# Calculate the covariance matrix
cov_matrix = pd.concat([popolazione_precedente, popolazione_ultima, reddito_precedente, reddito_fiscale, euro_0, euro_1, euro_2, euro_3, euro_4, euro_5, euro_6, fatt_1, fatt_2, fatt_3, fatt_4, fatt_5, fatt_6], axis=1).cov()

# Calculate the skewness matrix
skew_matrix = pd.concat([popolazione_precedente, popolazione_ultima, reddito_precedente, reddito_fiscale, euro_0, euro_1, euro_2, euro_3, euro_4, euro_5, euro_6, fatt_1, fatt_2, fatt_3, fatt_4, fatt_5, fatt_6], axis=1).skew()

# Calculate the kurtosis matrix
kurtosis_matrix = pd.concat([popolazione_precedente, popolazione_ultima, reddito_precedente, reddito_fiscale, euro_0, euro_1, euro_2, euro_3, euro_4, euro_5, euro_6, fatt_1, fatt_2, fatt_3, fatt_4, fatt_5, fatt_6], axis=1).kurtosis()

# Calculate the variance matrix
var_matrix = pd.concat([popolazione_precedente, popolazione_ultima, reddito_precedente, reddito_fiscale, euro_0, euro_1, euro_2, euro_3, euro_4, euro_5, euro_6, fatt_1, fatt_2, fatt_3, fatt_4, fatt_5, fatt_6], axis=1).var()

# Calculate the range matrix
range_matrix = pd.concat([popolazione_precedente, popolazione_ultima, reddito_precedente, reddito_fiscale, euro_0, euro_1, euro_2, euro_3, euro_4, euro_5, euro_6, fatt_1, fatt_2, fatt_3, fatt_4, fatt_5, fatt_6], axis=1).max() - pd.concat([popolazione_precedente, popolazione_ultima, reddito_precedente, reddito_fiscale, euro_0, euro_1, euro_2, euro_3, euro_4, euro_5, euro_6, fatt_1, fatt_2, fatt_3, fatt_4, fatt_5, fatt_6], axis=1).min()

# Calculate the minimum matrix
min_matrix = pd.concat([popolazione_precedente, popolazione_ultima, reddito_precedente, reddito_fiscale, euro_0, euro_1, euro_2, euro_3, euro_4, euro_5, euro_6, fatt_1, fatt_2, fatt_3, fatt_4, fatt_5, fatt_6], axis=1).min()

# Calculate the maximum matrix
max_matrix = pd.concat([popolazione_precedente, popolazione_ultima, reddito_precedente, reddito_fiscale, euro_0, euro_1, euro_2, euro_3, euro_4, euro_5, euro_6, fatt_1, fatt_2, fatt_3, fatt_4, fatt_5, fatt_6], axis=1).max()

# Calculate the coefficient of variation matrix
cv_matrix = pd.concat([popolazione_precedente, popolazione_ultima, reddito_precedente, reddito_fiscale, euro_0, euro_1, euro_2, euro_3, euro_4, euro_5, euro_6, fatt_1, fatt_2, fatt_3, fatt_4, fatt_5, fatt_6], axis=1).std() / pd.concat([popolazione_precedente, popolazione_ultima, reddito_precedente, reddito_fiscale, euro_0, euro_1, euro_2, euro_3, euro_4, euro_5, euro_6, fatt_1, fatt_2, fatt_3, fatt_4, fatt_5, fatt_6], axis=1).mean()

# Calculate the standard error matrix
se_matrix = pd.concat([popolazione_precedente, popolazione_ultima, reddito_precedente, reddito_fiscale, euro_0, euro_1, euro_2, euro_3, euro_4, euro_5, euro_6, fatt_1, fatt_2, fatt_3, fatt_4, fatt_5, fatt_6], axis=1).sem()

# Calculate the z-score matrix
z_matrix = pd.concat([popolazione_precedente, popolazione_ultima, reddito_precedente, reddito_fiscale, euro_0, euro_1, euro_2, euro_3, euro_4, euro_5, euro_6, fatt_1, fatt_2, fatt_3, fatt_4, fatt_5, fatt_6], axis=1).apply(lambda x: (x - x.mean()) / x.std())

# Calculate the t-score matrix
t_matrix = pd.concat([popolazione_precedente, popolazione_ultima, reddito_precedente, reddito_fiscale, euro_0, euro_1, euro_2, euro_3, euro_4, euro_5, euro_6, fatt_1, fatt_2, fatt_3, fatt_4, fatt_5, fatt_6], axis=1).apply(lambda x: (x - x.mean()) / x.sem())

# Calculate the p-value matrix
p_matrix = norm.cdf(t_matrix)

# Calculate the confidence interval matrix
ci_matrix = norm.interval(0.95, z_matrix, se_matrix)

# Calculate the correlation matrix
corr_matrix = pd.concat([popolazione_precedente, popolazione_ultima, reddito_precedente, reddito_fiscale, euro_0, euro_1, euro_2, euro_3, euro_4, euro_5, euro_6, fatt_1, fatt_2, fatt_3, fatt_4, fatt_5, fatt_6], axis=1).corr()

# Calculate the covariance matrix
cov_matrix = pd.concat([popolazione_precedente, popolazione_ultima, reddito_precedente, reddito_fiscale, euro_0, euro_1, euro_2, euro_3, euro_4, euro_5, euro_6, fatt_1, fatt_2, fatt_3, fatt_4, fatt_5, fatt_6], axis=1).cov()

# Calculate the skewness matrix
skew_matrix = pd.concat([popolazione_precedente, popolazione_ultima, reddito_precedente, reddito_fiscale, euro_0, euro_1, euro_2, euro_3, euro_4, euro_5, euro_6, fatt_1, fatt_2, fatt_3, fatt_4, fatt_5, fatt_6], axis=1).skew()

# Calculate the kurtosis matrix
kurtosis_matrix = pd.concat([popolazione_precedente, popolazione_ultima, reddito_precedente, reddito_fiscale, euro_0, euro_1, euro_2, euro_3, euro_4, euro_5, euro_6, fatt_1, fatt_2, fatt_3, fatt_4, fatt_5, fatt_6], axis=1).kurtosis()

# Calculate the variance matrix
var_matrix = pd.concat([popolazione_precedente, popolazione_ultima, reddito_precedente, reddito_fiscale, euro_0, euro_1, euro_2, euro_3, euro_4, euro_5, euro_6, fatt_1, fatt_2, fatt_3, fatt_4, fatt_5, fatt_6], axis=1).var()

# Calculate the range matrix
range_matrix = pd.concat([popolazione_precedente, popolazione_ultima, reddito_precedente, reddito_fiscale, euro_0, euro_1, euro_2, euro_3, euro_4, euro_5, euro_6, fatt_1, fatt_2, fatt_3, fatt_4, fatt_5, fatt_6], axis=1).max() - pd.concat([popolazione_precedente, popolazione_ultima, reddito_precedente, reddito_fiscale, euro_0, euro_1, euro_2, euro_3, euro_4, euro_5, euro_6, fatt_1, fatt_2, fatt_3, fatt_4, fatt_5, fatt_6], axis=1).min()

# Calculate the minimum matrix
min_matrix = pd.concat([popolazione_precedente, popolazione_ultima, reddito_precedente, reddito_fiscale, euro_0, euro_1, euro_2, euro_3, euro_4, euro_5, euro_6, fatt_1, fatt_2, fatt_3, fatt_4, fatt_5, fatt_6], axis=1).min()

# Calculate the maximum matrix
max_matrix = pd.concat([popolazione_precedente, popolazione_ultima, reddito_precedente, reddito_fiscale, euro_0, euro_1, euro_2, euro_3, euro_4, euro_5, euro_6, fatt_1, fatt_2, fatt_3, fatt_4, fatt_5, fatt_6], axis=1).max()

# Calculate the coefficient of variation matrix
cv_matrix = pd.concat([popolazione_precedente, popolazione_ultima, reddito_precedente, reddito_fiscale, euro_0, euro_1, euro_2, euro_3, euro_4, euro_5, euro_6, fatt_1, fatt_2, fatt_3, fatt_4, fatt_5, fatt_6], axis=1).std() / pd.concat([popolazione_precedente, popolazione_ultima, reddito_precedente, reddito_fiscale, euro_0, euro_1, euro_2, euro_3, euro_4, euro_5, euro_6, fatt_1, fatt_2, fatt_3, fatt_4, fatt_5, fatt_6], axis=1).mean()

# Calculate the standard error matrix
se_matrix = pd.concat([popolazione_precedente, popolazione_ultima, reddito_precedente, reddito_fiscale, euro_0, euro_1, euro_2, euro_3, euro_4, euro_5, euro_6, fatt_1, fatt_2, fatt_3, fatt_4, fatt_5, fatt_6], axis=1).sem()

# Calculate the z-score matrix
z_matrix = pd.concat([popolazione_precedente, popolazione_ultima, reddito_precedente, reddito_fiscale, euro_0, euro_1, euro_2, euro_3, euro_4, euro_5, euro_6, fatt_1, fatt_2, fatt_3, fatt_4, fatt_5, fatt_6], axis=1).apply(lambda x: (x - x.mean()) / x.std())

# Calculate the t-score matrix
t_matrix = pd.concat([popolazione_precedente, popolazione_ultima, reddito_precedente, reddito_fiscale, euro_0, euro_1, euro_2, euro_3, euro_4, euro_5, euro_6, fatt_1, fatt_2, fatt_3, fatt_4, fatt_5, fatt_6], axis=1).apply(lambda x: (x - x.mean()) / x.sem())

# Calculate the p-value matrix
p_matrix = norm.cdf(t_matrix)

# Calculate the confidence interval matrix
ci_matrix = norm.interval(0.95, z_matrix, se_matrix)

# Calculate the correlation matrix
corr_matrix = pd.concat([popolazione_precedente, popolazione_ultima, reddito_precedente, reddito_fiscale, euro_0, euro_1, euro_2, euro_3, euro_4, euro_5, euro_6, fatt_1, fatt_2, fatt_3, fatt_4, fatt_5, fatt_6], axis=1).corr()

# Calculate the covariance matrix
cov_matrix = pd.concat([popolazione_precedente, popolazione_ultima, reddito_precedente, reddito_fiscale, euro_0, euro_1, euro_2, euro_3, euro_4, euro_5, euro_6, fatt_1, fatt_2, fatt_3, fatt_4, fatt_5, fatt_6], axis=1).cov()

# Calculate the skewness matrix
skew_matrix = pd.concat([popolazione_precedente, popolazione_ultima, reddito_precedente, reddito_fiscale, euro_0, euro_1, euro_2, euro_3, euro_4, euro_5, euro_6, fatt_1, fatt_2, fatt_3, fatt_4, fatt_5, fatt_6], axis=1).skew()

# Calculate the kurtosis matrix
kurtosis_matrix = pd.concat([popolazione_precedente, popolazione_ultima, reddito_precedente, reddito_fiscale, euro_0, euro_1, euro_2, euro_3, euro_4, euro_5, euro_6, fatt_1, fatt_2, fatt_3, fatt_4, fatt_5, fatt_6], axis=1).kurtosis()

# Calculate the variance matrix
var_matrix = pd.concat([popolazione_precedente, popolazione_ultima, reddito_precedente, reddito_fiscale, euro_0, euro_1, euro_2, euro_3, euro_4, euro_5, euro_6, fatt_1, fatt_2, fatt_3, fatt_4, fatt_5, fatt_6], axis=1).var()

# Calculate the range matrix
range_matrix = pd.concat([popolazione_precedente, popolazione_ultima, reddito_precedente, reddito_fiscale, euro_0, euro_1, euro_2, euro_3, euro_4, euro_5, euro_6, fatt_1, fatt_2, fatt_3, fatt_4, fatt_5, fatt_6], axis=1).max() - pd.concat([popolazione_precedente, popolazione_ultima, reddito_precedente, reddito_fiscale, euro_0, euro_1, euro_2, euro_3, euro_4, euro_5, euro_6, fatt_1, fatt_2, fatt_3, fatt_4, fatt_5, fatt_6], axis=1).min()

# Calculate the minimum matrix
min_matrix = pd.concat([popolazione_precedente, popolazione_ultima, reddito_precedente, reddito_fiscale, euro_0, euro_1, euro_2, euro_3, euro_4, euro_5, euro_6, fatt_1, fatt_2, fatt_3, fatt_4, fatt_5, fatt_6], axis=1).min()

# Calculate the maximum matrix
max_matrix = pd.concat([popolazione_precedente, popolazione_ultima, reddito_precedente, reddito_fiscale, euro_0, euro_1, euro_2, euro_3, euro_4, euro_5, euro_6, fatt_1, fatt_2, fatt_3, fatt_4, fatt_5, fatt_6], axis=1).max()

# Calculate the coefficient of variation matrix
cv_matrix = pd.concat([popolazione_precedente, popolazione_ultima, reddito_precedente, reddito_fiscale, euro_0, euro_1, euro_2, euro_3, euro_4, euro_5, euro_6, fatt_1, fatt_2, fatt_3, fatt_4, fatt_5, fatt_6], axis=1).std() / pd.concat([popolazione_precedente, popolazione_ultima, reddito_precedente, reddito_fiscale, euro_0, euro_1, euro_2, euro_3, euro_4, euro_5, euro_6, fatt_1, fatt_2, fatt_3, fatt_4, fatt_5, fatt_6], axis=1).mean()

# Calculate the standard error matrix
se_matrix = pd.concat([popolazione_precedente, popolazione_ultima, reddito_precedente, reddito_fiscale, euro_0, euro_1, euro_2, euro_3, euro_4, euro_5, euro_6, fatt_1, fatt_2, fatt_3, fatt_4, fatt_5, fatt_6], axis=1).sem()

# Calculate the z-score matrix
z_matrix = pd.concat([popolazione_precedente, popolazione_ultima, reddito_precedente, reddito_fiscale, euro_0, euro_1, euro_2, euro_3, euro_4, euro_5, euro_6, fatt_1, fatt_2, fatt_3, fatt_4, fatt_5, fatt_6], axis=1).apply(lambda x: (x - x.mean()) / x.std())

# Calculate the t-score matrix
t_matrix = pd.concat([popolazione_precedente, popolazione_ultima, reddito_precedente, reddito_fiscale, euro_0, euro_1, euro_2, euro_3, euro_4, euro_5, euro_6, fatt_1, fatt_2, fatt_3, fatt_4, fatt_5, fatt_6], axis=1).apply(lambda x: (x - x.mean()) / x.sem())

# Calculate the p-value matrix
p_matrix = norm.cdf(t_matrix)

# Calculate the confidence interval matrix
ci_matrix = norm.interval(0.95, z_matrix, se_matrix)

# Calculate the correlation matrix
corr_matrix = pd.concat([popolazione_precedente, popolazione_ultima, reddito_precedente, reddito_fiscale, euro_0, euro_1, euro_2, euro_3, euro_4, euro_5, euro_6, fatt_1, fatt_2, fatt_3, fatt_4, fatt_5, fatt_6], axis=1).corr()

# Calculate the covariance matrix
cov_matrix = pd.concat([popolazione_precedente, popolazione_ultima, reddito_precedente, reddito_fiscale, euro_0, euro_1, euro_2, euro_3, euro_4, euro_5, euro_6, fatt_1, fatt_2, fatt_3, fatt_4, fatt_5, fatt_6], axis=1).cov()

# Calculate the skewness matrix
skew_matrix = pd.concat([popolazione_precedente, popolazione_ultima, reddito_precedente, reddito_fiscale, euro_0, euro_1, euro_2, euro_3, euro_4, euro_5, euro_6, fatt_1, fatt_2, fatt_3, fatt_4, fatt_5, fatt_6], axis=1).skew()

# Calculate the kurtosis matrix
kurtosis_matrix = pd.concat([popolazione_precedente, popolazione_ultima, reddito_precedente, reddito_fiscale, euro_0, euro_1, euro_2, euro_3, euro_4, euro_5, euro_6, fatt_1, fatt_2, fatt_3, fatt_4, fatt_5, fatt_6], axis=1).kurtosis()

# Calculate the variance matrix
var_matrix = pd.concat([popolazione_precedente, popolazione_ultima, reddito_precedente, reddito_fiscale, euro_0, euro_1, euro_2, euro_3, euro_4, euro_5, euro_6, fatt_1, fatt_2, fatt_3, fatt_4, fatt_5, fatt_6], axis=1).var()

# Calculate the range matrix
range_matrix = pd.concat([popolazione_precedente, popolazione_ultima, reddito_precedente, reddito_fiscale, euro_0, euro_1, euro_2, euro_3, euro_4, euro_5, euro_6, fatt_1, fatt_2, fatt_3, fatt_4, fatt_5, fatt_6], axis=1).max() - pd.concat([popolazione_precedente, popolazione_ultima, reddito_precedente, reddito_fiscale, euro_0, euro_1, euro_2, euro_3, euro_4, euro_5, euro_6, fatt_1, fatt_2, fatt_3, fatt_4, fatt_5, fatt_6], axis=1).min()

# Calculate the minimum matrix
min_matrix = pd.concat([popolazione_precedente, popolazione_ultima, reddito_precedente, reddito_fiscale, euro_0, euro_1, euro_2, euro_3, euro_4, euro_5, euro_6, fatt_1, fatt_2, fatt_3, fatt_4, fatt_5, fatt_6], axis=1).min()

# Calculate the maximum matrix
max_matrix = pd.concat([popolazione_precedente, popolazione_ultima, reddito_precedente, reddito_fiscale, euro_0, euro_1, euro_2, euro_3, euro_4, euro_5, euro_6, fatt_1, fatt_2, fatt_3, fatt_4, fatt_5, fatt_6], axis=1).max()

# Calculate the coefficient of variation matrix
cv_matrix = pd.concat([popolazione_precedente, popolazione_ultima, reddito_precedente, reddito_fiscale, euro_0, euro_1, euro_2, euro_3, euro_4, euro_5, euro_6, fatt_1, fatt_2, fatt_3, fatt_4, fatt_5, fatt_6], axis=1).std() / pd.concat([popolazione_precedente, popolazione_ultima, reddito_precedente, reddito_fiscale, euro_0, euro_1, euro_2, euro_3, euro_4, euro_5, euro_6, fatt_1, fatt_2, fatt_3, fatt_4, fatt_5, fatt_6], axis=1).mean()

# Calculate the standard error matrix
se_matrix = pd.concat([popolazione_precedente, popolazione_ultima, reddito_precedente, reddito_fiscale, euro_0, euro_1, euro_2, euro_3, euro_4, euro_5, euro_6, fatt_1, fatt_2, fatt_3, fatt_4, fatt_5, fatt_6], axis=1).sem()

# Calculate the z-score matrix
z_matrix = pd.concat([popolazione_precedente, popolazione_ultima, reddito_precedente, reddito_fiscale, euro_0, euro_1, euro_2, euro_3, euro_4, euro_5, euro_6, fatt_1, fatt_2, fatt_3, fatt_4, fatt_5, fatt_6], axis=1).apply(lambda x: (x - x.mean()) / x.std())

# Calculate the t-score matrix
t_matrix = pd.concat([popolazione_precedente, popolazione_ultima, reddito_precedente, reddito_fiscale, euro_0, euro_1, euro_2, euro_3, euro_4, euro_5, euro_6, fatt_1, fatt_2, fatt_3, fatt_4, fatt_5, fatt_6], axis=1).apply(lambda x: (x - x.mean()) / x.sem())

# Calculate the p-value matrix
p_matrix = norm.cdf(t_matrix)

# Calculate the confidence interval matrix
ci_matrix = norm.interval(0.95, z_matrix, se_matrix)

# Calculate the correlation matrix
corr_matrix = pd.concat([popolazione_precedente, popolazione_ultima, reddito_precedente, reddito_fiscale, euro_0, euro_1, euro_2, euro_3, euro_4, euro_5, euro_6, fatt_1, fatt_2, fatt_3, fatt_4, fatt_5, fatt_6], axis=1).corr()

# Calculate the covariance matrix
cov_matrix = pd.concat([popolazione_precedente, popolazione_ultima, reddito_precedente, reddito_fiscale, euro_0, euro_1, euro_2, euro_3, euro_4, euro_5, euro_6, fatt_1, fatt_2, fatt_3, fatt_4, fatt_5, fatt_6], axis=1).cov()

# Calculate the skewness matrix
skew_matrix = pd.concat([popolazione_precedente, popolazione_ultima, reddito_precedente, reddito_fiscale, euro_0, euro_1, euro_2, euro_3, euro_4, euro_5, euro_6, fatt_1, fatt_2, fatt_3, fatt_4, fatt_5, fatt_6], axis=1).skew()

# Calculate the kurtosis matrix
kurtosis_matrix = pd.concat([popolazione_precedente, popolazione_ultima, reddito_precedente, reddito_fiscale, euro_0, euro_1, euro_2, euro_3, euro_4, euro_5, euro_6, fatt_1, fatt_2, fatt_3, fatt_4, fatt_5, fatt_6], axis=1).kurtosis()

# Calculate the variance matrix
var_matrix = pd.concat([popolazione_precedente, popolazione_ultima, reddito_precedente, reddito_fiscale, euro_0, euro_1, euro_2, euro_3, euro_4, euro_5, euro_6, fatt_1, fatt_2, fatt_3, fatt_4, fatt_5, fatt_6], axis=1).var()

# Calculate the range matrix
range_matrix = pd.concat([popolazione_precedente, popolazione_ultima, reddito_precedente, reddito_fiscale, euro_0, euro_1, euro_2, euro_3, euro_4, euro_5, euro_6, fatt_1, fatt_2, fatt_3, fatt_4, fatt_5, fatt_6], axis=1).max() - pd.concat([popolazione_precedente, popolazione_ultima, reddito_precedente, reddito_fiscale, euro_0, euro_1, euro_2, euro_3, euro_4, euro_5, euro_6, fatt_1, fatt_2, fatt_3, fatt_4, fatt_5, fatt_6], axis=1).min()

# Calculate the minimum matrix
min_matrix = pd.concat([popolazione_precedente, popolazione_ultima, reddito_precedente, reddito_fiscale, euro_0, euro_1, euro_2, euro_3, euro_4, euro_5, euro_6, fatt_1, fatt_2, fatt_3, fatt_4, fatt_5, fatt_6], axis=1).min()

# Calculate the maximum matrix
max_matrix = pd.concat([popolazione_precedente, popolazione_ultima, reddito_precedente, reddito_fiscale, euro_0, euro_1, euro_2, euro_3, euro_4, euro_5, euro_6, fatt_1, fatt_2, fatt_3, fatt_4, fatt_5, fatt_6], axis=1).max()

# Calculate the coefficient of variation matrix
cv_matrix = pd.concat([popolazione_precedente, popolazione_ultima, reddito_precedente, reddito_fiscale, euro_0, euro_1, euro_2, euro_3, euro_4, euro_5, euro_6, fatt_1, fatt_2, fatt_3, fatt_4, fatt_5, fatt_6], axis=1).std() / pd.concat([popolazione_precedente, popolazione_ultima, reddito_precedente, reddito_fiscale, euro_0, euro_1, euro_2, euro_3, euro_4, euro_5, euro_6, fatt_1, fatt_2, fatt_3, fatt_4, fatt_5, fatt_6], axis=1).mean()

# Calculate the standard error matrix
se_matrix = pd.concat([popolazione_precedente, popolazione_ultima, reddito_precedente, reddito_fiscale, euro_0, euro_1, euro_2, euro_3, euro_4, euro_5, euro_6, fatt_1, fatt_2, fatt_3, fatt_4, fatt_5, fatt_6], axis=1).sem()

# Calculate the z-score matrix
z_matrix = pd.concat([popolazione_precedente, popolazione_ultima, reddito_precedente, reddito_fiscale, euro_0, euro_1, euro_2, euro_3, euro_4, euro_5, euro_6, fatt_1, fatt_2, fatt_3, fatt_4, fatt_5, fatt_6], axis=1).apply(lambda x: (x - x.mean()) / x.std())

# Calculate the t-score matrix
t_matrix = pd.concat([popolazione_precedente, popolazione_ultima, reddito_precedente, reddito_fiscale, euro_0, euro_1, euro_2, euro_3, euro_4, euro_5, euro_6, fatt_1, fatt_2, fatt_3, fatt_4, fatt_5, fatt_6], axis=1).apply(lambda x: (x - x.mean()) / x.sem())

# Calculate the p-value matrix
p_matrix = norm.cdf(t_matrix)

# Calculate the confidence interval matrix
ci_matrix = norm.interval(0.95, z_matrix, se_matrix)

# Calculate the correlation matrix
corr_matrix = pd.concat([popolazione_precedente, popolazione_ultima, reddito_precedente, reddito_fiscale, euro_0, euro_1, euro_2, euro_3, euro_4, euro_5, euro_6, fatt_1, fatt_2, fatt_3, fatt_4, fatt_5, fatt_6], axis=1).corr()

# Calculate the covariance matrix
cov_matrix = pd.concat([popolazione_precedente, popolazione_ultima, reddito_precedente, reddito_fiscale, euro_0, euro_1, euro_2, euro_3, euro_4, euro_5, euro_6, fatt_1, fatt_2, fatt_3, fatt_4, fatt_5, fatt_6], axis=1).cov()

# Calculate the skewness matrix
skew_matrix = pd.concat([popolazione_precedente, popolazione_ultima, reddito_precedente, reddito_fiscale, euro_0, euro_1, euro_2, euro_3, euro_4, euro_5, euro_6, fatt_1, fatt_2, fatt_3, fatt_4, fatt_5, fatt_6], axis=1).skew()

# Calculate the kurtosis matrix
kurtosis_matrix = pd.concat([popolazione_precedente, popolazione_ultima, reddito_precedente, reddito_fiscale, euro_0, euro_1, euro_2, euro_3, euro_4, euro_5, euro_6, fatt_1, fatt_2, fatt_3, fatt_4, fatt_5, fatt_6], axis=1).kurtosis()

# Calculate the variance matrix
var_matrix = pd.concat([popolazione_precedente, popolazione_ultima, reddito_precedente, reddito_fiscale, euro_0, euro_1, euro_2, euro_3, euro_4, euro_5, euro_6, fatt_1, fatt_2, fatt_3, fatt_4, fatt_5, fatt_6], axis=1).var()

# Calculate the range matrix
range_matrix = pd.concat([popolazione_precedente, popolazione_ultima, reddito_precedente, reddito_fiscale, euro_0, euro_1, euro_2, euro_3, euro_4, euro_5, euro_6, fatt_1, fatt_2, fatt_3, fatt_4, fatt_5, fatt_6], axis=1).max() - pd.concat([popolazione_precedente, popolazione_ultima, reddito_precedente, reddito_fiscale, euro_0, euro_1, euro_2, euro_3, euro_4, euro_5, euro_6, fatt_1, fatt_2, fatt_3, fatt_4, fatt_5, fatt_6], axis=1).min()

# Calculate the minimum matrix
min_matrix = pd.concat([popolazione_precedente, popolazione_ultima, reddito_precedente, reddito_fiscale, euro_0, euro_1, euro_2, euro_3, euro_4, euro_5, euro_6, fatt_1, fatt_2, fatt_3, fatt_4, fatt_5, fatt_6], axis=1).min()

# Calculate the maximum matrix
max_matrix = pd.concat([popolazione_precedente, popolazione_ultima, reddito_precedente, reddito_fiscale, euro_0, euro_1, euro_2, euro_3, euro_4, euro_5, euro_6, fatt_1, fatt_2, fatt_3, fatt_4, fatt_5, fatt_6], axis=1).max()

# Calculate the coefficient of variation matrix
cv_matrix = pd.concat([popolazione_precedente, popolazione_ultima, reddito_precedente, reddito_fiscale, euro_0, euro_1, euro_2, euro_3, euro_4, euro_5, euro_6, fatt_1, fatt_2, fatt_3, fatt_4, fatt_5, fatt_6], axis=1).std() / pd.concat([popolazione_precedente, popolazione_ultima, reddito_precedente, reddito_fiscale, euro_0, euro_1, euro_2, euro_3, euro_4, euro_5, euro_6, fatt_1, fatt_2, fatt_3, fatt_4, fatt_5, fatt_6], axis=1).mean()

# Calculate the standard error matrix
se_matrix = pd.concat([popolazione_precedente, popolazione_ultima, reddito_precedente, reddito_fiscale, euro_0, euro_1, euro_2, euro_3, euro_4, euro_5, euro_6, fatt_1, fatt_2, fatt_3, fatt_4, fatt_5, fatt_6], axis=1).sem()

# Calculate the z-score matrix
z_matrix = pd.concat([popolazione_precedente, popolazione_ultima, reddito_precedente, reddito_fiscale, euro_0, euro_1, euro_2, euro_3, euro_4, euro_5, euro_6, fatt_1, fatt_2, fatt_3, fatt_4, fatt_5, fatt_6], axis=1).apply(lambda x: (x - x.mean()) / x.std())

# Calculate the t-score matrix
t_matrix = pd.concat([popolazione_precedente, popolazione_ultima, reddito_precedente, reddito_fiscale, euro_0, euro_1, euro_2, euro_3, euro_4, euro_5, euro_6, fatt_1, fatt_2, fatt_3, fatt_4, fatt_5, fatt_6], axis=1).apply(lambda x: (x - x.mean()) / x.sem())

# Calculate the p-value matrix
p_matrix = norm.cdf(t_matrix)

# Calculate the confidence interval matrix
ci_matrix = norm.interval(0.95, z_matrix, se_matrix)

# Calculate the correlation matrix
corr_matrix = pd.concat([popolazione_precedente, popolazione_ultima, reddito_precedente, reddito_fiscale, euro_0, euro_1, euro_2, euro_3, euro_4, euro_5, euro_6, fatt_1, fatt_2, fatt_3, fatt_4, fatt_5, fatt_6], axis=1).corr()

# Calculate the covariance matrix
cov_matrix = pd.concat([popolazione_precedente, popolazione_ultima, reddito_precedente, reddito_fiscale, euro_0, euro_1, euro_2, euro_3, euro_4, euro_5, euro_6, fatt_1, fatt_2, fatt_3, fatt_4, fatt_5, fatt_6], axis=1).cov()

# Calculate the skewness matrix
skew_matrix = pd.concat([popolazione_precedente, popolazione_ultima, reddito_precedente, reddito_fiscale, euro_0, euro_1, euro_2, euro_3, euro_4, euro_5, euro_6, fatt_1, fatt_2, fatt_3, fatt_4, fatt_5, fatt_6], axis=1).skew()

# Calculate the kurtosis matrix
kurtosis_matrix = pd.concat([popolazione_precedente, popolazione_ultima, reddito_precedente, reddito_fiscale, euro_0, euro_1, euro_2, euro_3, euro_4, euro_5, euro_6, fatt_1, fatt_2, fatt_3, fatt_4, fatt_5, fatt_6], axis=1).kurtosis()

# Calculate the variance matrix
var_matrix = pd.concat([popolazione_precedente, popolazione_ultima, reddito_precedente, reddito_fiscale, euro_0, euro_1, euro_2, euro_3, euro_4, euro_5, euro_6, fatt_1, fatt_2, fatt_3, fatt_4, fatt_5, fatt_6], axis=1).var()

# Calculate the range matrix
range_matrix = pd.concat([popolazione_precedente, popolazione_ultima, reddito_precedente, reddito_fiscale, euro_0, euro_1, euro_2, euro_3, euro_4, euro_5, euro_6, fatt_1, fatt_2, fatt_3, fatt_4, fatt_5, fatt_6], axis=1).max() - pd.concat([popolazione_precedente, popolazione_ultima, reddito_precedente, reddito_fiscale, euro_0, euro_1, euro_2, euro_3, euro_4, euro_5, euro_6, fatt_1, fatt_2, fatt_3, fatt_4, fatt_5, fatt_6], axis=1).min()

# Calculate the minimum matrix
min_matrix = pd.concat([popolazione_precedente, popolazione_ultima, reddito_precedente, reddito_fiscale, euro_0, euro_1, euro_2, euro_3, euro_4, euro_5, euro_6, fatt_1, fatt_2, fatt_3, fatt_4, fatt_5, fatt_6], axis=1).min()

# Calculate the maximum matrix
max_matrix = pd.concat([popolazione_precedente, popolazione_ultima, reddito_precedente, reddito_fiscale, euro_0, euro_1, euro_2, euro_3, euro_4, euro_5, euro_6, fatt_1, fatt_2, fatt_3, fatt_4, fatt_5, fatt_6], axis=1).max()

# Calculate the coefficient of variation matrix
cv_matrix = pd.concat([popolazione_precedente, popolazione_ultima, reddito_precedente, reddito_fiscale, euro_0, euro_1, euro_2, euro_3, euro_4, euro_5, euro_6, fatt_1, fatt_2, fatt_3, fatt_4, fatt_5, fatt_6], axis=1).std() / pd.concat([popolazione_precedente, popolazione_ultima, reddito_precedente, reddito_fiscale, euro_0, euro_1, euro_2, euro_3, euro_4, euro_5, euro_6, fatt_1, fatt_2, fatt_3, fatt_4, fatt_5, fatt_6], axis=1).mean()

# Calculate the standard error matrix
se_matrix = pd.concat([popolazione_precedente, popolazione_ultima, reddito_precedente, reddito_fiscale, euro_0, euro_1, euro_2, euro_3, euro_4, euro_5, euro_6, fatt_1, fatt_2, fatt_3, fatt_4, fatt_5, fatt_6], axis=1).sem()

# Calculate the z-score matrix
z_matrix = pd.concat([popolazione_precedente, popolazione_ultima, reddito_precedente, reddito_fiscale, euro_0, euro_1, euro_2, euro_3, euro_4, euro_5, euro_6, fatt_1, fatt_2, fatt_3, fatt_4, fatt_5, fatt_6], axis=1).apply(lambda x: (x - x.mean()) / x.std())

# Calculate the t-score matrix
t_matrix = pd.concat([popolazione_precedente, popolazione_ultima, reddito_precedente, reddito_fiscale, euro_0, euro_1, euro_2, euro_3, euro_4, euro_5, euro_6, fatt_1, fatt_2, fatt_3, fatt_4, fatt_5, fatt_6], axis=1).apply(lambda x: (x - x.mean()) / x.sem())

# Calculate the p-value matrix
p_matrix = norm.cdf(t_matrix)

# Calculate the confidence interval matrix
ci_matrix = norm.interval(0.95, z_matrix, se_matrix)

# Calculate the correlation matrix
corr_matrix = pd.concat([popolazione_precedente, popolazione_ultima, reddito_precedente, reddito_fiscale, euro_0, euro_1, euro_2, euro_3, euro_4, euro_5, euro_6, fatt_1, fatt_2, fatt_3, fatt_4, fatt_5, fatt_6], axis=1).corr()

# Calculate the covariance matrix
cov_matrix = pd.concat([popolazione_precedente, popolazione_ultima, reddito_precedente, reddito_fiscale, euro_0, euro_1, euro_2, euro_3, euro_4, euro_5, euro_6, fatt_1, fatt_2, fatt_3, fatt_4, fatt_5, fatt_6], axis=1).cov()

# Calculate the skewness matrix
skew_matrix = pd.concat([popolazione_precedente, popolazione_ultima, reddito_precedente, reddito_fiscale, euro_0, euro_1, euro_2, euro_3, euro_4, euro_5, euro_6, fatt_1, fatt_2, fatt_3, fatt_4, fatt_5, fatt_6], axis=1).skew()

# Calculate the kurtosis matrix
kurtosis_matrix = pd.concat([popolazione_precedente, popolazione_ultima, reddito_precedente, reddito_fiscale, euro_0, euro_1, euro_2, euro_3, euro_4, euro_5, euro_6, fatt_1, fatt_2, fatt_3, fatt_4, fatt_5, fatt_6], axis=1).kurtosis()

# Calculate the variance matrix
var_matrix = pd.concat([popolazione_precedente, popolazione_ultima, reddito_precedente, reddito_fiscale, euro_0, euro_1, euro_2, euro_3, euro_4, euro_5, euro_6, fatt_1, fatt_2, fatt_3, fatt_4, fatt_5, fatt_6], axis=1).var()

# Calculate the range matrix
range_matrix = pd.concat([popolazione_precedente, popolazione_ultima, reddito_precedente, reddito_fiscale, euro_0, euro_1, euro_2, euro_3, euro_4, euro_5, euro_6, fatt_1, fatt_2, fatt_3, fatt_4, fatt_5, fatt_6], axis=1).max() - pd.concat([popolazione_precedente, popolazione_ultima, reddito_precedente, reddito_fiscale, euro_0, euro_1, euro_2, euro_3, euro_4, euro_5, euro_6, fatt_1, fatt_2, fatt_3, fatt_4, fatt_5, fatt_6], axis=1).min()

# Calculate the minimum matrix
min_matrix = pd.concat([popolazione_precedente, popolazione_ultima, reddito_precedente, reddito_fiscale, euro_0, euro_1, euro_2, euro_3, euro_4, euro_5, euro_6, fatt_1, fatt_2, fatt_3, fatt_4, fatt_5, fatt_6], axis=1).min()

# Calculate the maximum matrix
max_matrix = pd.concat([popolazione_precedente, popolazione_ultima, reddito_precedente, reddito_fiscale, euro_0, euro_1, euro_2, euro_3, euro_4, euro_5, euro_6, fatt_1, fatt_2, fatt_3, fatt_4, fatt_5, fatt_6], axis=1).max()

# Calculate the coefficient of variation matrix
cv_matrix = pd.concat([popolazione_precedente, popolazione_ultima, reddito_precedente, reddito_fiscale, euro_0, euro_1, euro_2, euro_3, euro_4, euro_5, euro_6, fatt_1, fatt_2, fatt_3, fatt_4, fatt_5, fatt_6], axis=1).std() / pd.concat([popolazione_precedente, popolazione_ultima, reddito_precedente, reddito_fiscale, euro_0, euro_1, euro_2, euro_3, euro_4, euro_5, euro_6, fatt_1, fatt_2, fatt_3, fatt_4, fatt_5, fatt_6], axis=1).mean()

# Calculate the standard error matrix
se_matrix = pd.concat([popolazione_precedente, popolazione_ultima, reddito_precedente, reddito_fiscale, euro_0, euro_1, euro_2, euro_3, euro_4, euro_5, euro_6, fatt_1, fatt_2, fatt_3, fatt_4, fatt_5, fatt_6], axis=1).sem()

# Calculate the z-score matrix
z_matrix = pd.concat([popolazione_precedente, popolazione_ultima, reddito_precedente, reddito_fiscale, euro_0, euro_1, euro_2, euro_3, euro_4, euro_5, euro_6, fatt_1, fatt_2, fatt_3, fatt_4, fatt_5, fatt_6], axis=1).apply(lambda x: (x - x.mean()) / x.std())

# Calculate the t-score matrix
t_matrix = pd.concat([popolazione_precedente, popolazione_ultima, reddito_precedente, reddito_fiscale, euro_0, euro_1, euro_2, euro_3, euro_4, euro_5, euro_6, fatt_1, fatt_2, fatt_3, fatt_4, fatt_5, fatt_6], axis=1).apply(lambda x: (x - x.mean()) / x.sem())

# Calculate the p-value matrix
p_matrix = norm.cdf(t_matrix)

# Calculate the confidence interval matrix
ci_matrix = norm.interval(0.95, z_matrix, se_matrix)

# Calculate the correlation matrix
corr_matrix = pd.concat([popolazione_precedente, popolazione_ultima, reddito_precedente, reddito_fiscale, euro_0, euro_1, euro_2, euro_3, euro_4, euro_5, euro_6, fatt_1, fatt_2, fatt_3, fatt_4, fatt_5, fatt_6], axis=1).corr()

# Calculate the covariance matrix
cov_matrix = pd.concat([popolazione_precedente, popolazione_ultima, reddito_precedente, reddito_fiscale, euro_0, euro_1, euro_2, euro_3, euro_4, euro_5, euro_6, fatt_1, fatt_2, fatt_3, fatt_4, fatt_5, fatt_6], axis=1).cov()

# Calculate the skewness matrix
skew_matrix = pd.concat([popolazione_precedente, popolazione_ultima, reddito_precedente, reddito_fiscale, euro_0, euro_1, euro_2, euro_3, euro_4, euro_5, euro_6, fatt_1, fatt_2, fatt_3, fatt_4, fatt_5, fatt_6], axis=1).skew()

# Calculate the kurtosis matrix
kurtosis_matrix = pd.concat([popolazione_precedente, popolazione_ultima, reddito_precedente, reddito_fiscale, euro_0, euro_1, euro_2, euro_3, euro_4, euro_5, euro_6, fatt_1, fatt_2, fatt_3, fatt_4, fatt_5, fatt_6], axis=1).kurtosis()

# Calculate the variance matrix
var_matrix = pd.concat([popolazione_precedente, popolazione_ultima, reddito_precedente, reddito_fiscale, euro_0, euro_1, euro_2, euro_3, euro_4, euro_5, euro_6, fatt_1, fatt_2, fatt_3, fatt_4, fatt_5, fatt_6], axis=1).var()

# Calculate the range matrix
range_matrix = pd.concat([popolazione_precedente, popolazione_ultima, reddito_precedente, reddito_fiscale, euro_0, euro_1, euro_2, euro_3, euro_4, euro_5, euro_6, fatt_1, fatt_2, fatt_3, fatt_4, fatt_5, fatt_6], axis=1).max() - pd.concat([popolazione_precedente, popolazione_ultima, reddito_precedente, reddito_fiscale, euro_0, euro_1, euro_2, euro_3, euro_4, euro_5, euro_6, fatt_1, fatt_2, fatt_3, fatt_4, fatt_5, fatt_6], axis=1).min()

# Calculate the minimum matrix
min_matrix = pd.concat([popolazione_precedente, popolazione_ultima, reddito_precedente, reddito_fiscale, euro_0, euro_1, euro_2, euro_3, euro_4, euro_5, euro_6, fatt_1, fatt_2, fatt_3, fatt_4, fatt_5, fatt_6], axis=1).min()

# Calculate the maximum matrix
max_matrix = pd.concat([popolazione_precedente, popolazione_ultima, reddito_precedente, reddito_fiscale, euro_0, euro_1, euro_2, euro_3, euro_4, euro_5, euro_6, fatt_1, fatt_2, fatt_3, fatt_4, fatt_5, fatt_6], axis=1).max()

# Calculate the coefficient of variation matrix
cv_matrix = pd.concat([popolazione_precedente, popolazione_ultima, reddito_precedente, reddito_fiscale, euro_0, euro_1, euro_2, euro_3, euro_4, euro_5, euro_6, fatt_1, fatt_2, fatt_3, fatt_4, fatt_5, fatt_6], axis=1).std() / pd.concat([popolazione_precedente, popolazione_ultima, reddito_precedente, reddito_fiscale, euro_0, euro_1, euro_2, euro_3, euro_4, euro_5, euro_6, fatt_1, fatt_2, fatt_3, fatt_4, fatt_5, fatt_6], axis=1).mean()

# Calculate the standard error matrix
se_matrix = pd.concat([popolazione_precedente, popolazione_ultima, reddito_precedente, reddito_fiscale, euro_0, euro_1, euro_2, euro_3, euro_4, euro_5, euro_6, fatt_1, fatt_2, fatt_3, fatt_4, fatt_5, fatt_6], axis=1).sem()

# Calculate the z-score matrix
z_matrix = pd.concat([popolazione_precedente, popolazione_ultima, reddito_precedente, reddito_fiscale, euro_0, euro_1, euro_2, euro_3, euro_4, euro_5, euro_6, fatt_1, fatt_2, fatt_3, fatt_4, fatt_5, fatt_6], axis=1).apply(lambda x: (x - x.mean()) / x.std())

# Calculate the t-score matrix
t_matrix = pd.concat([popolazione_precedente, popolazione_ultima, reddito_precedente, reddito_fiscale, euro_0, euro_1, euro_2, euro_3, euro_4, euro_5, euro_6, fatt_1, fatt_2, fatt_3, fatt_4, fatt_5, fatt_6], axis=1).apply(lambda x: (x - x.mean()) / x.sem())

# Calculate the p-value matrix
p_matrix = norm.cdf(t_matrix)

# Calculate the confidence interval matrix
ci_matrix = norm.interval(0.95, z_matrix, se_matrix)

# Calculate the correlation matrix
corr_matrix = pd.concat([popolazione_precedente, popolazione_ultima, reddito_precedente, reddito_fiscale, euro_0, euro_1, euro_2, euro_3, euro_4, euro_5, euro_6, fatt_1, fatt_2, fatt_3, fatt_4, fatt_5, fatt_6], axis=1).corr()

# Calculate the covariance matrix
cov_matrix = pd.concat([popolazione_precedente, popolazione_ultima, reddito_precedente, reddito_fiscale, euro_0, euro_1, euro_2, euro_3, euro_4, euro_5, euro_6, fatt_1, fatt_2, fatt_3, fatt_4, fatt_5, fatt_6], axis=1).cov()

# Calculate the skewness matrix
skew_matrix = pd.concat([popolazione_precedente, popolazione_ultima, reddito_precedente, reddito_fiscale, euro_0, euro_1, euro_2, euro_3, euro_4, euro_5, euro_6, fatt_1, fatt_2, fatt_3, fatt_4, fatt_5, fatt_6], axis=1).skew()

# Calculate the kurtosis matrix
kurtosis_matrix = pd.concat([popolazione_precedente, popolazione_ultima, reddito_precedente, reddito_fiscale, euro_0, euro_1, euro_2, euro_3, euro_4, euro_5, euro_6, fatt_1, fatt_2, fatt_3, fatt_4, fatt_5, fatt_6], axis=1).kurtosis()

# Calculate the variance matrix
var_matrix = pd.concat([popolazione_precedente, popolazione_ultima, reddito_precedente, reddito_fiscale, euro_0, euro_1, euro_2, euro_3, euro_4, euro_5, euro_6, fatt_1, fatt_2, fatt_3, fatt_4, fatt_5, fatt_6], axis=1).var()

# Calculate the range matrix
range_matrix = pd.concat([popolazione_precedente, popolazione_ultima, reddito_precedente, reddito_fiscale, euro_0, euro_1, euro_2, euro_3, euro_4, euro_5, euro_6, fatt_1, fatt_2, fatt_3, fatt_4, fatt_5, fatt_6], axis=1).max() - pd.concat([popolazione_precedente, popolazione_ultima, reddito_precedente, reddito_fiscale, euro_0, euro_1, euro_2, euro_3, euro_4, euro_5, euro_6, fatt_1, fatt_2, fatt_3, fatt_4, fatt_5, fatt_6], axis=1).min()

# Calculate the minimum matrix
min_matrix = pd.concat([popolazione_precedente, popolazione_ultima, reddito_precedente, reddito_fiscale, euro_0, euro_1, euro_2, euro_3, euro_4, euro_5, euro_6, fatt_1, fatt_2, fatt_3, fatt_4, fatt_5, fatt_6], axis=1).min()

# Calculate the maximum matrix
max_matrix = pd.concat([popolazione_precedente, popolazione_ultima, reddito_precedente, reddito_fiscale, euro_0, euro_1, euro_2, euro_3, euro_4, euro_5, euro_6, fatt_1, fatt_2, fatt_3, fatt_4, fatt_5, fatt_6], axis=1).max()

# Calculate the coefficient of variation matrix
cv_matrix = pd.concat([popolazione_precedente, popolazione_ultima, reddito_precedente, reddito_fiscale, euro_0, euro_1, euro_2, euro_3, euro_4, euro_5, euro_6, fatt_1, fatt_2, fatt_3, fatt_4, fatt_5, fatt_6], axis=1).std() / pd.concat([popolazione_precedente, popolazione_ultima, reddito_precedente, reddito_fiscale, euro_0, euro_1, euro_2, euro_3, euro_4, euro_5, euro_6, fatt_1, fatt_2, fatt_3, fatt_4, fatt_5, fatt_6], axis=1).mean()

# Calculate the standard error matrix
se_matrix = pd.concat([popolazione_precedente, popolazione_ultima, reddito_precedente, reddito_fiscale, euro_0, euro_1, euro_2, euro_3, euro_4, euro_5, euro_6, fatt_1, fatt_2, fatt_3, fatt_4, fatt_5, fatt_6], axis=1).sem()

# Calculate the z-score matrix
z_matrix = pd.concat([popolazione_precedente, popolazione_ultima, reddito_precedente, reddito_fiscale, euro_0, euro_1, euro_2, euro_3, euro_4, euro_5, euro_6, fatt_1, fatt_2, fatt_3, fatt_4, fatt_5, fatt_6], axis=1).apply(lambda x: (x - x.mean()) / x.std())

# Calculate the t-score matrix
t_matrix = pd.concat([popolazione_precedente, popolazione_ultima, reddito_precedente, reddito_fiscale, euro_0, euro_1, euro_2, euro_3, euro_4, euro_5, euro_6, fatt_1, fatt_2, fatt_3, fatt_4, fatt_5, fatt_6], axis=1).apply(lambda x: (x - x.mean()) / x.sem())

# Calculate the p-value matrix
p_matrix = norm.cdf(t_matrix)

# Calculate the confidence interval matrix
ci_matrix = norm.interval(0.95, z_matrix, se_matrix)

# Calculate the correlation matrix
corr_matrix = pd.concat([popolazione_precedente, popolazione_ultima, reddito_precedente, reddito_fiscale, euro_0, euro_1, euro_2, euro_3, euro_4, euro_5, euro_6, fatt_1, fatt_2, fatt_3, fatt_4, fatt_5, fatt_6], axis=1).corr()

# Calculate the covariance matrix
cov_matrix = pd.concat([popolazione_precedente, popolazione_ultima, reddito_precedente, reddito_fiscale, euro_0, euro_1, euro_2, euro_3, euro_4, euro_5, euro_6, fatt_1, fatt_2, fatt_3, fatt_4, fatt_5, fatt_6], axis=1).cov()

# Calculate the skewness matrix
skew_matrix = pd.concat([popolazione_precedente, popolazione_ultima, reddito_precedente, reddito_fiscale, euro_0, euro_1, euro_2, euro_3, euro_4, euro_5, euro_6, fatt_1, fatt_2, fatt_3, fatt_4, fatt_5, fatt_6], axis=1).skew()

# Calculate the kurtosis matrix
kurtosis_matrix = pd.concat([popolazione_precedente, popolazione_ultima, reddito_precedente, reddito_fiscale, euro_0, euro_1, euro_2, euro_3, euro_4, euro_5, euro_6, fatt_1, fatt_2, fatt_3, fatt_4, fatt_5, fatt_6], axis=1).kurtosis()

# Calculate the variance matrix
var_matrix = pd.concat([popolazione_precedente, popolazione_ultima, reddito_precedente, reddito_fiscale, euro_0, euro_1, euro_2, euro_3, euro_4, euro_5, euro_6, fatt_1, fatt_2, fatt_3, fatt_4, fatt_5, fatt_6], axis=1).var()

# Calculate the range matrix
range_matrix = pd.concat([popolazione_precedente, popolazione_ultima, reddito_precedente, reddito_fiscale, euro_0, euro_1, euro_2, euro_3, euro_4, euro_5, euro_6, fatt_1, fatt_2, fatt_3, fatt_4, fatt_5, fatt_6], axis=1).max() - pd.concat([popolazione_precedente, popolazione_ultima, reddito_precedente, reddito_fiscale, euro_0, euro_1, euro_2, euro_3, euro_4, euro_5, euro_6, fatt_1, fatt_2, fatt_3, fatt_4, fatt_5, fatt_6], axis=1).min()

# Calculate the minimum matrix
min_matrix = pd.concat([popolazione_precedente, popolazione_ultima, reddito_precedente, reddito_fiscale, euro_0, euro_1, euro_2, euro_3, euro_4, euro_5, euro_6, fatt_1, fatt_2, fatt_3, fatt_4, fatt_5, fatt_6], axis=1).min()

# Calculate the maximum matrix
max_matrix = pd.concat([popolazione_precedente, popolazione_ultima, reddito_precedente, reddito_fiscale, euro_0, euro_1, euro_2, euro_3, euro_4, euro_5, euro_6, fatt_1, fatt_2, fatt_3, fatt_4, fatt_5, fatt_6], axis=1).max()

# Calculate the coefficient of variation matrix
cv_matrix = pd.concat([popolazione_precedente, popolazione_ultima, reddito_precedente, reddito_fiscale, euro_0, euro_1, euro_2, euro_3, euro_4, euro_5, euro_6, fatt_1, fatt_2, fatt_3, fatt_4, fatt_5, fatt_6], axis=1).std() / pd.concat([popolazione_precedente, popolazione_ultima, reddito_precedente, reddito_fiscale, euro_0, euro_1, euro_2, euro_3, euro_4, euro_5, euro_6, fatt_1, fatt_2, fatt_3, fatt_4, fatt_5, fatt_6], axis=1).mean()

# Calculate the standard error matrix
se_matrix = pd.concat([popolazione_precedente, popolazione_ultima, reddito_precedente, reddito_fiscale, euro_0, euro_1, euro_2, euro_3, euro_4, euro_5, euro_6, fatt_1, fatt_2, fatt_3, fatt_4, fatt_5, fatt_6], axis=1).sem()

# Calculate the z-score matrix
z_matrix = pd.concat([popolazione_precedente, popolazione_ultima, reddito_precedente, reddito_fiscale, euro_0, euro_1, euro_2, euro_3, euro_4, euro_5, euro_6, fatt_1, fatt_2, fatt_3, fatt_4, fatt_5, fatt_6], axis=1).apply(lambda x: (x - x.mean()) / x.std())

# Calculate the t-score matrix
t_matrix = pd.concat([popolazione_precedente, popolazione_ultima, reddito_precedente, reddito_fiscale, euro_0, euro_1, euro_2, euro_3, euro_4, euro_5, euro_6, fatt_1, fatt_2, fatt_3, fatt_4, fatt_5, fatt_6], axis=1).apply(lambda x: (x - x.mean()) / x.sem())

# Calculate the p-value matrix
p_matrix = norm.cdf(t_matrix)

# Calculate the confidence interval matrix
ci_matrix = norm.interval(0.95, z_matrix, se_matrix)

# Calculate the correlation matrix
corr_matrix = pd.concat([popolazione_precedente, popolazione_ultima, reddito_precedente, reddito_fiscale, euro_0, euro_1, euro_2, euro_3, euro_4, euro_5, euro_6, fatt_1, fatt_2, fatt_3, fatt_4, fatt_5, fatt_6], axis=1).corr()

# Calculate the covariance matrix
cov_matrix = pd.concat([popolazione_precedente, popolazione_ultima, reddito_precedente, reddito_fiscale, euro_0, euro_1, euro_2, euro_3, euro_4, euro_5, euro_6, fatt_1, fatt_2, fatt_3, fatt_4, fatt_5, fatt_6], axis=1).cov()

# Calculate the skewness matrix
skew_matrix = pd.concat([popolazione_precedente, popolazione_ultima, reddito_precedente, reddito_fiscale, euro_0, euro_1, euro_2, euro_3, euro_4, euro_5, euro_6, fatt_1, fatt_2, fatt_3, fatt_4, fatt_5, fatt_6], axis=1).skew()

# Calculate the kurtosis matrix
kurtosis_matrix = pd.concat([popolazione_precedente, popolazione_ultima, reddito_precedente, reddito_fiscale, euro_0, euro_1, euro_2, euro_3, euro_4, euro_5, euro_6, fatt_1, fatt_2, fatt_3, fatt_4, fatt_5, fatt_6], axis=1).kurtosis()

# Calculate the variance matrix
var_matrix = pd.concat([popolazione_precedente, popolazione_ultima, reddito_precedente, reddito_fiscale, euro_0, euro_1, euro_2, euro_3, euro_4, euro_5, euro_6, fatt_1, fatt_2, fatt_3, fatt_4, fatt_5, fatt_6], axis=1).var()

# Calculate the range matrix
range_matrix = pd.concat([popolazione_precedente, popolazione_ultima, reddito_precedente, reddito_fiscale, euro_0, euro_1, euro_2, euro_3, euro_4, euro_5, euro_6, fatt_1, fatt_2, fatt_3, fatt_4, fatt_5, fatt_6], axis=1).max() - pd.concat([popolazione_precedente, popolazione_ultima, reddito_precedente, reddito_fiscale, euro_0, euro_1, euro_2, euro_3, euro_4, euro_5, euro_6, fatt_1, fatt_2, fatt_3, fatt_4, fatt_5, fatt_6], axis=1).min()

# Calculate the minimum matrix
min_matrix = pd.concat([popolazione_precedente, popolazione_ultima, reddito_precedente, reddito_fiscale, euro_0, euro_1, euro_2, euro_3, euro_4, euro_5, euro_6, fatt_1, fatt_2, fatt_3, fatt_4, fatt_5, fatt_6], axis=1).min()

# Calculate the maximum matrix
max_matrix = pd.concat([popolazione_precedente, popolazione_ultima, reddito_precedente, reddito_fiscale, euro_0, euro_1, euro_2, euro_3, euro_4, euro_5, euro_6, fatt_1, fatt_2, fatt_3, fatt_4, fatt_5, fatt_6], axis=1).max()

# Calculate the coefficient of variation matrix
cv_matrix = pd.concat([popolazione_precedente, popolazione_ultima, reddito_precedente, reddito_fiscale, euro_0, euro_1, euro_2, euro_3, euro_4, euro_5, euro_6, fatt_1, fatt_2, fatt_3, fatt_4, fatt_5, fatt_6], axis=1).std() / pd.concat([popolazione_precedente, popolazione_ultima, reddito_precedente, reddito_fiscale, euro_0, euro_1, euro_2, euro_3, euro_4, euro_5, euro_6, fatt_1, fatt_2, fatt_3, fatt_4, fatt_5, fatt_6], axis=1).mean()

# Calculate the standard error matrix
se_matrix = pd.concat([popolazione_precedente, popolazione_ultima, reddito_precedente, reddito_fiscale, euro_0, euro_1, euro_2, euro_3, euro_4, euro_5, euro_6, fatt_1, fatt_2, fatt_3, fatt_4, fatt_5, fatt_6], axis=1).sem()

# Calculate the z-score matrix
z_matrix = pd.concat([popolazione_precedente, popolazione_ultima, reddito_precedente, reddito_fiscale, euro_0, euro_1, euro_2, euro_3, euro_4, euro_5, euro_6, fatt_1, fatt_2, fatt_3, fatt_4, fatt_5, fatt_6], axis=1).apply(lambda x: (x - x.mean()) / x.std())

# Calculate the t-score matrix
t_matrix = pd.concat([popolazione_precedente, popolazione_ultima, reddito_precedente, reddito_fiscale, euro_0, euro_1, euro_2, euro_3, euro_4, euro_5, euro_6, fatt_1, fatt_2, fatt_3, fatt_4, fatt_5, fatt_6], axis=1).apply(lambda x: (x - x.mean()) / x.sem())

# Calculate the p-value matrix
p_matrix = norm.cdf(t_matrix)

# Calculate the confidence interval matrix
ci_matrix = norm.interval(0.95, z_matrix, se_matrix)

# Calculate the correlation matrix
corr_matrix = pd.concat([popolazione_precedente, popolazione_ultima, reddito_precedente, reddito_fiscale, euro_0, euro_1, euro_2, euro_3, euro_4, euro_5, euro_6, fatt_1, fatt_2, fatt_3, fatt_4, fatt_5, fatt_6], axis=1).corr()

# Calculate the covariance matrix
cov_matrix = pd.concat([popolazione_precedente, popolazione_ultima, reddito_precedente, reddito_fiscale, euro_0, euro_1, euro_2, euro_3, euro_4, euro_5, euro_6, fatt_1, fatt_2, fatt_3, fatt_4, fatt_5, fatt_6], axis=1).cov()

# Calculate the skewness matrix
skew_matrix = pd.concat([popolazione_precedente, popolazione_ultima, reddito_precedente, reddito_fiscale, euro_0, euro_1, euro_2, euro_3, euro_4, euro_5, euro_6, fatt_1, fatt_2, fatt_3, fatt_4, fatt_5, fatt_6], axis=1).skew()

# Calculate the kurtosis matrix
kurtosis_matrix = pd.concat([popolazione_precedente, popolazione_ultima, reddito_precedente, reddito_fiscale, euro_0, euro_1, euro_2, euro_3, euro_4, euro_5, euro_6, fatt_1, fatt_2, fatt_3, fatt_4, fatt_5, fatt_6], axis=1).kurtosis()

# Calculate the variance matrix
var_matrix = pd.concat([popolazione_precedente, popolazione_ultima, reddito_precedente, reddito_fiscale, euro_0, euro_1, euro_2, euro_3, euro_4, euro_5, euro_6, fatt_1, fatt_2, fatt_3, fatt_4, fatt_5, fatt_6], axis=1).var()

# Calculate the range matrix
range_matrix = pd.concat([popolazione_precedente, popolazione_ultima, reddito_precedente, reddito_fiscale, euro_0, euro_1, euro_2, euro_3, euro_4, euro_5, euro_6, fatt_1, fatt_2, fatt_3, fatt_4, fatt_5, fatt_6], axis=1).max() - pd.concat([popolazione_precedente, popolazione_ultima, reddito_precedente, reddito_fiscale, euro_0, euro_1, euro_2, euro_3, euro_4, euro_5, euro_6, fatt_1, fatt_2, fatt_3, fatt_4, fatt_5, fatt_6], axis=1).min()

# Calculate the minimum matrix
min_matrix = pd.concat([popolazione_precedente, popolazione_ultima, reddito_precedente, reddito_fiscale, euro_0, euro_1, euro_2, euro_3, euro_4, euro_5, euro_6, fatt_1, fatt_2, fatt_3, fatt_4, fatt_5, fatt_6], axis=1).min()

# Calculate the maximum matrix
max_matrix = pd.concat([popolazione_precedente, popolazione_ultima, reddito_precedente, reddito_fiscale, euro_0, euro_1, euro_2, euro_3, euro_4, euro_5, euro_6, fatt_1, fatt_2, fatt_3, fatt_4, fatt_5, fatt_6], axis=1).max()

# Calculate the coefficient of variation matrix
cv_matrix = pd.concat([popolazione_precedente, popolazione_ultima, reddito_precedente, reddito_fiscale, euro_0, euro_1, euro_2, euro_3, euro_4, euro_5, euro_6, fatt_1, fatt_2, fatt_3, fatt_4, fatt_5, fatt_6], axis=1).std() / pd.concat([popolazione_precedente, popolazione_ultima, reddito_precedente, reddito_fiscale, euro_0, euro_1, euro_2, euro_3, euro_4, euro_5, euro_6, fatt_1, fatt_2, fatt_3, fatt_4, fatt_5, fatt_6], axis=1).mean()

# Calculate the standard error matrix
se_matrix = pd.concat([popolazione_precedente, popolazione_ultima, reddito_precedente, reddito_fiscale, euro_0, euro_1, euro_2, euro_3, euro_4, euro_5, euro_6, fatt_1, fatt_2, fatt_3, fatt_4, fatt_5, fatt_6], axis=1).sem()

# Calculate the z-score matrix
z_matrix = pd.concat([popolazione_precedente, popolazione_ultima, reddito_precedente, reddito_fiscale, euro_0, euro_1, euro_2, euro_3, euro_4, euro_5, euro_6, fatt_1, fatt_2, fatt_3, fatt_4, fatt_5, fatt_6], axis=1).apply(lambda x: (x - x.mean()) / x.std())

# Calculate the t-score matrix
t_matrix = pd.concat([popolazione_precedente, popolazione_ultima, reddito_precedente, reddito_fiscale, euro_0, euro_1, euro_2, euro_3, euro_4, euro_5, euro_6, fatt_1, fatt_2, fatt_3, fatt_4, fatt_5, fatt_6], axis=1).apply(lambda x: (x - x.mean()) / x.sem())

# Calculate the p-value matrix
p_matrix = norm.cdf(t_matrix)

# Calculate the confidence interval matrix
ci_matrix = norm.interval(0.95, z_matrix, se_matrix)

# Calculate the correlation matrix
corr_matrix = pd.concat([popolazione_precedente, popolazione_ultima, reddito_precedente, reddito_fiscale, euro_0, euro_1, euro_2, euro_3, euro_4, euro_5, euro_6, fatt_1, fatt_2, fatt_3, fatt_4, fatt_5, fatt_6], axis=1).corr()

# Calculate the covariance matrix
cov_matrix = pd.concat([popolazione_precedente, popolazione_ultima, reddito_precedente, reddito_fiscale, euro_0, euro_1, euro_2, euro_3, euro_4, euro_5, euro_6, fatt_1, fatt_2, fatt_3, fatt_4, fatt_5, fatt_6], axis=1).cov()

# Calculate the skewness matrix
skew_matrix = pd.concat([popolazione_precedente, popolazione_ultima, reddito_precedente, reddito_fiscale, euro_0, euro_1, euro_2, euro_3, euro_4, euro_5, euro_6, fatt_1, fatt_2, fatt_3, fatt_4, fatt_5, fatt_6], axis=1).skew()

# Calculate the kurtosis matrix
kurtosis_matrix = pd.concat([popolazione_precedente, popolazione_ultima, reddito_precedente, reddito_fiscale, euro_0, euro_1, euro_2, euro_3, euro_4, euro_5, euro_6, fatt_1, fatt_2, fatt_3, fatt_4, fatt_5, fatt_6], axis=1).kurtosis()

# Calculate the variance matrix
var_matrix = pd.concat([popolazione_precedente, popolazione_ultima, reddito_precedente, reddito_fiscale, euro_0, euro_1, euro_2, euro_3, euro_4, euro_5, euro_6, fatt_1, fatt_2, fatt_3, fatt_4, fatt_5, fatt_6], axis=1).var()

# Calculate the range matrix
range_matrix = pd.concat([popolazione_precedente, popolazione_ultima, reddito_precedente, reddito_fiscale, euro_0, euro_1, euro_2, euro_3, euro_4, euro_5, euro_6, fatt_1, fatt_2, fatt_3, fatt_4, fatt_5, fatt_6], axis=1).max() - pd.concat([popolazione_precedente, popolazione_ultima, reddito_precedente, reddito_fiscale, euro_0, euro_1, euro_2, euro_3, euro_4, euro_5, euro_6, fatt_1, fatt_2, fatt_3, fatt_4, fatt_5, fatt_6], axis=1).min()

# Calculate the minimum matrix
min_matrix = pd.concat([popolazione_precedente, popolazione_ultima, reddito_precedente, reddito_fiscale, euro_0, euro_1, euro_2, euro_3, euro_4, euro_5, euro_6, fatt_1, fatt_2, fatt_3, fatt_4, fatt_5, fatt_6], axis=1).min()

# Calculate the maximum matrix
max_matrix = pd.concat([popolazione_precedente, popolazione_ultima, reddito_precedente, reddito_fiscale, euro_0, euro_1, euro_2, euro_3, euro_4, euro_5, euro_6, fatt_1, fatt_2, fatt_3, fatt_4, fatt_5, fatt_6], axis=1).max()

# Calculate the coefficient of variation matrix
cv_matrix = pd.concat([popolazione_precedente, popolazione_ultima, reddito_precedente, reddito_fiscale, euro_0, euro_1, euro_2, euro_3, euro_4, euro_5, euro_6, fatt_1, fatt_2, fatt_3, fatt_4, fatt_5, fatt_6], axis=1).std() / pd.concat([popolazione_precedente, popolazione_ultima, reddito_precedente, reddito_fiscale, euro_0, euro_1, euro_2, euro_3, euro_4, euro_5, euro_6, fatt_1, fatt_2, fatt_3, fatt_4, fatt_5, fatt_6], axis=1).mean()

# Calculate the standard error matrix
se_matrix = pd.concat([popolazione_precedente, popolazione_ultima, reddito_precedente, reddito_fiscale, euro_0, euro_1, euro_2, euro_3, euro_4, euro_5, euro_6, fatt_1, fatt_2, fatt_3, fatt_4, fatt_5, fatt_6], axis=1).sem()

# Calculate the z-score matrix
z_matrix = pd.concat([popolazione_precedente, popolazione_ultima, reddito_precedente, reddito_fiscale, euro_0, euro_1, euro_2, euro_3, euro_4, euro_5, euro_6, fatt_1, fatt_2, fatt_3, fatt_4, fatt_5, fatt_6], axis=1).apply(lambda x: (x - x.mean()) / x.std())

# Calculate the t-score matrix
t_matrix = pd.concat([popolazione_precedente, popolazione_ultima, reddito_precedente, reddito_fiscale, euro_0, euro_1, euro_2, euro_3, euro_4, euro_5, euro_6, fatt_1, fatt_2, fatt_3, fatt_4, fatt_5, fatt_6], axis=1).apply(lambda x: (x - x.mean()) / x.sem())

# Calculate the p-value matrix
p_matrix = norm.cdf(t_matrix)

# Calculate the confidence interval matrix
ci_matrix = norm.interval(0.95, z_matrix, se_matrix)

# Calculate the correlation matrix
corr_matrix = pd.concat([popolazione_precedente, popolazione_ultima, reddito_precedente, reddito_fiscale, euro_0, euro_1, euro_2, euro_3, euro_4, euro_5, euro_6, fatt_1, fatt_2, fatt_3, fatt_4, fatt_5, fatt_6], axis=1).corr()

# Calculate the covariance matrix
cov_matrix = pd.concat([popolazione_precedente, popolazione_ultima, reddito_precedente, reddito_fiscale, euro_0, euro_1, euro_2, euro_3, euro_4, euro_5, euro_6, fatt_1, fatt_2, fatt_3, fatt_4, fatt_5, fatt_6], axis=1).cov()

# Calculate the skewness matrix
skew_matrix = pd.concat([popolazione_precedente, popolazione_ultima, reddito_precedente, reddito_fiscale, euro_0, euro_1, euro_2, euro_3, euro_4, euro_5, euro_6, fatt_1, fatt_2, fatt_3, fatt_4, fatt_5, fatt_6], axis=1).skew()

# Calculate the kurtosis matrix
kurtosis_matrix = pd.concat([popolazione_precedente, popolazione_ultima, reddito_precedente, reddito_fiscale, euro_0, euro_1, euro_2, euro_3, euro_4, euro_5, euro_6, fatt_1, fatt_2, fatt_3, fatt_4, fatt_5, fatt_6], axis=1).kurtosis()

# Calculate the variance matrix
var_matrix = pd.concat([popolazione_precedente, popolazione_ultima, reddito_precedente, reddito_fiscale, euro_0, euro_1, euro_2, euro_3, euro_4, euro_5, euro_6, fatt_1, fatt_2, fatt_3, fatt_4, fatt_5, fatt_6], axis=1).var()

# Calculate the range matrix
range_matrix = pd.concat([popolazione_precedente, popolazione_ultima, reddito_precedente, reddito_fiscale, euro_0, euro_1, euro_2, euro_3, euro_4, euro_5, euro_6, fatt_1, fatt_2, fatt_3, fatt_4, fatt_5, fatt_6], axis=1).max() - pd.concat([popolazione_precedente, popolazione_ultima, reddito_precedente, reddito_fiscale, euro_0, euro_1, euro_2, euro_3, euro_4, euro_5, euro_6, fatt_1, fatt_2, fatt_3, fatt_4, fatt_5, fatt_6], axis=1).min()

# Calculate the minimum matrix
min_matrix = pd.concat([popolazione_precedente, popolazione_ultima, reddito_precedente, reddito_fiscale, euro_0, euro_1, euro_2, euro_3, euro_4, euro_5, euro_6, fatt_1, fatt_2, fatt_3, fatt_4, fatt_5, fatt_6], axis=1).min()

# Calculate the maximum matrix
max_matrix = pd.concat([popolazione_precedente, popolazione_ultima, reddito_precedente, reddito_fiscale, euro_0, euro_1, euro_2, euro_3, euro_4, euro_5, euro_6, fatt_1, fatt_2, fatt_3, fatt_4, fatt_5, fatt_6], axis=1).max()

# Calculate the coefficient of variation matrix
cv_matrix = pd.concat([popolazione_precedente, popolazione_ultima, reddito_precedente, reddito_fiscale, euro_0, euro_1, euro_2, euro_3, euro_4, euro_5, euro_6, fatt_1, fatt_2, fatt_3, fatt_4, fatt_5, fatt_6], axis=1).std() / pd.concat([popolazione_precedente, popolazione_ultima, reddito_precedente, reddito_fiscale, euro_0, euro_1, euro_2, euro_3, euro_4, euro_5, euro_6, fatt_1, fatt_2, fatt_3, fatt_4, fatt_5, fatt_6], axis=1).mean()

# Calculate the standard error matrix
se_matrix = pd.concat([popolazione_precedente, popolazione_ultima, reddito_precedente, reddito_fiscale, euro_0, euro_1, euro_2, euro_3, euro_4, euro_5, euro_6, fatt_1, fatt_2, fatt_3, fatt_4, fatt_5, fatt_6], axis=1).sem()

# Calculate the z-score matrix
z_matrix = pd.concat([popolazione_precedente, popolazione_ultima, reddito_precedente, reddito_fiscale, euro_0, euro_1, euro_2, euro_3, euro_4, euro_5, euro_6, fatt_1, fatt_2, fatt_3, fatt_4, fatt_5, fatt_6], axis=1).apply(lambda x: (x - x.mean()) / x.std())

# Calculate the t-score matrix
t_matrix = pd.concat([popolazione_precedente, popolazione_ultima, reddito_precedente, reddito_fiscale, euro_0, euro_1, euro_2, euro_3, euro_4, euro_5, euro_6, fatt_1, fatt_2, fatt_3, fatt_4, fatt_5, fatt_6], axis=1).apply(lambda x: (x - x.mean()) / x.sem())

# Calculate the p-value matrix
p_matrix = norm.cdf(t_matrix)

# Calculate the confidence interval matrix
ci_matrix = norm.interval(0.95, z_matrix, se_matrix)

# Calculate the correlation matrix
corr_matrix = pd.concat([popolazione_precedente, popolazione_ultima, reddito_precedente, reddito_fiscale, euro_0, euro_1, euro_2, euro_3, euro_4, euro_5, euro_6, fatt_1, fatt_2, fatt_3, fatt_4, fatt_5, fatt_6], axis=1).corr()

# Calculate the covariance matrix
cov_matrix = pd.concat([popolazione_precedente, popolazione_ultima, reddito_precedente, reddito_fiscale, euro_0, euro_1, euro_2, euro_3, euro_4, euro_5, euro_6, fatt_1, fatt_2, fatt_3, fatt_4, fatt_5, fatt_6], axis=1).cov()

# Calculate the skewness matrix
skew_matrix = pd.concat([popolazione_precedente, popolazione_ultima, reddito_precedente, reddito_fiscale, euro_0, euro_1, euro_2, euro_3, euro_4, euro_5, euro_6, fatt_1, fatt_2, fatt_3, fatt_4, fatt_5, fatt_6], axis=1).skew()

# Calculate the kurtosis matrix
kurtosis_matrix = pd.concat([popolazione_precedente, popolazione_ultima, reddito_precedente, reddito_fiscale, euro_0, euro_1, euro_2, euro_3, euro_4, euro_5, euro_6, fatt_1, fatt_2, fatt_3, fatt_4, fatt_5, fatt_6], axis=1).kurtosis()

# Calculate the variance matrix
var_matrix = pd.concat([popolazione_precedente, popolazione_ultima, reddito_precedente, reddito_fiscale, euro_0, euro_1, euro_2, euro_3, euro_4, euro_5, euro_6, fatt_1, fatt_2, fatt_3, fatt_4, fatt_5, fatt_6], axis=1).var()

# Calculate the range matrix
range_matrix = pd.concat([popolazione_precedente, popolazione_ultima, reddito_precedente, reddito_fiscale, euro_0, euro_1, euro_2, euro_3, euro_4, euro_5, euro_6, fatt_1, fatt_2, fatt_3, fatt_4, fatt_5, fatt_6], axis=1).max() - pd.concat([pop