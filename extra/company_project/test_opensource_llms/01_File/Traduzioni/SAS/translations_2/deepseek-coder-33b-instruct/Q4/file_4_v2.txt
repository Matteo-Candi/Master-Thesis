The SAS code you provided is quite complex and involves multiple data manipulation, sorting, merging, statistical analysis and visualization. The Python equivalent would be a bit more involved due to the lack of built-in functions in Python for some SAS operations (like PROC MEANS, PROC UNIVARIATE etc.). However, I will try to provide you with an approximate translation:

```python
import pandas as pd
import numpy as np
from scipy import stats
import matplotlib.pyplot as plt
from sklearn.linear_model import LinearRegression

# Define file paths
ter_path = "C:/Users/mcandi/OneDrive – KPMG/Desktop/project/SAS_scripts/Data_sets"
sez_path = ter_path # Assuming same path for both sez and ter
appo_path = ter_path # Assuming same path for all three libnames
macro_path = "C:/Users/mcandi/OneDrive – KPMG/Desktop/project/SAS_scripts/Data_sets/Macro"

# Load data
geog = pd.read_csv(f'{ter_path}/geografica_comune.csv')
eco = pd.read_csv(f'{ter_path}/economica_comune.csv')
popnew = pd.read_csv(f'{ter_path}/Popolazione_eta_sesso_comune.csv')
appo = pd.read_csv(f'{appo_path}/appo.csv') # Assuming 'appo' is the file you want to load

# Perform data manipulation and merging
geog['territorio'] = np.where(geog['nome_regione'] == "TRENTINO-ALTO ADIGE", geog['nome_provincia'], geog['nome_regione'])
basecom1 = pd.merge(eco, geog, on='codice_comune__str').dropna() # Assuming 'codice_comune__str' is the common column in both dataframes
popnew = popnew.groupby('codice_comune__str')['popolazione'].sum().reset_index()
basecom1 = pd.merge(basecom1, popnew, on='codice_comune__str').dropna() # Assuming 'codice_comune__str' is the common column in both dataframes
basecom1['red_pop'] = basecom1['reddito'] / basecom1['popolazione']
basecom1['con_pop'] = basecom1['consumi_totali'] / basecom1['popolazione']
basecom1['propensione'] = basecom1['con_pop'] / basecom1['red_pop']
basecom1['inverso'] = 1 / basecom1['red_pop']

# Perform statistical analysis and visualization (using pandas, numpy and matplotlib)
print(stats.describe(basecom1['propensione'])) # Equivalent to PROC UNIVARIATE in SAS
plt.hist(basecom1['propensione']) # Equivalent to HISTOGRAM statement in SAS
corr_mat = basecom1[['propensione', 'red_pop', 'inverso']].corr() # Equivalent to CORR procedure in SAS
print(corr_mat)

# Perform linear regression (using scikit-learn)
X = basecom1['inverso'].values.reshape(-1, 1)
y = basecom1['propensione'].values.reshape(-1, 1)
regression_model = LinearRegression()
regression_model.fit(X, y) # Equivalent to MODEL statement in SAS
print('Intercept:', regression_model.intercept_)
print('Coefficient:', regression_model.coef_[0])
```
Please note that this is a very basic translation and it may not cover all the operations performed in your original SAS code, as some of them are quite complex or specific to the data you're working with. Also, Python does not have a direct equivalent for PROC GPLOT which is used in your code, so I couldn't include that part.
