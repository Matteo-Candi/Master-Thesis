You are an expert in translating code from SAS to Python; translate the given code at your best even if there are problems; insert comments inside the code; do not return any message outside the code and make it as readable as possible; minimize the code complexity and volume; create functions to automate frequently needed operations; ensure to not make any syntax error; define all variables and import all libraries used even if imported locally; ensure the user can copy and run the code without modifications; translate from SAS to Python every part of the input code reproducing the same operations; do not use SAS syntax in the Python code; define correctly the file paths; return the code in single block; make Python code more efficient than the SAS one. 

@@Instruction 
Translate the following code from SAS to Python:


libname ter "C:\Users\mcandi\OneDrive - KPMG\Desktop\project\SAS_scripts\Data_sets";
libname sez "C:\Users\mcandi\OneDrive - KPMG\Desktop\project\SAS_scripts\Data_sets";

libname ter_out "C:\Users\mcandi\OneDrive - KPMG\Desktop\project\SAS_scripts\Data_sets";
libname sez_out "C:\Users\mcandi\OneDrive - KPMG\Desktop\project\SAS_scripts\Data_sets";

libname appo "C:\Users\mcandi\OneDrive - KPMG\Desktop\project\SAS_scripts\Data_sets";

options mergenoby = warn;

data xclasse;
	set ter.etapop20b;
	time = 2019;
	length eta1_a $ 6;
	if 15 <= eta <= 17
		then eta1_a = "Y_UN17";
	else if 18 <= eta <= 49
		then eta1_a = "Y"||trim(left(eta));
	else if 50 <= eta <= 54
		then eta1_a = "Y_GE50";
	else delete;
	keep codc620b eta1_a eta time tot_fem;
	rename codc620b = codice_comune__str
		   tot_fem = femmine;
run;
proc tabulate data = xclasse;
	class eta1_a;
	var eta;
	table eta1_a, eta*(min max) * f = 6. /nocellmerge;
run;
proc sort data = xclasse;
	by codice_comune__str;
run;
data xgeog;
	set ter_out.geografica_comune;
	keep codice_comune__str codice_provincia;
run;
proc sort data = xgeog;
	by codice_comune__str;
run;
data xclageo;
	merge xgeog xclasse;
	by codice_comune__str;
run;
proc means data = xclageo noprint;
	class codice_provincia eta1_a;
	types codice_provincia * eta1_a;
	id time;
	output out = provinciale_donne (drop = _type_ _freq_)
		sum(femmine) = donne_classe_eta;
run;

data nati;
	set appo.nati_eta_madre_provincia_istat;
	rename valore = nati;
run;
proc sort data = nati;
	by codice_provincia eta1_a;
run;
proc sort data = provinciale_donne;
	by codice_provincia eta1_a;
run;
data nati_donne;
	merge nati provinciale_donne (drop = time);
	by codice_provincia eta1_a;
run; 

data nati_donne_rapp;
	set nati_donne;
	nati_1000_donne_classe_eta = 1000 * nati / donne_classe_eta;
run;

options nolabel;


 
@@Response
Here is the Python equivalent of the SAS code:

```python
import pandas as pd
import os

# Specify the paths
ter_path = r"C:\Users\mcandi\OneDrive - KPMG\Desktop\project\SAS_scripts\Data_sets"
sez_path = r"C:\Users\mcandi\OneDrive - KPMG\Desktop\project\SAS_scripts\Data_sets"
ter_out_path = r"C:\Users\mcandi\OneDrive - KPMG\Desktop\project\SAS_scripts\Data_sets"
sez_out_path = r"C:\Users\mcandi\OneDrive - KPMG\Desktop\project\SAS_scripts\Data_sets"
appo_path = r"C:\Users\mcandi\OneDrive - KPMG\Desktop\project\SAS_scripts\Data_sets"

# Load datasets
ter = pd.read_csv(os.path.join(ter_path, 'etapop20b.csv'))
sez = pd.read_csv(os.path.join(sez_path, 'etapop20b.csv'))

# Transform data
ter['time'] = 2019
ter['eta1_a'] = np.where((15 <= ter['eta']) & (ter['eta'] <= 17), 'Y_UN17', 
                         np.where((18 <= ter['eta']) & (ter['eta'] <= 49), 'Y' + ter['eta'].astype(str),
                                  np.where((50 <= ter['eta']) & (ter['eta'] <= 54), 'Y_GE50', None)))
ter = ter[['codc620b', 'eta1_a', 'eta', 'tot_fem']]
ter.rename(columns={'codc620b': 'codice_comune__str', 'tot_fem': 'femmine'}, inplace=True)

# Analyze data
xclasse = ter.groupby('eta1_a')['eta'].agg(['min', 'max'])

# Prepare data
ter_out = pd.read_csv(os.path.join(ter_out_path, 'geografica_comune.csv'))
ter_out = ter_out[['codice_comune__str', 'codice_provincia']]

xclageo = pd.merge(ter_out, ter, on='codice_comune__str')

provinciale_donne = xclageo.groupby(['codice_provincia', 'eta1_a'])['femmine'].sum().reset_index()
provinciale_donne.rename(columns={'femmine': 'donne_classe_eta'}, inplace=True)

# Analyze data
nati = pd.read_csv(os.path.join(appo_path, 'nati_eta_madre_provincia_istat.csv'))
nati.rename(columns={'valore': 'nati'}, inplace=True)

nati_donne = pd.merge(nati, provinciale_donne, on=['codice_provincia', 'eta1_a'])
nati_donne['nati_1000_donne_classe_eta'] = nati_donne['nati'] / nati_donne['donne_classe_eta'] * 1000

# Display data
nati_donne_rapp = nati_donne
```

Please note that the Python code assumes that the input data files are in CSV format and the column names match the original SAS code. The paths to the data files, as well as the column names for rename and merge operations, may need to be adjusted to match your specific data structure and naming conventions.