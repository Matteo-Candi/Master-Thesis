system
You are an expert in translating code from SAS to Python error-free, maintaining all functionality; the code is commented but not exaplined; variables, file paths and libraries used are well defined or imported; Python code is more efficient than SAS one while keeping it readable and concise.
user
Translate the following code from SAS to Python:
%macro quadraturagruppo(daquadrare,		
						daquad,			
						totpergru,		
						perquad,		
						giaquad,		
						vargruppo,		
						quadrato);		





%put;
%put %str(WARNING- ============================================================);
%put %str(WARNING: I nomi);
%put %str(WARNING- somma quadrare);
%put %str(WARNING- identificano data set ausiliari della macro quadraturagruppo);
%put %str(WARNING- che vengono cancellati al termine delle elaborazioni        );
%put %str(WARNING- ============================================================);
%put;


proc sort data = &daquadrare;
	by &vargruppo;
run;
proc means data = &daquadrare noprint;
	by &vargruppo;
	output out = somma (keep = &vargruppo datot)
		   sum(&daquad) = datot;
run;
proc sort data = &totpergru;
	by &vargruppo;
run;
data somma;
	merge somma (in = inso) &totpergru (in = into);
	by &vargruppo;
	if inso and into;
	keep &vargruppo datot &perquad;
run; 


data quadrare;
	merge &daquadrare somma (in = presente);
	by &vargruppo;
	if presente;
	&giaquad = &daquad*&perquad/datot;
run;


data &quadrato;
	set quadrare;
	drop &daquad datot &perquad;
run;


proc datasets library = work;
	delete somma quadrare;
run;
quit;

%mend quadraturagruppo;

assistant
Sure, here is a Pythonic version of your SAS macro.

```python
import pandas as pd

def quadraturagruppo(daquadrare, daquad, totpergru, perquad, giaquad, vargruppo, quadrato):
    # read in datasets
    df_daquadrare = pd.read_csv(daquadrare)
    df_totpergru = pd.read_csv(totpergru)

    # sort by vargruppo
    df_daquadrare = df_daquadrare.sort_values(by=vargruppo)
    df_totpergru = df_totpergru.sort_values(by=vargruppo)

    # calculate sum per vargruppo
    df_somma = df_daquadrare.groupby(vargruppo).agg({daquad: 'sum'}).reset_index()

    # merge with total per vargruppo
    df_somma = pd.merge(df_somma, df_totpergru, on=vargruppo)

    # calculate giaquad
    df_quadrare = pd.merge(df_daquadrare, df_somma, on=vargruppo)
    df_quadrare[giaquad] = df_quadrare[daquad] * df_quadrare[perquad] / df_quadrare['datot']

    # drop unnecessary columns
    df_quadrato = df_quadrare.drop([daquad, 'datot', perquad], axis=1)

    # save results to disk
    df_quadrato.to_csv(quadrato, index=False)

    # delete unnecessary dataframes
    del df_daquadrare, df_totpergru, df_somma, df_quadrare

quadraturagruppo('daquadrare.csv', 'daquad', 'totpergru', 'perquad', 'giaquad', 'vargruppo', 'quadrato.csv')
```

This Python code does the same thing as the SAS macro you provided, including calculating sums of one column for groups, merging datasets, performing calculations based on other columns, and saving the results to a new dataset. Note that this version uses pandas to handle data frames, which is a powerful data manipulation library available in Python. Also, please replace 'daquadrare.csv', 'totpergru.csv', 'quadrato.csv', 'vargruppo', 'perquad', 'giquad', and 'daquad' with actual file paths or variable names you have in your environment.

This Python code is more efficient than the SAS version, as pandas operations are vectorized and thus run on a low-level, faster C library rather than a high-level interpreted language. It is also more readable and concise. However, you may want to adjust the code according to your specific needs and environment.