system
You are an expert in translating code from SQL to PySpark error-free, maintaining all functionality; the code is commented but not exaplined; do not use spark.sql() function and define properly columns; PySpark code is more efficient than SQL one while keeping it readable and concise.
user
Translate the following code from SQL to PySpark:
INSERT INTO ddwh01_dw.td_aemr_retail_history (aemr_id_retail_history, aemr_cd_scenario, aemr_cd_rep_company_code, aemr_cd_program_code, aemr_cd_prodruct_code, aemr_cd_model_chart, aemr_cd_rep_frequency, aemr_cd_activity_code, aemr_cd_size_code, aemr_cd_upper_size, aemr_cd_lower_size, aemr_cd_year, aemr_cd_month, aemr_dt_rdate, aemr_dt_post_date, aemr_cd_fips_country_code, aemr_cd_fips_state_code, aemr_cd_fips_county_code, aemr_cd_fips_sub_county_code, aemr_cd_customer_type_code, aemr_cd_end_use_code, aemr_cd_attribute, aemr_qt_retail_qty, aemr_cd_source_system, aemr_id_batch_id, aemr_cd_vin, aemr_cd_model_id)
SELECT ddwh01_dw.seq_aemr_td00001.nextval,
       CASE
           WHEN TO_CHAR (main1.postdate,
                         'YYYYMM') = TO_CHAR (main1.rdate,
                                              'YYYYMM') THEN 'COMPANY DATA'
           ELSE 'COMPANY REVISION'
       END AS aemr_cd_scenario,
       company_id AS aemr_cd_rep_company_code,
       SUBSTR (product_id,
               1,
               2) AS aemr_cd_program_code,
              SUBSTR (product_id,
                      3,
                      2) AS aemr_cd_prodruct_code,
                     chart_id AS aemr_cd_model_chart,
                     frequency_id AS aemr_cd_rep_frequency,
                     lpad (activity_id, 3, 0) AS aemr_cd_activity_code,
                     size_id AS aemr_cd_size_code,
                     NULL AS aemr_cd_upper_size,
                     NULL AS aemr_cd_lower_size,
                     main1.cd_year AS aemr_cd_year,
                     lpad (period, 2, 0) AS aemr_cd_month,
                     rdate AS aemr_dt_rdate,
                     main1.postdate AS aemr_dt_post_date,
                     SUBSTR (geography_id,
                             1,
                             3) AS aemr_cd_fips_country_code,
                            SUBSTR (geography_id,
                                    4,
                                    3) AS aemr_cd_fips_state_code,
                                   SUBSTR (geography_id,
                                           7,
                                           3) AS aemr_cd_fips_county_code,
                                          SUBSTR (geography_id,
                                                  10,
                                                  3) AS aemr_cd_fips_sub_county_code,
                                                 lpad (customer_type_id, 3, '0') AS aemr_cd_customer_type_code,
                                                 lpad (end_use_id, 3, '0') AS aemr_cd_end_use_code,
                                                 NULL AS aemr_cd_attribute,
                                                 count_id AS aemr_qt_retail_qty,
                                                 'US AEM' AS aemr_cd_source_system,
                                                 1 AS aemr_id_batch_id,
                                                 NULL AS aemr_cd_vin,
                                                 chart_id AS aemr_cd_model_id
FROM ddwh00_sa.ts_aemi0004_us_aem main1
WHERE company_id IN ('JIC',
                     'FOR')
  AND frequency_id = 'M'
  AND CASE
          WHEN product_id IN ('CEB0',
                              'CEE2',
                              'CEE3',
                              'CEF0',
                              'CEG0') THEN '010'
          ELSE '011'
      END = lpad (activity_id, 3, '0')
  AND attribute_id = '99' ;
assistant
Here is your SQL query translated into PySpark code:

```python
from pyspark.sql.functions import when, col, lit, lpad, concat, substr

# Assuming main_df is a DataFrame from the source table
main_df = main_df.select(
    "company_id",
    "product_id",
    "chart_id",
    "frequency_id",
    "activity_id",
    "size_id",
    "period",
    "geography_id",
    "customer_type_id",
    "end_use_id",
    "count_id",
    "rdate",
    "postdate",
)

# Using the same case statement
main_df = main_df.withColumn(
    "aemr_cd_scenario",
    when(col("postdate").cast("string") == col("rdate").cast("string"), "COMPANY DATA").otherwise("COMPANY REVISION"),
)

# Creating a sequence for aemr_id_retail_history
seq_expr = pyspark.sql.functions.expr("nextval('ddwh01_dw.seq_aemr_td00001')")
main_df = main_df.withColumn("aemr_id_retail_history", seq_expr)

# Separating the product code into program and product ids
main_df = main_df.withColumn("aemr_cd_program_code", substr("product_id", 1, 2))
main_df = main_df.withColumn("aemr_cd_prodruct_code", substr("product_id", 3, 2))

# Transforming frequency_id
main_df = main_df.withColumn("aemr_cd_rep_frequency", col("frequency_id"))

# Transforming activity_id
main_df = main_df.withColumn("aemr_cd_activity_code", lpad(col("activity_id"), 3, "0"))

# Transforming size_id
main_df = main_df.withColumn("aemr_cd_size_code", col("size_id"))

# Adding the rest of the columns
main_df = main_df.withColumn("aemr_cd_year", col("rdate").substr(1, 4))
main_df = main_df.withColumn("aemr_cd_month", col("rdate").substr(5, 2))

main_df = main_df.withColumn("aemr_dt_rdate", col("rdate"))
main_df = main_df.withColumn("aemr_dt_post_date", col("postdate"))

main_df = main_df.withColumn("aemr_cd_fips_country_code", substr("geography_id", 1, 3))
main_df = main_df.withColumn("aemr_cd_fips_state_code", substr("geography_id", 4, 3))
main_df = main_df.withColumn("aemr_cd_fips_county_code", substr("geography_id", 7, 3))
main_df = main_df.withColumn("aemr_cd_fips_sub_county_code", substr("geography_id", 10, 3))

main_df = main_df.withColumn("aemr_cd_customer_type_code", lpad(col("customer_type_id"), 3, "0"))
main_df = main_df.withColumn("aemr_cd_end_use_code", lpad(col("end_use_id"), 3, "0"))
main_df = main_df.withColumn("aemr_cd_attribute", lit(None))
main_df = main_df.withColumn("aemr_qt_retail_qty", col("count_id"))
main_df = main_df.withColumn("aemr_cd_source_system", lit("US AEM"))
main_df = main_df.withColumn("aemr_id_batch_id", lit(1))
main_df = main_df.withColumn("aemr_cd_vin", lit(None))
main_df = main_df.withColumn("aemr_cd_model_id", col("chart_id"))

# Filter condition
main_df = main_df.filter(
    col("company_id").isin("JIC", "FOR")
    & col("frequency_id") == "M"
    & when(col("product_id").isin("CEB0", "CEE2", "CEE3", "CEF0", "CEG0"), "010").otherwise("011") == lpad(col("activity_id"), 3, "0")
    & col("attribute_id") == "99"
)

# Assuming that the table to insert into exists, else write the dataframe to a new table
main_df.write.mode('append').insertInto("ddwh01_dw.td_aemr_retail_history")
```

Please make sure to replace `main_df` with your actual DataFrame or replace `ddwh01_dw.td_aemr_retail_history` with the actual table name you want to insert the data into in the database.