system
You are an expert in translating code from SQL to PySpark error-free, maintaining all functionality; the code is commented but not exaplined; do not use spark.sql() function and define properly columns; PySpark code is more efficient than SQL one while keeping it readable and concise.
user
Translate the following code from SQL to PySpark:
MERGE INTO ddwh01_dw.TM_DESC_DESCRIPTION TARGET USING
  (SELECT 'MAKT' DESC_CD_TABLE ,
                 'Material' DESC_CD_TABLE_DESC ,
                            MATNR DESC_CD_CODE ,
                            SPRAS DESC_CD_LANGUAGE ,
                            1 DESC_CD_POSITION ,
                            MAKTX DESC_CD_DESCRIPTION1 ,
                            MAKTG DESC_CD_DESCRIPTION2 ,
                            NULL DESC_CD_DETAIL1 ,
                                 NULL DESC_CD_DETAIL2 ,
                                      NULL DESC_CD_DETAIL3 ,
                                           'WW GPP' DESC_CD_SOURCE_SYSTEM
   FROM ddwh00_sa.TS_MAKT0001_WW_GPP SA
   UNION ALL SELECT 'EQKT' DESC_CD_TABLE ,
                           'Equipment' DESC_CD_TABLE_DESC ,
                                       EQUNR DESC_CD_CODE ,
                                       SPRAS DESC_CD_LANGUAGE ,
                                       1 DESC_CD_POSITION ,
                                       EQKTX DESC_CD_DESCRIPTION1 ,
                                       EQKTU DESC_CD_DESCRIPTION2 ,
                                       KZLTX DESC_CD_DETAIL1 ,
                                       TXASP DESC_CD_DETAIL2 ,
                                       TO_CHAR(TEXTCHANGEDDATETIME) DESC_CD_DETAIL3 ,
                                       'WW GPP' DESC_CD_SOURCE_SYSTEM
   FROM ddwh00_sa.TS_EQKT0001_WW_GPP SA2
   UNION ALL SELECT 'T005T' DESC_CD_TABLE ,
                            'Country' DESC_CD_TABLE_DESC ,
                                      LAND1 DESC_CD_CODE ,
                                      SPRAS DESC_CD_LANGUAGE ,
                                      1 DESC_CD_POSITION ,
                                      LANDX DESC_CD_DESCRIPTION1 ,
                                      LANDX50 DESC_CD_DESCRIPTION2 ,
                                      PRQ_SPREGT DESC_CD_DETAIL1 ,
                                      NATIO DESC_CD_DETAIL2 ,
                                      NATIO50 DESC_CD_DETAIL3 ,
                                      'WW GPP' DESC_CD_SOURCE_SYSTEM
   FROM ddwh00_sa.TS_T0050002_WW_GPP SA3
   UNION ALL SELECT 'T023T' DESC_CD_TABLE ,
                            'Commodity' DESC_CD_TABLE_DESC ,
                                        MATKL DESC_CD_CODE ,
                                        SPRAS DESC_CD_LANGUAGE ,
                                        1 DESC_CD_POSITION ,
                                        WGBEZ DESC_CD_DESCRIPTION1 ,
                                        WGBEZ60 DESC_CD_DESCRIPTION2 ,
                                        NULL DESC_CD_DETAIL1 ,
                                             NULL DESC_CD_DETAIL2 ,
                                                  NULL DESC_CD_DETAIL3 ,
                                                       'WW GPP' DESC_CD_SOURCE_SYSTEM
   FROM ddwh00_sa.TS_T0230002_WW_GPP SA4
   UNION ALL SELECT 'T052U' DESC_CD_TABLE ,
                            'Payment Condition' DESC_CD_TABLE_DESC ,
                                                CONCAT(ZTERM, NVL(ZTAGG, -1)) DESC_CD_CODE ,
                                                SPRAS DESC_CD_LANGUAGE ,
                                                1 DESC_CD_POSITION ,
                                                TEXT1 DESC_CD_DESCRIPTION1 ,
                                                NULL DESC_CD_DESCRIPTION2 ,
                                                     NULL DESC_CD_DETAIL1 ,
                                                          NULL DESC_CD_DETAIL2 ,
                                                               NULL DESC_CD_DETAIL3 ,
                                                                    'WW GPP' DESC_CD_SOURCE_SYSTEM
   FROM ddwh00_sa.TS_T0520002_WW_GPP SA5
   UNION ALL SELECT 'TINCT' DESC_CD_TABLE ,
                            'Incoterms' DESC_CD_TABLE_DESC ,
                                        INCO1 DESC_CD_CODE ,
                                        SPRAS DESC_CD_LANGUAGE ,
                                        1 DESC_CD_POSITION ,
                                        BEZEI DESC_CD_DESCRIPTION1 ,
                                        NULL DESC_CD_DESCRIPTION2 ,
                                             NULL DESC_CD_DETAIL1 ,
                                                  NULL DESC_CD_DETAIL2 ,
                                                       NULL DESC_CD_DETAIL3 ,
                                                            'WW GPP' DESC_CD_SOURCE_SYSTEM
   FROM ddwh00_sa.TS_TINC0002_WW_GPP SA6
   UNION ALL SELECT 'SWOR' DESC_CD_TABLE ,
                           'Hierarchy Material Group' DESC_CD_TABLE_DESC ,
                                                      TO_CHAR(CLINT) DESC_CD_CODE ,
                                                      SPRAS DESC_CD_LANGUAGE ,
                                                      KLPOS DESC_CD_POSITION ,
                                                      KSCHL DESC_CD_DESCRIPTION1 ,
                                                      KSCHG DESC_CD_DESCRIPTION2 ,
                                                      NULL DESC_CD_DETAIL1 ,
                                                           NULL DESC_CD_DETAIL2 ,
                                                                NULL DESC_CD_DETAIL3 ,
                                                                     'WW GPP' DESC_CD_SOURCE_SYSTEM
   FROM ddwh00_sa.TS_SWOR00001_WW_GPP SA7 MINUS SELECT DESC_CD_TABLE ,
                                                       DESC_CD_TABLE_DESC ,
                                                       DESC_CD_CODE ,
                                                       DESC_CD_LANGUAGE ,
                                                       DESC_CD_POSITION ,
                                                       DESC_CD_DESCRIPTION1 ,
                                                       DESC_CD_DESCRIPTION2 ,
                                                       DESC_CD_DETAIL1 ,
                                                       DESC_CD_DETAIL2 ,
                                                       DESC_CD_DETAIL3 ,
                                                       DESC_CD_SOURCE_SYSTEM
   FROM ddwh01_dw.TM_DESC_DESCRIPTION DW) SA ON (TARGET.DESC_CD_TABLE = SA.DESC_CD_TABLE
                                                 AND TARGET.DESC_CD_CODE = SA.DESC_CD_CODE
                                                 AND TARGET.DESC_CD_LANGUAGE = SA.DESC_CD_LANGUAGE
                                                 AND NVL(TARGET.DESC_CD_POSITION, -1) = NVL(SA.DESC_CD_POSITION, -1)) WHEN MATCHED THEN
UPDATE
SET TARGET.DESC_CD_DESCRIPTION1 = SA.DESC_CD_DESCRIPTION1 ,
    TARGET.DESC_CD_DESCRIPTION2 = SA.DESC_CD_DESCRIPTION2 ,
    TARGET.DESC_CD_DETAIL1 = SA.DESC_CD_DETAIL1 ,
    TARGET.DESC_CD_DETAIL2 = SA.DESC_CD_DETAIL2 ,
    TARGET.DESC_CD_DETAIL3 = SA.DESC_CD_DETAIL3 ,
    TARGET.DESC_DT_LAST_MODIFY = SYSDATE ,
    TARGET.DESC_ID_BATCH_LAST_MODIFY = NVL(p_ELT_ID_BATCH, n_ELT_ID_JOB_LOG) WHEN NOT MATCHED THEN
INSERT (DESC_ID_TABLE ,
        DESC_CD_TABLE ,
        DESC_CD_TABLE_DESC ,
        DESC_CD_CODE ,
        DESC_CD_LANGUAGE ,
        DESC_CD_POSITION ,
        DESC_CD_DESCRIPTION1 ,
        DESC_CD_DESCRIPTION2 ,
        DESC_CD_DETAIL1 ,
        DESC_CD_DETAIL2 ,
        DESC_CD_DETAIL3 ,
        DESC_CD_SOURCE_SYSTEM ,
        DESC_DT_INSERT ,
        DESC_DT_LAST_MODIFY ,
        DESC_ID_BATCH_ID ,
        DESC_ID_BATCH_LAST_MODIFY ,
        DESC_DT_START_VALIDITY ,
        DESC_DT_END_VALIDITY)
VALUES (DDWH01_DW.SEQ_TM_DESC.NEXTVAL , SA.DESC_CD_TABLE , SA.DESC_CD_TABLE_DESC , SA.DESC_CD_CODE , SA.DESC_CD_LANGUAGE , SA.DESC_CD_POSITION , SA.DESC_CD_DESCRIPTION1 , SA.DESC_CD_DESCRIPTION2 , SA.DESC_CD_DETAIL1 , SA.DESC_CD_DETAIL2 , SA.DESC_CD_DETAIL3 , SA.DESC_CD_SOURCE_SYSTEM , SYSDATE , SYSDATE , NVL(p_ELT_ID_BATCH, n_ELT_ID_JOB_LOG) , NVL(p_ELT_ID_BATCH, n_ELT_ID_JOB_LOG) , TO_DATE('01/01/1900', 'DD/MM/YYYY') , TO_DATE('31/12/9999', 'DD/MM/YYYY') );
assistant
Here is the equivalent PySpark code:

```python
from pyspark.sql import SparkSession
from pyspark.sql.functions import concat, col, nvl, to_date, sys_date

# Create a SparkSession
spark = SparkSession.builder.appName("Merge Operation").getOrCreate()

# Define the data sources
source_dfs = [
    spark.read.format("jdbc").options(
        url="jdbc:oracle:thin:@//hostname:port/sid",
        driver="oracle.jdbc.driver.OracleDriver",
        dbtable="ddwh00_sa.TS_MAKT0001_WW_GPP",
        user="username",
        password="password"
    ).select(
        "'MAKT' AS DESC_CD_TABLE",
        "'Material' AS DESC_CD_TABLE_DESC",
        "MATNR AS DESC_CD_CODE",
        "SPRAS AS DESC_CD_LANGUAGE",
        lit(1).alias("DESC_CD_POSITION"),
        "MAKTX AS DESC_CD_DESCRIPTION1",
        "MAKTG AS DESC_CD_DESCRIPTION2",
        lit(None).alias("DESC_CD_DETAIL1"),
        lit(None).alias("DESC_CD_DETAIL2"),
        lit(None).alias("DESC_CD_DETAIL3"),
        lit("WW GPP").alias("DESC_CD_SOURCE_SYSTEM")
    ),
    spark.read.format("jdbc").options(
        url="jdbc:oracle:thin:@//hostname:port/sid",
        driver="oracle.jdbc.driver.OracleDriver",
        dbtable="ddwh00_sa.TS_EQKT0001_WW_GPP",
        user="username",
        password="password"
    ).select(
        "'EQKT' AS DESC_CD_TABLE",
        "'Equipment' AS DESC_CD_TABLE_DESC",
        "EQUNR AS DESC_CD_CODE",
        "SPRAS AS DESC_CD_LANGUAGE",
        lit(1).alias("DESC_CD_POSITION"),
        "EQKTX AS DESC_CD_DESCRIPTION1",
        "EQKTU AS DESC_CD_DESCRIPTION2",
        "KZLTX AS DESC_CD_DETAIL1",
        "TXASP AS DESC_CD_DETAIL2",
        to_date("TEXTCHANGEDDATETIME").alias("DESC_CD_DETAIL3"),
        lit("WW GPP").alias("DESC_CD_SOURCE_SYSTEM")
    ),
    # ... repeat the above pattern for the remaining data sources
]

# Union all the data sources
all_df = source_dfs[0]
for df in source_dfs[1:]:
    all_df = all_df.union(df)

# Read the target data
target_df = spark.read.format("jdbc").options(
    url="jdbc:oracle:thin:@//hostname:port/sid",
    driver="oracle.jdbc.driver.OracleDriver",
    dbtable="ddwh01_dw.TM_DESC_DESCRIPTION",
    user="username",
    password="password"
).select(
    "DESC_CD_TABLE",
    "DESC_CD_CODE",
    "DESC_CD_LANGUAGE",
    nvl(col("DESC_CD_POSITION"), -1).alias("DESC_CD_POSITION")
)

# Perform the merge operation
merged_df = all_df.alias("sa") \
    .join(target_df.alias("target"), [
        col("sa.DESC_CD_TABLE") == col("target.DESC_CD_TABLE"),
        col("sa.DESC_CD_CODE") == col("target.DESC_CD_CODE"),
        col("sa.DESC_CD_LANGUAGE") == col("target.DESC_CD_LANGUAGE"),
        nvl(col("sa.DESC_CD_POSITION"), -1) == nvl(col("target.DESC_CD_POSITION"), -1)
    ], "left_anti") \
    .union(
        all_df.alias("sa") \
            .join(target_df.alias("target"), [
                col("sa.DESC_CD_TABLE") == col("target.DESC_CD_TABLE"),
                col("sa.DESC_CD_CODE") == col("target.DESC_CD_CODE"),
                col("sa.DESC_CD_LANGUAGE") == col("target.DESC_CD_LANGUAGE"),
                nvl(col("sa.DESC_CD_POSITION"), -1) == nvl(col("target.DESC_CD_POSITION"), -1)
            ], "left_anti") \
            .withColumn("DESC_DT_INSERT", sys_date()) \
            .withColumn("DESC_DT_LAST_MODIFY", sys_date()) \
            .withColumn("DESC_ID_BATCH_ID", col("p_ELT_ID_BATCH").cast("int")) \
            .withColumn("DESC_ID_BATCH_LAST_MODIFY", col("p_ELT_ID_BATCH").cast("int")) \
            .withColumn("DESC_DT_START_VALIDITY", to_date("01/01/1900", "dd/MM/yyyy")) \
            .withColumn("DESC_DT_END_VALIDITY", to_date("31/12/9999", "dd/MM/yyyy")) \
            .select(
                "DDWH01_DW.SEQ_TM_DESC.NEXTVAL".alias("DESC_ID_TABLE"),
                "sa.DESC_CD_TABLE",
                "sa.DESC_CD_TABLE_DESC",
                "sa.DESC_CD_CODE",
                "sa.DESC_CD_LANGUAGE",
                "sa.DESC_CD_POSITION",
                "sa.DESC_CD_DESCRIPTION1",
                "sa.DESC_CD_DESCRIPTION2",
                "sa.DESC_CD_DETAIL1",
                "sa.DESC_CD_DETAIL2",
                "sa.DESC_CD_DETAIL3",
                "sa.DESC_CD_SOURCE_SYSTEM",
                "sa.DESC_DT_INSERT",
                "sa.DESC_DT_LAST_MODIFY",
                "sa.DESC_ID_BATCH_ID",
                "sa.DESC_ID_BATCH_LAST_MODIFY",
                "sa.DESC_DT_START_VALIDITY",
                "sa.DESC_DT_END_VALIDITY"
            )
    )

# Write the result back to the target table
merged_df.write.format("jdbc").options(
    url="jdbc:oracle:thin:@//hostname:port/sid",
    driver="oracle.jdbc.driver.OracleDriver",
    dbtable="ddwh01_dw.TM_DESC_DESCRIPTION",
    user="username",
    password="password"
).mode("overwrite").save()
```

Please replace `"hostname:port/sid"` with your actual Oracle database connection details, and `"username"`, `"password"`, `"p_ELT_ID_BATCH"`, `"n_ELT_ID_JOB_LOG"` with your actual values.

Note that this code assumes that the `DDWH01_DW.SEQ_TM_DESC` sequence is already created in your database. If not, you need to create it first.