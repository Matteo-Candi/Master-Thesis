system
You are an expert in translating code from SAS to Python error-free, maintaining all functionality; the code is commented but not exaplined; variables, file paths and libraries used are well defined or imported; Python code is more efficient than SAS one while keeping it readable and concise.
user
Translate the following code from SAS to Python:

libname ter "C:\Users\mcandi\OneDrive - KPMG\Desktop\project\SAS_scripts\Data_sets";
libname sez "C:\Users\mcandi\OneDrive - KPMG\Desktop\project\SAS_scripts\Data_sets";

libname ter_out "C:\Users\mcandi\OneDrive - KPMG\Desktop\project\SAS_scripts\Data_sets";
libname sez_out "C:\Users\mcandi\OneDrive - KPMG\Desktop\project\SAS_scripts\Data_sets";

libname appo "C:\Users\mcandi\OneDrive - KPMG\Desktop\project\SAS_scripts";

options mergenoby = warn;

%include "C:\Users\mcandi\OneDrive - KPMG\Desktop\project\SAS_scripts\Macro\macroarrotondainterogruppo.sas";

title1 "STIMA DELLA POPOLAZIONE PER ET�";

proc means data = appo.avanzamento_eta noprint;
	class codice_sezione cleta;
	types codice_sezione*cleta;
	id codice_comune__str;
	output out = basesez (drop = _type_ _freq_)
		   sum(maschi_distribuiti femmine_distribuite) = ;
run;
data basesez;
	set basesez;
	length idqua $ 11;
	idqua = codice_comune__str||cleta;
run;

data basecom;
	set ter_out.Popolazione_eta_sesso_comune;
	if eta <= 4 then cleta = "00-04";
	else if eta <= 9 then cleta = "05-09";
	else if eta <= 14 then cleta = "10-14";
	else if eta <= 19 then cleta = "15-19";
	else if eta <= 24 then cleta = "20-24";
	else if eta <= 29 then cleta = "25-29";
	else if eta <= 34 then cleta = "30-34";
	else if eta <= 39 then cleta = "35-39";
	else if eta <= 44 then cleta = "40-44";
	else if eta <= 49 then cleta = "45-49";
	else if eta <= 54 then cleta = "50-54";
	else if eta <= 59 then cleta = "55-59";
	else if eta <= 64 then cleta = "60-64";
	else if eta <= 69 then cleta = "65-69";
	else if eta <= 74 then cleta = "70-74";
	else cleta = "75-99";
run;
title2 "MIN E MAX ET� PER CLASSE";
proc means data = basecom min max maxdec = 0;
	class cleta;
	var eta;
run;
proc means data = basecom noprint;
	class codice_comune__str cleta;
	types codice_comune__str*cleta;
	output out = comcla (drop = _type_ _freq_)
		sum(maschi femmine) = maschi_cla_com femmine_cla_com;
run;
data comunale_cla;
	set comcla;
	length idqua $ 11;
	idqua = codice_comune__str||cleta;
	keep idqua maschi_cla_com femmine_cla_com;
run;

proc sort data = basesez;
	by idqua;
run;
proc means data = basesez noprint;
	by idqua;
	output out = totverif (drop = _type_ _freq_)
		   sum(maschi_distribuiti femmine_distribuite) = / autoname autolabel;
run;
proc sort data = comunale_cla;
	by idqua;
run;
data quadrare;
	merge basesez totverif comunale_cla;
	by idqua;
run; *6.442.848;
data denzero;	*data set di controllo;
	set quadrare;
	if (maschi_distribuiti_sum = 0 and maschi_cla_com > 0)
	or (femmine_distribuite_sum = 0 and femmine_cla_com > 0);
run; 
proc sort data = denzero;
	by codice_sezione cleta;
run;
title2 "ANOMALIE MAX";
proc means data = denzero max;
	var maschi_cla_com femmine_cla_com;
run; 

data geog;
	set sez.geog20b (keep = cods11 codc620b);
	rename cods11 = codice_sezione
		   codc620b = codice_comune__str;
run;
proc sort data = geog;
	by codice_sezione;
run;
data demo;
	set sez.demo20b (keep = cods11 stmpop19);
	rename cods11 = codice_sezione
		   stmpop19 = popolazione_precedente;
run;
proc sort data = demo;
	by codice_sezione;
run;
data gbd;
	merge geog demo;
	by codice_sezione;
run;
proc sort data = gbd;
	by codice_comune__str descending popolazione_precedente;
run;
data piu_popolosa;
	set gbd;
	by codice_comune__str;
	if first.codice_comune__str;
	piu_popolosa = 1;
	keep codice_sezione piu_popolosa;
run;
proc sort data = quadrare;
	by codice_sezione;
run;
proc sort data = piu_popolosa;
	by codice_sezione;
run;
data quadrare;
	merge quadrare piu_popolosa;
	by codice_sezione;
run;

data quadrare_corretto;
	set quadrare;
	if maschi_distribuiti_sum = 0 and maschi_cla_com > 0 and piu_popolosa = 1
		then
			do;
				maschi_distribuiti = maschi_cla_com;
				corretto = 1;
			end;
	if femmine_distribuite_sum = 0 and femmine_cla_com > 0 and piu_popolosa = 1
		then
			do;
				femmine_distribuite = femmine_cla_com;
				corretto = 1;
			end;
run;
data corretto;	*data set di controllo;
	set quadrare_corretto;
	if corretto;
run;	*83;
data denzero_post;	*data set di controllo;
	set quadrare_corretto;
	if (maschi_distribuiti_sum = 0 and maschi_cla_com > 0)
	or (femmine_distribuite_sum = 0 and femmine_cla_com > 0);
run; 

proc sort data = quadrare_corretto;
	by idqua;
run;
proc means data = quadrare_corretto noprint;
	by idqua;
	output out = totverif_new (drop = _type_ _freq_)
		sum(maschi_distribuiti femmine_distribuite) = / autoname autolabel;
run;
data quadrare_new;
	merge quadrare_corretto (drop = maschi_distribuiti_sum femmine_distribuite_sum) totverif_new;
	by idqua;
run;
data denzero_new;	*data set di controllo;
	set quadrare_new;
	if (maschi_distribuiti_sum = 0 and maschi_cla_com > 0)
	or (femmine_distribuite_sum = 0 and femmine_cla_com > 0);
run; *vuoto: ok;

data quadrato;
	set quadrare_new;
	if maschi_distribuiti_sum > 0
		then maschi_qua = round(maschi_distribuiti*maschi_cla_com/maschi_distribuiti_sum);
		else maschi_qua = 0;
	if femmine_distribuite_sum > 0
		then femmine_qua = round(femmine_distribuite*femmine_cla_com/femmine_distribuite_sum);
		else femmine_qua = 0;
	drop maschi_distribuiti_sum femmine_distribuite_sum maschi_cla_com femmine_cla_com;
run;
title "TOTALI PRIMA DELLA RETTIFICA DELLE DISCREPANZE";
proc tabulate data = quadrato;
	var maschi_qua femmine_qua;
	table maschi_qua femmine_qua,sum*f=comma12.;
run;
title "TOTALI COMUNALI";
proc tabulate data = ter_out.Popolazione_eta_sesso_comune;;
	var maschi femmine;
	table maschi femmine,sum*f=comma12.;
run;

%arrotondainterogruppo(quadrato,		
					   maschi_qua,		
					   comunale_cla,	
					   maschi_cla_com,	
					   idqua,			
					   quadrato_ok1);	
%arrotondainterogruppo(quadrato_ok1,	
					   femmine_qua,		
					   comunale_cla,	
					   femmine_cla_com,	
					   idqua,			
					   quadrato_ok2);	

data errore;
	set quadrato_ok2;
	if maschi_qua < 0 or femmine_qua < 0;
run; *vuoto: ok;
proc means data = quadrato_ok2 noprint;
	class idqua;
	types idqua;
	output out = verifica (drop = _type_ _freq_)
		sum(maschi_qua femmine_qua) = / autoname;
run;
data confronto_verifica;
	merge verifica comunale_cla;
	by idqua;
run;
data errore_m;
	set confronto_verifica;
	if maschi_qua_sum ~= maschi_cla_com;
run; *vuoto: ok;
data errore_f;
	set confronto_verifica;
	if femmine_qua_sum ~= femmine_cla_com;
run; *vuoto: ok;

data quadrato_ok2;
	set quadrato_ok2;
	popolazione = sum(maschi_qua,femmine_qua);
run;
proc means data = quadrato_ok2 noprint;
	class codice_sezione;
	types codice_sezione;
	output out = nuova (drop = _type_ _freq_)
		   sum(popolazione) = ;
run;
data demo1;
	set sez.demo20b (keep = cods11 pop11 stmpop19);
	rename cods11 = codice_sezione
		   stmpop19 = popolazione_precedente
		   pop11 = popolazione_censimento;
run;
proc sort data = demo1;
	by codice_sezione;
run;
data geog1;
	set sez_out.geografica_sezione (keep = codice_sezione codice_comune__str sigla_provincia nome_comune);
run;
proc sort data = geog1;
	by codice_sezione;
run;
data cfr_anni;
	merge geog1 nuova demo1;
	by codice_sezione;
	differenza_assoluta = popolazione - popolazione_precedente;
	if popolazione_precedente > 0
		then differenza_percentuale = 100*differenza_assoluta/popolazione_precedente;
run;
title2 "DISTRIBUZIONE DELLE DIFFERENZE ASSOLUTE";
proc univariate data = cfr_anni;
	var differenza_assoluta;
	histogram differenza_assoluta;
run;
title2 "DISTRIBUZIONE DELLE DIFFERENZE %";
proc univariate data = cfr_anni;
	var differenza_percentuale;
	histogram differenza_percentuale;
run;
proc sort data = cfr_anni;
	by differenza_assoluta;
run;
proc sort data = cfr_anni;
	by differenza_percentuale;
run;
title2 "DISTRIBUZIONE DELLE DIFFERENZE ASSOLUTE CON |differenza_percentuale| > 20%";
proc univariate data = cfr_anni;
	where abs(differenza_percentuale) > 20;
	var differenza_assoluta;
	histogram differenza_assoluta;
run;
title2 "DISTRIBUZIONE DELLE DIFFERENZE % CON |differenza_assoluta| > 10";
proc univariate data = cfr_anni;
	where abs(differenza_assoluta) > 10;
	var differenza_percentuale;
	histogram differenza_percentuale;
run;
data nuova_copertura;
	set cfr_anni;
	if popolazione > 0 and popolazione_precedente = 0;
run; *vuoto;
data persa_copertura;
	set cfr_anni;
	if popolazione = 0 and popolazione_precedente > 0;
run; *4;

options nolabel;
data risultato;
	set quadrato_ok2 (keep = codice_sezione cleta maschi_qua femmine_qua popolazione);
	anno_riferimento = 2020;
	release = 2021;
	rename maschi_qua = maschi
		   femmine_qua = femmine
		   cleta = classe_eta;
run;
proc sort data = risultato;
	by codice_sezione classe_eta;
run;


assistant
Here is the Python equivalent of the SAS code you provided:

```python
import pandas as pd
import numpy as np

# Define file paths
ter_path = "C:\\Users\\mcandi\\OneDrive - KPMG\\Desktop\\project\\SAS_scripts\\Data_sets\\"
sez_path = "C:\\Users\\mcandi\\OneDrive - KPMG\\Desktop\\project\\SAS_scripts\\Data_sets\\"
ter_out_path = "C:\\Users\\mcandi\\OneDrive - KPMG\\Desktop\\project\\SAS_scripts\\Data_sets\\"
sez_out_path = "C:\\Users\\mcandi\\OneDrive - KPMG\\Desktop\\project\\SAS_scripts\\Data_sets\\"
appo_path = "C:\\Users\\mcandi\\OneDrive - KPMG\\Desktop\\project\\SAS_scripts\\"

# Load data
bassez = pd.read_sas(ter_path + "avanzamento_eta.sas7bdat")
bascom = pd.read_sas(sez_path + "Popolazione_eta_sesso_comune.sas7bdat")
comunale_cla = pd.read_sas(ter_out_path + "comunale_cla.sas7bdat")
geog = pd.read_sas(sez_out_path + "geog20b.sas7bdat")
demo = pd.read_sas(sez_out_path + "demo20b.sas7bdat")

# Perform data manipulation
bassez['idqua'] = bassez['codice_comune__str'] + bassez['cleta']
bascom['cleta'] = np.where(bascom['eta'] <= 4, '00-04',
                            np.where(bascom['eta'] <= 9, '05-09',
                                     np.where(bascom['eta'] <= 14, '10-14',
                                              np.where(bascom['eta'] <= 19, '15-19',
                                                       np.where(bascom['eta'] <= 24, '20-24',
                                                                np.where(bascom['eta'] <= 29, '25-29',
                                                                         np.where(bascom['eta'] <= 34, '30-34',
                                                                                  np.where(bascom['eta'] <= 39, '35-39',
                                                                                           np.where(bascom['eta'] <= 44, '40-44',
                                                                                                    np.where(bascom['eta'] <= 49, '45-49',
                                                                                                             np.where(bascom['eta'] <= 54, '50-54',
                                                                                                                       np.where(bascom['eta'] <= 59, '55-59',
                                                                                                                                np.where(bascom['eta'] <= 64, '60-64',
                                                                                                                                         np.where(bascom['eta'] <= 69, '65-69',
                                                                                                                                                  np.where(bascom['eta'] <= 74, '70-74',
                                                                                                                                                           '75-99'))))))))))))))

bascom = bascom[['codice_comune__str', 'cleta', 'maschi', 'femmine']]
bascom = bascom.groupby(['codice_comune__str', 'cleta']).sum().reset_index()
bascom['idqua'] = bascom['codice_comune__str'] + bascom['cleta']

comunale_cla['idqua'] = comunale_cla['codice_comune__str'] + comunale_cla['cleta']

bassez = pd.merge(bassez, comunale_cla, on='idqua', how='left')

bassez = bassez.groupby('idqua').sum().reset_index()
bassez['idqua'] = bassez['codice_comune__str'] + bassez['cleta']

totverif = bassez.groupby('idqua').sum().reset_index()
totverif = totverif.rename(columns={'maschi_distribuiti': 'maschi_distribuiti_sum', 'femmine_distribuiti': 'femmine_distribuiti_sum'})

quadrare = pd.merge(bassez, totverif, on='idqua', how='left')

denzero = quadrare[(quadrare['maschi_distribuiti_sum'] == 0) & (quadrare['maschi_cla_com'] > 0) |
                   (quadrare['femmine_distribuiti_sum'] == 0) & (quadrare['femmine_cla_com'] > 0)]

geog = geog[['codice_sezione', 'codice_comune__str', 'sigla_provincia', 'nome_comune']]
geog = geog.rename(columns={'codice_sezione': 'codice_sezione_geog', 'codice_comune__str': 'codice_comune__str_geog'})

demo = demo[['codice_sezione', 'popolazione_precedente']]
demo = demo.rename(columns={'codice_sezione': 'codice_sezione_demo', 'popolazione_precedente': 'popolazione_precedente_demo'})

gbd = pd.merge(geog, demo, on='codice_sezione_geog', how='left')
gbd = gbd.sort_values(by='popolazione_precedente_demo', ascending=False)
piu_popolosa = gbd.drop_duplicates(subset='codice_comune__str_geog', keep='first')
piu_popolosa['piu_popolosa'] = 1

quadrare = pd.merge(quadrare, piu_popolosa, on='codice_sezione', how='left')

quadrare_corretto = quadrare[(quadrare['maschi_distribuiti_sum'] == 0) & (quadrare['maschi_cla_com'] > 0) & (quadrare['piu_popolosa'] == 1) |
                            (quadrare['femmine_distribuiti_sum'] == 0) & (quadrare['femmine_cla_com'] > 0) & (quadrare['piu_popolosa'] == 1)]

denzero_post = quadrare_corretto[(quadrare_corretto['maschi_distribuiti_sum'] == 0) & (quadrare_corretto['maschi_cla_com'] > 0) |
                                (quadrare_corretto['femmine_distribuiti_sum'] == 0) & (quadrare_corretto['femmine_cla_com'] > 0)]

quadrato_ok2 = quadrare_corretto.copy()
quadrato_ok2['maschi_qua'] = np.where(quadrato_ok2['maschi_distribuiti_sum'] > 0,
                                       round(quadrato_ok2['maschi_distribuiti'] * quadrato_ok2['maschi_cla_com'] / quadrato_ok2['maschi_distribuiti_sum']),
                                       0)
quadrato_ok2['femmine_qua'] = np.where(quadrato_ok2['femmine_distribuiti_sum'] > 0,
                                        round(quadrato_ok2['femmine_distribuiti'] * quadrato_ok2['femmine_cla_com'] / quadrato_ok2['femmine_distribuiti_sum']),
                                        0)

quadrato_ok2 = quadrato_ok2.drop(columns=['maschi_distribuiti_sum', 'femmine_distribuiti_sum', 'maschi_cla_com', 'femmine_cla_com'])

quadrato_ok2['popolazione'] = quadrato_ok2['maschi_qua'] + quadrato_ok2['femmine_qua']

nuova = quadrato_ok2.groupby('codice_sezione').sum().reset_index()
nuova = nuova.rename(columns={'popolazione': 'popolazione_totale'})

demo1 = pd.read_sas(sez_out_path + "demo20b.sas7bdat")
demo1 = demo1.rename(columns={'codice_sezione': 'codice_sezione_demo', 'pop11': 'popolazione_censimento'})

geog1 = pd.read_sas(sez_out_path + "geografica_sezione.sas7bdat")
geog1 = geog1.rename(columns={'codice_sezione': 'codice_sezione_geog', 'codice_comune__str': 'codice_comune__str_geog', 'sigla_provincia': 'sigla_provincia_geog', 'nome_comune': 'nome_comune_geog'})

cfr_anni = pd.merge(geog1, nuova, on='codice_sezione_geog', how='left')
cfr_anni = pd.merge(cfr_anni, demo1, on='codice_sezione_demo', how='left')
cfr_anni['differenza_assoluta'] = cfr_anni['popolazione'] - cfr_anni['popolazione_precedente']
cfr_anni['differenza_percentuale'] = 100 * cfr_anni['differenza_assoluta'] / cfr_anni['popolazione_precedente']

cfr_anni = cfr_anni.sort_values(by='differenza_assoluta')
cfr_anni = cfr_anni.sort_values(by='differenza_percentuale')

errore_m = cfr_anni[(cfr_anni['differenza_assoluta'] < 0) & (cfr_anni['maschi'] > 0)]
errore_f = cfr_anni[(cfr_anni['differenza_assoluta'] < 0) & (cfr_anni['femmine'] > 0)]

quadrato_ok2['popolazione'] = quadrato_ok2['maschi_qua'] + quadrato_ok2['femmine_qua']

nuova_copertura = cfr_anni[(cfr_anni['popolazione'] > 0) & (cfr_anni['popolazione_precedente'] == 0)]
persa_copertura = cfr_anni[(cfr_anni['popolazione'] == 0) & (cfr_anni['popolazione_precedente'] > 0)]

risultato = quadrato_ok2[['codice_sezione', 'cleta', 'maschi_qua', 'femmine_qua', 'popolazione']]
risultato['anno_riferimento'] = 2020
risultato['release'] = 2021

risultato = risultato.sort_values(by=['codice_sezione', 'cleta'])
```

Please note that this Python code assumes that the SAS files have been converted to CSV or other formats that can be read by pandas. Also, the macro `macroarrotondainterogruppo` is not provided, so it is assumed that it has been implemented elsewhere in the Python code.