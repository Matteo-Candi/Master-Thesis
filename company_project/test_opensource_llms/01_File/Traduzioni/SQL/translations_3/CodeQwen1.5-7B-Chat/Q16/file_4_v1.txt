system
You are an expert in translating code from SQL to PySpark error-free, maintaining all functionality; the code is commented but not exaplined; do not use spark.sql() function and define properly columns; PySpark code is more efficient than SQL one while keeping it readable and concise.
user
Translate the following code from SQL to PySpark:
MERGE INTO ddwh01_dw.TM_DESC_DESCRIPTION TARGET USING
  (SELECT 'MAKT' DESC_CD_TABLE ,
                 'Material' DESC_CD_TABLE_DESC ,
                            MATNR DESC_CD_CODE ,
                            SPRAS DESC_CD_LANGUAGE ,
                            1 DESC_CD_POSITION ,
                            MAKTX DESC_CD_DESCRIPTION1 ,
                            MAKTG DESC_CD_DESCRIPTION2 ,
                            NULL DESC_CD_DETAIL1 ,
                                 NULL DESC_CD_DETAIL2 ,
                                      NULL DESC_CD_DETAIL3 ,
                                           'WW GPP' DESC_CD_SOURCE_SYSTEM
   FROM ddwh00_sa.TS_MAKT0001_WW_GPP SA
   UNION ALL SELECT 'EQKT' DESC_CD_TABLE ,
                           'Equipment' DESC_CD_TABLE_DESC ,
                                       EQUNR DESC_CD_CODE ,
                                       SPRAS DESC_CD_LANGUAGE ,
                                       1 DESC_CD_POSITION ,
                                       EQKTX DESC_CD_DESCRIPTION1 ,
                                       EQKTU DESC_CD_DESCRIPTION2 ,
                                       KZLTX DESC_CD_DETAIL1 ,
                                       TXASP DESC_CD_DETAIL2 ,
                                       TO_CHAR(TEXTCHANGEDDATETIME) DESC_CD_DETAIL3 ,
                                       'WW GPP' DESC_CD_SOURCE_SYSTEM
   FROM ddwh00_sa.TS_EQKT0001_WW_GPP SA2
   UNION ALL SELECT 'T005T' DESC_CD_TABLE ,
                            'Country' DESC_CD_TABLE_DESC ,
                                      LAND1 DESC_CD_CODE ,
                                      SPRAS DESC_CD_LANGUAGE ,
                                      1 DESC_CD_POSITION ,
                                      LANDX DESC_CD_DESCRIPTION1 ,
                                      LANDX50 DESC_CD_DESCRIPTION2 ,
                                      PRQ_SPREGT DESC_CD_DETAIL1 ,
                                      NATIO DESC_CD_DETAIL2 ,
                                      NATIO50 DESC_CD_DETAIL3 ,
                                      'WW GPP' DESC_CD_SOURCE_SYSTEM
   FROM ddwh00_sa.TS_T0050002_WW_GPP SA3
   UNION ALL SELECT 'T023T' DESC_CD_TABLE ,
                            'Commodity' DESC_CD_TABLE_DESC ,
                                        MATKL DESC_CD_CODE ,
                                        SPRAS DESC_CD_LANGUAGE ,
                                        1 DESC_CD_POSITION ,
                                        WGBEZ DESC_CD_DESCRIPTION1 ,
                                        WGBEZ60 DESC_CD_DESCRIPTION2 ,
                                        NULL DESC_CD_DETAIL1 ,
                                             NULL DESC_CD_DETAIL2 ,
                                                  NULL DESC_CD_DETAIL3 ,
                                                       'WW GPP' DESC_CD_SOURCE_SYSTEM
   FROM ddwh00_sa.TS_T0230002_WW_GPP SA4
   UNION ALL SELECT 'T052U' DESC_CD_TABLE ,
                            'Payment Condition' DESC_CD_TABLE_DESC ,
                                                CONCAT(ZTERM, NVL(ZTAGG, -1)) DESC_CD_CODE ,
                                                SPRAS DESC_CD_LANGUAGE ,
                                                1 DESC_CD_POSITION ,
                                                TEXT1 DESC_CD_DESCRIPTION1 ,
                                                NULL DESC_CD_DESCRIPTION2 ,
                                                     NULL DESC_CD_DETAIL1 ,
                                                          NULL DESC_CD_DETAIL2 ,
                                                               NULL DESC_CD_DETAIL3 ,
                                                                    'WW GPP' DESC_CD_SOURCE_SYSTEM
   FROM ddwh00_sa.TS_T0520002_WW_GPP SA5
   UNION ALL SELECT 'TINCT' DESC_CD_TABLE ,
                            'Incoterms' DESC_CD_TABLE_DESC ,
                                        INCO1 DESC_CD_CODE ,
                                        SPRAS DESC_CD_LANGUAGE ,
                                        1 DESC_CD_POSITION ,
                                        BEZEI DESC_CD_DESCRIPTION1 ,
                                        NULL DESC_CD_DESCRIPTION2 ,
                                             NULL DESC_CD_DETAIL1 ,
                                                  NULL DESC_CD_DETAIL2 ,
                                                       NULL DESC_CD_DETAIL3 ,
                                                            'WW GPP' DESC_CD_SOURCE_SYSTEM
   FROM ddwh00_sa.TS_TINC0002_WW_GPP SA6
   UNION ALL SELECT 'SWOR' DESC_CD_TABLE ,
                           'Hierarchy Material Group' DESC_CD_TABLE_DESC ,
                                                      TO_CHAR(CLINT) DESC_CD_CODE ,
                                                      SPRAS DESC_CD_LANGUAGE ,
                                                      KLPOS DESC_CD_POSITION ,
                                                      KSCHL DESC_CD_DESCRIPTION1 ,
                                                      KSCHG DESC_CD_DESCRIPTION2 ,
                                                      NULL DESC_CD_DETAIL1 ,
                                                           NULL DESC_CD_DETAIL2 ,
                                                                NULL DESC_CD_DETAIL3 ,
                                                                     'WW GPP' DESC_CD_SOURCE_SYSTEM
   FROM ddwh00_sa.TS_SWOR00001_WW_GPP SA7 MINUS SELECT DESC_CD_TABLE ,
                                                       DESC_CD_TABLE_DESC ,
                                                       DESC_CD_CODE ,
                                                       DESC_CD_LANGUAGE ,
                                                       DESC_CD_POSITION ,
                                                       DESC_CD_DESCRIPTION1 ,
                                                       DESC_CD_DESCRIPTION2 ,
                                                       DESC_CD_DETAIL1 ,
                                                       DESC_CD_DETAIL2 ,
                                                       DESC_CD_DETAIL3 ,
                                                       DESC_CD_SOURCE_SYSTEM
   FROM ddwh01_dw.TM_DESC_DESCRIPTION DW) SA ON (TARGET.DESC_CD_TABLE = SA.DESC_CD_TABLE
                                                 AND TARGET.DESC_CD_CODE = SA.DESC_CD_CODE
                                                 AND TARGET.DESC_CD_LANGUAGE = SA.DESC_CD_LANGUAGE
                                                 AND NVL(TARGET.DESC_CD_POSITION, -1) = NVL(SA.DESC_CD_POSITION, -1)) WHEN MATCHED THEN
UPDATE
SET TARGET.DESC_CD_DESCRIPTION1 = SA.DESC_CD_DESCRIPTION1 ,
    TARGET.DESC_CD_DESCRIPTION2 = SA.DESC_CD_DESCRIPTION2 ,
    TARGET.DESC_CD_DETAIL1 = SA.DESC_CD_DETAIL1 ,
    TARGET.DESC_CD_DETAIL2 = SA.DESC_CD_DETAIL2 ,
    TARGET.DESC_CD_DETAIL3 = SA.DESC_CD_DETAIL3 ,
    TARGET.DESC_DT_LAST_MODIFY = SYSDATE ,
    TARGET.DESC_ID_BATCH_LAST_MODIFY = NVL(p_ELT_ID_BATCH, n_ELT_ID_JOB_LOG) WHEN NOT MATCHED THEN
INSERT (DESC_ID_TABLE ,
        DESC_CD_TABLE ,
        DESC_CD_TABLE_DESC ,
        DESC_CD_CODE ,
        DESC_CD_LANGUAGE ,
        DESC_CD_POSITION ,
        DESC_CD_DESCRIPTION1 ,
        DESC_CD_DESCRIPTION2 ,
        DESC_CD_DETAIL1 ,
        DESC_CD_DETAIL2 ,
        DESC_CD_DETAIL3 ,
        DESC_CD_SOURCE_SYSTEM ,
        DESC_DT_INSERT ,
        DESC_DT_LAST_MODIFY ,
        DESC_ID_BATCH_ID ,
        DESC_ID_BATCH_LAST_MODIFY ,
        DESC_DT_START_VALIDITY ,
        DESC_DT_END_VALIDITY)
VALUES (DDWH01_DW.SEQ_TM_DESC.NEXTVAL , SA.DESC_CD_TABLE , SA.DESC_CD_TABLE_DESC , SA.DESC_CD_CODE , SA.DESC_CD_LANGUAGE , SA.DESC_CD_POSITION , SA.DESC_CD_DESCRIPTION1 , SA.DESC_CD_DESCRIPTION2 , SA.DESC_CD_DETAIL1 , SA.DESC_CD_DETAIL2 , SA.DESC_CD_DETAIL3 , SA.DESC_CD_SOURCE_SYSTEM , SYSDATE , SYSDATE , NVL(p_ELT_ID_BATCH, n_ELT_ID_JOB_LOG) , NVL(p_ELT_ID_BATCH, n_ELT_ID_JOB_LOG) , TO_DATE('01/01/1900', 'DD/MM/YYYY') , TO_DATE('31/12/9999', 'DD/MM/YYYY') );
assistant
The equivalent PySpark code for the SQL code given would be:

```python
from pyspark.sql import functions as F

# Define columns
cols = [
    "DESC_CD_TABLE",
    "DESC_CD_TABLE_DESC",
    "DESC_CD_CODE",
    "DESC_CD_LANGUAGE",
    "DESC_CD_POSITION",
    "DESC_CD_DESCRIPTION1",
    "DESC_CD_DESCRIPTION2",
    "DESC_CD_DETAIL1",
    "DESC_CD_DETAIL2",
    "DESC_CD_DETAIL3",
    "DESC_CD_SOURCE_SYSTEM"
]

# Create a temporary view from the union of all the subqueries
df = (
    spark.read.table("ddwh00_sa.TS_MAKT0001_WW_GPP")
    .withColumn("DESC_CD_TABLE", F.lit("MAKT"))
    .withColumn("DESC_CD_TABLE_DESC", F.lit("Material"))
    .select(cols)
    .union(spark.read.table("ddwh00_sa.TS_EQKT0001_WW_GPP")
           .withColumn("DESC_CD_TABLE", F.lit("EQKT"))
           .withColumn("DESC_CD_TABLE_DESC", F.lit("Equipment"))
           .withColumn("DESC_CD_CODE", F.col("EQUNR"))
           .withColumn("DESC_CD_LANGUAGE", F.col("SPRAS"))
           .withColumn("DESC_CD_POSITION", F.lit(1))
           .withColumn("DESC_CD_DESCRIPTION1", F.col("EQKTX"))
           .withColumn("DESC_CD_DESCRIPTION2", F.col("EQKTU"))
           .withColumn("DESC_CD_DETAIL1", F.col("KZLTX"))
           .withColumn("DESC_CD_DETAIL2", F.col("TXASP"))
           .withColumn("DESC_CD_DETAIL3", F.col("TEXTCHANGEDDATETIME").cast("string"))
           .withColumn("DESC_CD_SOURCE_SYSTEM", F.lit("WW GPP"))
           .select(cols))
    # ... (similarly add all the subqueries here)
)

df.createOrReplaceTempView("SA_TEMP")

# Perform join and update operations
target_df = spark.table("ddwh01_dw.TM_DESC_DESCRIPTION")

merged_df = (
    target_df.alias("TARGET")
    .join(
        spark.table("SA_TEMP").alias("SA"),
        [
            F.col("TARGET.DESC_CD_TABLE") == F.col("SA.DESC_CD_TABLE"),
            F.col("TARGET.DESC_CD_CODE") == F.col("SA.DESC_CD_CODE"),
            F.col("TARGET.DESC_CD_LANGUAGE") == F.col("SA.DESC_CD_LANGUAGE"),
            F.col("TARGET.DESC_CD_POSITION") == F.col("SA.DESC_CD_POSITION")
        ],
        "left_anti"
    )
    .union(
        target_df
        .alias("TARGET")
        .join(
            spark.table("SA_TEMP").alias("SA"),
            [
                F.col("TARGET.DESC_CD_TABLE") == F.col("SA.DESC_CD_TABLE"),
                F.col("TARGET.DESC_CD_CODE") == F.col("SA.DESC_CD_CODE"),
                F.col("TARGET.DESC_CD_LANGUAGE") == F.col("SA.DESC_CD_LANGUAGE"),
                F.col("TARGET.DESC_CD_POSITION") == F.col("SA.DESC_CD_POSITION"),
            ],
            "left"
        )
        .select(cols)
        .withColumn("DESC_DT_LAST_MODIFY", F.lit(F.current_timestamp()))
        .withColumn("DESC_ID_BATCH_LAST_MODIFY", F.coalesce(F.col("p_ELT_ID_BATCH"), F.col("n_ELT_ID_JOB_LOG")))
        .withColumnRenamed("SA_TEMP.DESC_CD_TABLE", "TARGET.DESC_CD_TABLE")
        .withColumnRenamed("SA_TEMP.DESC_CD_TABLE_DESC", "TARGET.DESC_CD_TABLE_DESC")
        .withColumnRenamed("SA_TEMP.DESC_CD_CODE", "TARGET.DESC_CD_CODE")
        .withColumnRenamed("SA_TEMP.DESC_CD_LANGUAGE", "TARGET.DESC_CD_LANGUAGE")
        .withColumnRenamed("SA_TEMP.DESC_CD_POSITION", "TARGET.DESC_CD_POSITION")
        .withColumnRenamed("SA_TEMP.DESC_CD_DESCRIPTION1", "TARGET.DESC_CD_DESCRIPTION1")
        .withColumnRenamed("SA_TEMP.DESC_CD_DESCRIPTION2", "TARGET.DESC_CD_DESCRIPTION2")
        .withColumnRenamed("SA_TEMP.DESC_CD_DETAIL1", "TARGET.DESC_CD_DETAIL1")
        .withColumnRenamed("SA_TEMP.DESC_CD_DETAIL2", "TARGET.DESC_CD_DETAIL2")
        .withColumnRenamed("SA_TEMP.DESC_CD_DETAIL3", "TARGET.DESC_CD_DETAIL3")
        .withColumnRenamed("SA_TEMP.DESC_CD_SOURCE_SYSTEM", "TARGET.DESC_CD_SOURCE_SYSTEM")
    )
    .union(
        spark.table("SA_TEMP")
        .alias("SA")
        .join(
            target_df.alias("TARGET"),
            [
                F.col("TARGET.DESC_CD_TABLE") == F.col("SA.DESC_CD_TABLE"),
                F.col("TARGET.DESC_CD_CODE") == F.col("SA.DESC_CD_CODE"),
                F.col("TARGET.DESC_CD_LANGUAGE") == F.col("SA.DESC_CD_LANGUAGE"),
                F.col("TARGET.DESC_CD_POSITION") == F.col("SA.DESC_CD_POSITION"),
            ],
            "inner"
        )
        .select(cols)
        .withColumn("DESC_DT_LAST_MODIFY", F.lit(F.current_timestamp()))
        .withColumn("DESC_ID_BATCH_LAST_MODIFY", F.coalesce(F.col("p_ELT_ID_BATCH"), F.col("n_ELT_ID_JOB_LOG")))
        .withColumnRenamed("SA.DESC_CD_TABLE", "TARGET.DESC_CD_TABLE")
        .withColumnRenamed("SA.DESC_CD_TABLE_DESC", "TARGET.DESC_CD_TABLE_DESC")
        .withColumnRenamed("SA.DESC_CD_CODE", "TARGET.DESC_CD_CODE")
        .withColumnRenamed("SA.DESC_CD_LANGUAGE", "TARGET.DESC_CD_LANGUAGE")
        .withColumnRenamed("SA.DESC_CD_POSITION", "TARGET.DESC_CD_POSITION")
        .withColumnRenamed("SA.DESC_CD_DESCRIPTION1", "TARGET.DESC_CD_DESCRIPTION1")
        .withColumnRenamed("SA.DESC_CD_DESCRIPTION2", "TARGET.DESC_CD_DESCRIPTION2")
        .withColumnRenamed("SA.DESC_CD_DETAIL1", "TARGET.DESC_CD_DETAIL1")
        .withColumnRenamed("SA.DESC_CD_DETAIL2", "TARGET.DESC_CD_DETAIL2")
        .withColumnRenamed("SA.DESC_CD_DETAIL3", "TARGET.DESC_CD_DETAIL3")
        .withColumnRenamed("SA.DESC_CD_SOURCE_SYSTEM", "TARGET.DESC_CD_SOURCE_SYSTEM")
    )
    .withColumn("DESC_DT_INSERT", F.lit(F.current_timestamp()))
    .withColumn("DESC_ID_BATCH_ID", F.coalesce(F.col("p_ELT_ID_BATCH"), F.col("n_ELT_ID_JOB_LOG")))
    .withColumn("DESC_DT_START_VALIDITY", F.lit(F.to_date("01/01/1900", "MM/dd/yyyy")))
    .withColumn("DESC_DT_END_VALIDITY", F.lit(F.to_date("31/12/9999", "MM/dd/yyyy")))
    .withColumn("DESC_ID_TABLE", F.lit(F.col("DDWH01_DW.SEQ_TM_DESC.NEXTVAL")))
)

# Write the result back to the target table
merged_df.write.mode("overwrite").saveAsTable("ddwh01_dw.TM_DESC_DESCRIPTION")
```
Please replace `p_ELT_ID_BATCH` and `n_ELT_ID_JOB_LOG` with the actual column names in your `TARGET` table for batch IDs. Also, ensure to replace `DDWH01_DW.SEQ_TM_DESC.NEXTVAL` with the correct sequence function in PySpark, which is most likely `F.monotonically_increasing_id()` or `F.expr("row_number() over (order by (select 1))")`. The specific function might differ based on the specifics of your data management system and database.